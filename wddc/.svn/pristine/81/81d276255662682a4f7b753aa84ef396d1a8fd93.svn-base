package com.wonders.wddc.tiles.file.at;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.nutz.dao.Cnd;
import org.nutz.dao.Dao;
import org.nutz.dao.sql.Criteria;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.lang.Strings;
import org.nutz.mvc.annotation.AdaptBy;
import org.nutz.mvc.annotation.At;
import org.nutz.mvc.annotation.Filters;
import org.nutz.mvc.annotation.Ok;
import org.nutz.mvc.upload.FieldMeta;
import org.nutz.mvc.upload.TempFile;
import org.nutz.mvc.upload.UploadAdaptor;

import com.wonders.wddc.tiles.file.entity.FwFileBo;
import com.wonders.wddc.tiles.tools.PropertyUtils;

@At("/kernel/file")
@IocBean(fields = "dao")
@Filters
public class FileAct {

	private Dao dao;
	/**
	 * 文件上传，每个业务主键和类型只对应唯一的文件.
	 * @param xjFile 上传文件
	 * @param catalog 类型
	 * @param busId 业务主键
	 * @param request
	 * @return
	 */
	@At
	@Ok("json")
	@AdaptBy(type = UploadAdaptor.class, args = { "${app.root}/WEB-INF/tmp" })
	public Object uploadSingle(TempFile xjFile,String catalog,String busId, HttpServletRequest request) {
		//String catalog = request.getParameter("catalog");
		//String busId = request.getParameter("busId");
		//删除原有数据和对象
		this.dealOldFile(catalog,busId);
		//上传新的数据和对象
		FwFileBo voteFile = this.upload(xjFile, catalog, busId, request.getSession());
		//6.回传数据
		Map<String,Object> result= new HashMap<String,Object>();
		//数据对象
		result.put("file", voteFile);
		return result;
	}
	private void dealOldFile(String catalog,String busId){
		FwFileBo oldVoteFile = dao.fetch(FwFileBo.class, Cnd.where("fileBusId", "=",busId).and("fileBusType", "=",catalog));
		if(oldVoteFile != null){
			File file = new File(PropertyUtils.getProperty("app.path")+oldVoteFile.getFilePath()+oldVoteFile.getFileId()+"."+oldVoteFile.getFileSuffix());
			file.delete();
			dao.delete(oldVoteFile);
		}
	}
	/**
	 * 文件上传，每个业务主键和类型可对应多个文件.
	 * @param xjFile 上传文件
	 * @param catalog 类型
	 * @param busId 业务主键
	 * @param session 
	 * @return
	 */
	@At
	@Ok("json")
	@AdaptBy(type = UploadAdaptor.class, args = { "${app.root}/WEB-INF/tmp" })
	public Object uploadMultiple(TempFile xjFile,String catalog,String busId,HttpSession session) {
		FwFileBo voteFile = this.upload(xjFile, catalog, busId, session);
		//6.回传数据
		Map<String,Object>  result= new HashMap<String,Object>();
		//数据对象
		result.put("file", voteFile);
		return result;
	}
	/**
	 * 根据文件主键下载文件.
	 * @param fileId 文件主键
	 * @param response
	 */
	@At
	public void fileDownById(String fileId, HttpServletResponse response) {
		FwFileBo voteFile = dao.fetch(FwFileBo.class, Cnd.where("fileId", "=",fileId));
		this.download(voteFile, response);
	}
	/**
	 * 框架方法，不能随意修改 .
	 * @param fileId 上级文件夹名称
	 * @return
	 */
	@At("/down/*")
	public void fileDown(String fileId, HttpServletResponse response) {
		FwFileBo voteFile = dao.fetch(FwFileBo.class, Cnd.where("fileId", "=",fileId));
		this.download(voteFile, response);
	}
	
	

	/**
	 * 根据文件主键获取文件.
	 * @param fileId 文件主键
	 */
	@At
	@Ok("json")
	public Object getFileById(String fileId) {
		FwFileBo voteFile = dao.fetch(FwFileBo.class, Cnd.where("fileId", "=",fileId));
		//6.回传数据
		Map<String,Object>  result= new HashMap<String,Object>();
		//数据对象
		result.put("file", voteFile);
		return result;
	}
	/**
	 * 根据文件的业务主键和类型下载文件.
	 * @param busId 业务主键
	 * @param catalog 类型
	 * @param response
	 */
	@At
	public void fileDownByBusId(String busId, String catalog,String fwInfoId, HttpServletRequest request,HttpServletResponse response) {
		FwFileBo voteFile = dao.fetch(FwFileBo.class, Cnd.where("fileBusId", "=",busId).and("fileBusType", "=",catalog));
		this.download(voteFile, response);
	}
	
	public void download(FwFileBo voteFile, HttpServletResponse response){
		try {
			File file = new File(PropertyUtils.getProperty("app.path")+voteFile.getFilePath()+voteFile.getFileId()+"."+voteFile.getFileSuffix());
			InputStream inStream = new FileInputStream(file);
			OutputStream outStream = response.getOutputStream(); 
			// 设置输出的格式
			response.reset();
			response.setContentType(genContentType(voteFile.getFileSuffix()));
			String fileName = new String(voteFile.getFileName().getBytes("GBK"), "ISO-8859-1");
			response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
			int tempbyte;
            while ((tempbyte = inStream.read()) != -1) {
            	outStream.write(tempbyte);
            	outStream.flush();
            }
            outStream.close();
            inStream.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	private FwFileBo upload(TempFile xjFile, String catalog, String busId, HttpSession session) {
		//获取上传的文件数据
		FieldMeta fieldMeta = xjFile.getMeta();
		File file = xjFile.getFile();
		//设置文件数据对象
		FwFileBo voteFile = new FwFileBo();
		String fileId = UUID.randomUUID().toString();
		voteFile.setFileId(fileId);
		voteFile.setFileName(fieldMeta.getFileLocalName());
		voteFile.setFileSuffix(fieldMeta.getFileExtension().substring(1));
		voteFile.setFilePath(this.getFilePath(session, catalog));
		voteFile.setFileBusId(busId);
		voteFile.setFileBusType(catalog);
		voteFile.setFileCreateTime(new Date());
		//保存文件
		File dirFile = new File(voteFile.getFilePath());
		if (!dirFile.exists()){
			dirFile.mkdirs();
		}

		File resultFile = new File(PropertyUtils.getProperty("app.path")+voteFile.getFilePath()+fileId+"."+voteFile.getFileSuffix());
		try {
			FileUtils.copyFile(file, resultFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
		//保存文件数据
		this.dao.insert(voteFile);
		return voteFile;
	}

	private String getFilePath(HttpSession session,String catalog){
		String path=PropertyUtils.getProperty("file.upload.path");
		if("09".equals(catalog)){
			path= path+File.separator;
		}
		return path;
	}
	

	
	/**
     * 根据后缀获取导出文件类型
     * @param suffix 后缀
     * @return
     */
    public String genContentType(String suffix){
        if(!Strings.isBlank(suffix)){
            suffix = suffix.toLowerCase();
        }
        if("xls".equals(suffix) || "xlsx".equals(suffix)){
            return "application/x-msdownload";
        }else if("doc".equals(suffix) || "docx".equals(suffix)){
            return "application/msword";
        }else if("jpeg".equals(suffix)){
            return "image/jpeg";
        }else if("jpg".equals(suffix)){
            return "image/jpg";
        }else if("gif".equals(suffix)){
            return "image/gif";
        }else if("pdf".equals(suffix)){
            return "application/pdf";
        }else if("txt".equals(suffix)){
            return "text/plain";
        }else if("pdf".equals(suffix)){
            return "application/pdf";
        }
        return "application/octet-stream";
    }
    
    /**
     * 删除文件
     * @param fileId
     */
    @At
	@Ok("json")
    public void delFile(String fileId){
    	FwFileBo voteFile = dao.fetch(FwFileBo.class, fileId);
    	if(voteFile != null){
    		File file = new File(PropertyUtils.getProperty("app.path")+voteFile.getFilePath()+voteFile.getFileId()+"."+voteFile.getFileSuffix());
    		file.delete();
    		dao.delete(voteFile);
    	}
    }
    
    /**
     * 文件管理页面.
     */
    @At
    @Ok("jsp:wddc.tiles.file.list")
    public  Object toFileList(){
        //获取所有标签
    	Map<String,Object>  result= new HashMap<String,Object>();
        Criteria cri = Cnd.cri();
        cri.getOrderBy().desc("fileCreateTime");
        List<FwFileBo> fileList = dao.query(FwFileBo.class, cri);
        
        result.put("fileList",fileList);
       
        return result;
    }

}
