<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
        "http://struts.apache.org/dtds/struts-2.5.dtd">
<!--struts.xml是struts2配置文件的根元素-->
<!--尽量不要让超级链接直接链接到某个视图资源上,因为这种方式增加了额外的风险.推荐将-->
<!--所有请求都发给Struts2框架,让该框架来处理请求-->
<struts>
    <!--&lt;!&ndash;配置的第一个包,该包名为default,继承struts.default&ndash;&gt;-->
    <!--<package name="default" extends="struts.default">-->
    <!--&lt;!&ndash;下面定义了拦截器部分&ndash;&gt;-->
    <!--<interceptors>-->
    <!--&lt;!&ndash;定义拦截器栈&ndash;&gt;-->
    <!--<interceptor-stack name="crudStack">-->
    <!--<interceptor-ref name="params"/>-->
    <!--<interceptor-ref name="defaultStack"/>-->
    <!--</interceptor-stack>-->
    <!--</interceptors>-->
    <!--<default-action-ref name="showcase"/>-->
    <!--&lt;!&ndash;定义一个Action,该Action直接映射到showcase.jsp里面&ndash;&gt;-->
    <!--<action name="Showcase">-->
    <!--<result>showcase.jsp</result>-->
    <!--</action>-->
    <!--&lt;!&ndash;定义了一个Action,该Action类为com.opensymphony.webwork.showcase.DateAction&ndash;&gt;-->
    <!--<action name="Date" class="lee.DateAction">-->
    <!--<result name="success">/date.jsp</result>-->
    <!--</action>-->

    <!--</package>-->
    <!--&lt;!&ndash;定义名为skill的包,该Action继承default的包&ndash;&gt;-->
    <!--<package name="skill" extends="default" namespace="/skill">-->
    <!--&lt;!&ndash;定义默认拦截器引用&ndash;&gt;-->
    <!--<default-interceptor-ref name="crudStack"/>-->
    <!--&lt;!&ndash;定义名为Edit的Action,该Action对应的处理类为lee.SkillAction&ndash;&gt;-->
    <!--<action name="Edit" class="lee.SkillAction">-->
    <!--<result>/empmanager/editSkill.jsp</result>-->
    <!--<interceptor-ref name="params"/>-->
    <!--<interceptor-ref name="basicStack"/>-->
    <!--</action>-->
    <!--&lt;!&ndash;定义名为Save的Action,该Action对应的处理类为lee.SkillAction,使用save方法作为处理方法&ndash;&gt;-->
    <!--<action name="Save" class="lee.SkillAction" method="save">-->
    <!--<result name="input">/empmanager/editSkill.jsp</result>-->
    <!--<result type="redirect">edit.action?skillName=${currentSkill.name}</result>-->
    <!--</action>-->
    <!--&lt;!&ndash;定义名为Delete的Action,该Action对应的处理类为lee.SkillAction&ndash;&gt;-->
    <!--<action name="Delete" class="lee.SkillAction" method="delete">-->
    <!--<result name="error">/empmanager/editSkill.jsp</result>-->
    <!--<result type="redirect">edit.action?skillName=${currentSkill.name}</result>-->
    <!--</action>-->
    <!--</package>-->
    <!--&lt;!&ndash;struts2的Action必须在指定的包空间下定义&ndash;&gt;-->
    <!--<package name="strutsqs" extends="struts-default">-->
    <!--&lt;!&ndash;定义login的Action,该Action的实现类为lee.Action类&ndash;&gt;-->
    <!--<action name="Login" class="lee.LoginAction">-->
    <!--<result name="input">/login.jsp</result>-->
    <!--&lt;!&ndash;定义处理结果和资源之间的关系&ndash;&gt;-->
    <!--<result name="error">/error.jsp</result>-->
    <!--<result name="success">/welcome.jsp</result>-->
    <!--</action>-->
    <!--&lt;!&ndash;定义获取系统中图书的Action,对应实现类为lee.GetBooksAction&ndash;&gt;-->
    <!--<action name="GetBooks" class="lee.GetBooksAction">-->
    <!--&lt;!&ndash;如果处理结果返回login,进入login.jsp页面&ndash;&gt;-->
    <!--&lt;!&ndash;type属性默认为jsp.也可以选用模板引擎&ndash;&gt;-->
    <!--<result name="login" type="jsp">/login.jsp</result>-->
    <!--&lt;!&ndash;如果处理结果返回success,进入showBook.jsp页面&ndash;&gt;-->
    <!--<result name="success">/showBooks.jsp</result>-->
    <!--</action>-->
    <!--</package>-->
    <!--<package name="get" extends="struts-default" namespace="/book">-->
    <!--&lt;!&ndash;配置一个名为GetBooks的Action&ndash;&gt;-->
    <!--<action name="GetBooks" class="lee.GetBooksAction">-->
    <!--<result name="login">/login.jsp</result>-->
    <!--<result name="success">/showBook.jsp</result>-->
    <!--</action>-->
    <!--&lt;!&ndash;<interceptors>&ndash;&gt;-->
    <!--&lt;!&ndash;&lt;!&ndash;定义权限检查的拦截器&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<interceptor name="authority" class="lee.AuthorityInterceptor"/>&ndash;&gt;-->
    <!--&lt;!&ndash;&lt;!&ndash;定义日志记录的拦截器&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<interceptor name="log" class="lee.xxxx"/>&ndash;&gt;-->
    <!--&lt;!&ndash;&lt;!&ndash;定义一个拦截器栈&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<interceptor-stack name="authorityandlog">&ndash;&gt;-->
    <!--&lt;!&ndash;&lt;!&ndash;定义该拦截器里包含authority拦截器&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<interceptor-ref name="authority"/>&ndash;&gt;-->
    <!--&lt;!&ndash;&lt;!&ndash;log拦截器&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<interceptor-ref name="log"/>&ndash;&gt;-->
    <!--&lt;!&ndash;</interceptor-stack>&ndash;&gt;-->
    <!--&lt;!&ndash;</interceptors>&ndash;&gt;-->
    <!--</package>-->
    <!--&lt;!&ndash;constant元素也可以进行配置:两个必填属性 name value&ndash;&gt;-->
    <!--<constant name="struts.custom.i18n.resources" value="messageResource"/>-->
    <package name="lee" extends="struts-default">
        <!--定义名为login的Action,其实现类为lee.LoginAction-->
        <!--<action name="login" class="lee.LoginAction">-->
        <!--<result name="input">/login.jsp</result>-->
        <!--<result name="error">/error.jsp</result>-->
        <!--<result name="success">/welcome.jsp</result>-->
        <!--</action>-->
        <!--配置名为Regist的Action,该Action采用默认的regist方法处理用户请求-->
        <!--指定method选定处理方法 其中参数可使用通配符,例如-->
        <!--*.Action都会被处理,默认处理方法是 *-->
        <!--神坑,要开启配置后指定允许的通配符-->
        <global-allowed-methods>regex:.*</global-allowed-methods>
        <action name="*Action" class="lee.LoginRegistAction" method="{1}">
            <result name="input">/login.jsp</result>
            <result name="error">/error.jsp</result>
            <result name="success">/welcome.jsp</result>
        </action>
        <!--定义一个通用action result中也可以使用通配符
        当规则有冲突时,先找到哪个action,就由哪个action执行-->
        <action name="*">
            <!--使用表达式定义Result-->
            <result>/{1}.jsp</result>
        </action>
        <!--<action name="Regist" class="lee.LoginRegistAction" method="regist">-->
        <!--<result name="input">/login.jsp</result>-->
        <!--<result name="error">/error.jsp</result>-->
        <!--<result name="success">/welcome.jsp</result>-->
        <!--</action>-->
        <!--最典型的result配置-->
        <!--<action name="Login" class="lee.LoginAction">-->
        <!--&lt;!&ndash;为success的逻辑视图配置Result,type属性指定结果类型&ndash;&gt;-->
        <!--<result name="success" type="dispatcher">-->
        <!--&lt;!&ndash;指定该逻辑视图的实际视图资源&ndash;&gt;-->
        <!--<param name="location">/thank_you.jsp</param>-->
        <!--</result>-->
        <!--</action>-->
        <result-types>
            <!--各种不同的结果类型-->
            <!--Action链-->
            <result-type name="chain" class="com.opensymphony.xwork2.ActionChainResult"/>
            <!--用于与jsp整合的结果类型-->
            <result-type name="dispatcher" class="org.apache.struts2.result.ServletDispatcherResult"/>

        </result-types>
    </package>

    <!--神坑,2.5之后先要开启配置-->
    <constant name="struts.enable.DynamicMethodInvocation" value="true"/>
</struts>




















