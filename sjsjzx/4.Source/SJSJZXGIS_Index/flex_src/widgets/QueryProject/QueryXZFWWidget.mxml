<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:viewer="com.esri.viewer.*"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   widgetConfigLoaded="init();"
				   xmlns:circle="com.wonders.circle.*"
				   xmlns:comp="com.esri.viewer.components.*"
				   xmlns:Query="widgets.Query.*">
	<fx:Script>
		<![CDATA[
			import adobe.utils.CustomActions;
			
			import com.adobe.utils.IntUtil;
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Multipoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.BufferParameters;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.serialization.json.JSON;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.UrlUtil;
			import com.esri.viewer.utils.UtilsClass;
			import com.wonders.circle.CustomDraw;
			import com.wonders.polygontopoint.PolygonToPointLayer;
			import com.esri.ags.geometry.Extent;
			
			import flash.net.URLRequest;
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.StringUtil;
			
			import widgets.InfoTemplates.InfoPopupWidget;
			import widgets.Query.FWSymbol;
			
			private var graphicPointSym:PictureMarkerSymbol;
			
			private const ICON_URL:String=UrlUtil.URL_DOMAIN + "assets/images/icons/";
			
			[Bindable]
			[Embed(source="assets/images/icons/i_redclear.png")]
			public var Clear:Class;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_query.png")]
			public var Search:Class;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_dk_information1.png")]
			public var Information:Class;
			[Bindable]
			[Embed(source="assets/images/icons/i_back.png")]
			public var Back:Class;
			[Bindable]
			private var msgVisible:Boolean=false;
			[Bindable]
			private var dk_gridVisible:Boolean=false;
			import widgets.Query.DKSymbol;
			[Bindable]
			private var dk_msgVisible:Boolean=false;
			private var areaUrl:String;
			private var areaFields:String;
			private var resultDKFields:Array;
			private var resultDKFieldsCN:Array;
			private var dkFieldsCNStr:String;
			private var areaTitlefield:String;
			private var areaLinkfield:String;
			//详细规划地块
			private var plotGraphicsLayer:GraphicsLayer;
			
			private var graphicsLayer:GraphicsLayer;
			
			private var ydfwExtentGraphicsLayer:GraphicsLayer;
			
			private var gcfwExtentGraphicsLayer:GraphicsLayer;
			
			private var xgfwExtentGraphicsLayer:GraphicsLayer;
			
			
			private var drawGraphicsLayer:GraphicsLayer;
			
			private var extentGraphicsLayer:PolygonToPointLayer;
			
			private var circleDraw:CustomDraw;
			
			[Bindable]
			private var gridVisible:Boolean=false;
			
			
			private var linkURL:String;
			
			private var extentUrl:String;
			private var extentGraphicalsearchlabel:String;
			private var extentFields:String;
			private var extentTitlefield:String;
			private var extentLinkfield:String;
			private var extentIcon:String;
			
			private var flag:String = "1";
			
			private var resultFWFields:Array;
			private var resultFWFieldsCN:Array;
			private var fwFieldsCNStr:String;
			
			private var yearURL:String;
			private var configYear:Array;
			private var lys:ArcGISDynamicMapServiceLayer;
			
			private var infoUrl:String;
			private var infoFieldsStr:String;
			private var infoFieldsCNStr:String;
			private var infoTable:String;
			private var infoFields:Array;
			private var infoFieldsCN:Array;
			
			private var infoOBJ:Object = new Object();
			private var xz_ids:String = "";
			private var drawGeom:Geometry;
			private var wTitle:String="";
			
			[Bindable]
			private var xzfw_xgMsgVisible:Boolean=false;
			
			[Bindable]
			private var xzfw_xgGridVisible:Boolean=false;
			
			[Bindable]
			private var xzfw_ydMsgVisible:Boolean=false;
			
			[Bindable]
			private var xzfw_ydGridVisible:Boolean=false;
			[Bindable]
			private var xzfw_gcMsgVisible:Boolean=false;
			
			[Bindable]
			private var xzfw_gcGridVisible:Boolean=false;
			
			private var ydfwExtentUrl:String="";
			private var ydfwExtentFields:String="";
			private var ydfwExtentTitlefield:String="";
			private var ydfwExtentLinkfield:String;
			private var ydfwResultFWFields:Array;
			private var ydfwResultFWFieldsCN:Array;
			private var ydfwFieldsCNStr:String;
			private var ydfwFieldsStr:String;
			
			private var ydfwInfoUrl:String;
			private var ydfwInfoFieldsStr:String;
			private var ydfwInfoFieldsCNStr:String;
			private var ydfwInfoTable:String;
			private var ydfwInfoFields:Array;
			private var ydfwInfoFieldsCN:Array;
			private var ydfwLinkURL:String;
			
			private var gcfwExtentUrl:String="";
			private var gcfwExtentFields:String="";
			private var gcfwExtentTitlefield:String="";
			private var gcfwExtentLinkfield:String;
			private var gcfwResultFWFields:Array;
			private var gcfwResultFWFieldsCN:Array;
			private var gcfwFieldsCNStr:String;
			private var gcfwFieldsStr:String;
			
			private var gcfwInfoUrl:String;
			private var gcfwInfoFieldsStr:String;
			private var gcfwInfoFieldsCNStr:String;
			private var gcfwInfoTable:String;
			private var gcfwInfoFields:Array;
			private var gcfwInfoFieldsCN:Array;
			private var gcfwLinkURL:String;
			
			
			private var xgfwExtentUrl:String="";
			private var xgfwExtentFields:String="";
			private var xgfwExtentTitlefield:String="";
			private var xgfwExtentLinkfield:String;
			private var xgfwResultFWFields:Array;
			private var xgfwResultFWFieldsCN:Array;
			private var xgfwFieldsCNStr:String;
			private var xgfwFieldsStr:String;
			private var xgfwLinkURL:String;
			private var planxNum:String = "";
			private var xzfwCountUrl="";
			private var xzfwCountTable="";
			private var xzfwColcum="";
			//查询范围id
			private var queryRange:Number;
			
			private function init():void
			{
				configYear = new Array;
				graphicsLayer=new GraphicsLayer;
				drawGraphicsLayer=new GraphicsLayer;
				extentGraphicsLayer=new PolygonToPointLayer(map);
				plotGraphicsLayer=new GraphicsLayer;
				plotGraphicsLayer.addEventListener(MouseEvent.CLICK,plotMouseClickGraphic);
				extentGraphicsLayer.addEventListener(MouseEvent.CLICK,mouseClickGraphic);
				
				ydfwExtentGraphicsLayer=new PolygonToPointLayer(map);
				ydfwExtentGraphicsLayer.addEventListener(MouseEvent.CLICK,ydfwMouseClickGraphic);
				gcfwExtentGraphicsLayer=new PolygonToPointLayer(map);
				gcfwExtentGraphicsLayer.addEventListener(MouseEvent.CLICK,gcfwMouseClickGraphic);
				xgfwExtentGraphicsLayer=new PolygonToPointLayer(map);
				xgfwExtentGraphicsLayer.addEventListener(MouseEvent.CLICK,xgfwMouseClickGraphic);
				map.addLayer(drawGraphicsLayer);
				map.addLayer(graphicsLayer);
				map.addLayer(xgfwExtentGraphicsLayer);
				map.addLayer(plotGraphicsLayer);
				map.addLayer(extentGraphicsLayer);
				map.addLayer(ydfwExtentGraphicsLayer);
				map.addLayer(gcfwExtentGraphicsLayer);
				glowLayer.addEventListener(MouseEvent.CLICK,mouseClickGraphic);
				map.addLayer(glowLayer);
				setMapNavigation(NavigationTool.PAN, "漫游");
				//lys =map.layers[3] as ArcGISDynamicMapServiceLayer;
				lys = map.getLayer("专业图层") as ArcGISDynamicMapServiceLayer;
				map.reorderLayer(lys.id,map.layerIds.length as int);
				if (configXML)
				{
					queryRange = configXML.queyRange;
					
					extentUrl = configData.gisdata_UrlROOT + configXML.layers.extentLayer.url;
					extentGraphicalsearchlabel=configXML.layers.extentLayer.graphicalsearchlabel;
					extentFields=configXML.layers.extentLayer.fields;
					extentTitlefield=configXML.layers.extentLayer.titlefield;
					extentLinkfield=configXML.layers.extentLayer.linkfield;
					extentIcon=ICON_URL + configXML.layers.extentLayer.icon;
					resultFWFields = extentFields.split(",");
					fwFieldsCNStr = configXML.layers.extentLayer.fieldsCN;
					resultFWFieldsCN = fwFieldsCNStr.split(",");
					
					areaUrl = configData.gisdata_UrlROOT + configXML.layers.areaLayer.url;
					areaFields=configXML.layers.areaLayer.fields;
					dkFieldsCNStr = configXML.layers.areaLayer.fieldsCN;
					resultDKFields = areaFields.split(",");
					resultDKFieldsCN = dkFieldsCNStr.split(",");
					areaTitlefield=configXML.layers.areaLayer.titlefield;
					areaLinkfield=configXML.layers.areaLayer.linkfield;
					
					infoUrl = configXML.infodata.url.toString();
					infoFieldsStr = configXML.infodata.fields.toString();
					infoFieldsCNStr = configXML.infodata.fieldsCN.toString();
					infoTable = configXML.infodata.table.toString();
					infoFields = infoFieldsStr.split(",");
					infoFieldsCN = infoFieldsCNStr.split(",");
					
					linkURL =configData.project_UrlROOT+configXML.linkURL;
					graphicallb.text = extentGraphicalsearchlabel;
					
					
					ydfwExtentUrl= configData.gisdata_UrlROOT + configXML.xzfw_yd.extentLayer.url;
					ydfwExtentFields=configXML.xzfw_yd.extentLayer.fields;
					ydfwExtentTitlefield=configXML.xzfw_yd.extentLayer.titlefield;
					ydfwExtentLinkfield=configXML.xzfw_yd.extentLayer.linkfield;
					ydfwFieldsStr=configXML.xzfw_yd.extentLayer.fields;
					ydfwFieldsCNStr = configXML.xzfw_yd.extentLayer.fieldsCN;
					ydfwResultFWFieldsCN = ydfwFieldsCNStr.split(",");
					ydfwResultFWFields =  ydfwFieldsStr.split(",");
					ydfwInfoUrl = configXML.xzfw_yd.infodata.url.toString();
					
					xzfwCountUrl=configXML.xzfw_count.url.toString();
					xzfwCountTable=configXML.xzfw_count.table.toString();
					xzfwColcum = configXML.xzfw_count.column.toString();
					
					ydfwInfoFieldsStr = configXML.xzfw_yd.infodata.fields.toString();
					ydfwInfoFieldsCNStr = configXML.xzfw_yd.infodata.fieldsCN.toString();
					ydfwInfoTable = configXML.xzfw_yd.infodata.table.toString();
					ydfwInfoFields = ydfwInfoFieldsStr.split(",");
					ydfwInfoFieldsCN = ydfwInfoFieldsCNStr.split(",");
					ydfwLinkURL =configData.project_UrlROOT+configXML.xzfw_yd.linkURL;
					
					
					gcfwExtentUrl= configData.gisdata_UrlROOT + configXML.xzfw_gc.extentLayer.url;
					gcfwExtentFields=configXML.xzfw_gc.extentLayer.fields;
					gcfwExtentTitlefield=configXML.xzfw_gc.extentLayer.titlefield;
					gcfwExtentLinkfield=configXML.xzfw_gc.extentLayer.linkfield;
					gcfwFieldsStr=configXML.xzfw_gc.extentLayer.fields;
					gcfwFieldsCNStr = configXML.xzfw_gc.extentLayer.fieldsCN;
					gcfwResultFWFieldsCN = gcfwFieldsCNStr.split(",");
					gcfwResultFWFields =  gcfwFieldsStr.split(",");
					gcfwInfoUrl = configXML.xzfw_gc.infodata.url.toString();
					gcfwInfoFieldsStr = configXML.xzfw_gc.infodata.fields.toString();
					gcfwInfoFieldsCNStr = configXML.xzfw_gc.infodata.fieldsCN.toString();
					gcfwInfoTable = configXML.xzfw_gc.infodata.table.toString();
					gcfwInfoFields = gcfwInfoFieldsStr.split(",");
					gcfwInfoFieldsCN = gcfwInfoFieldsCNStr.split(",");
					gcfwLinkURL =configData.project_UrlROOT+configXML.xzfw_gc.linkURL;
					
					
					xgfwExtentUrl= configData.gisdata_UrlROOT + configXML.xzfw_xg.extentLayer.url;
					xgfwExtentFields=configXML.xzfw_xg.extentLayer.fields;
					xgfwExtentTitlefield=configXML.xzfw_xg.extentLayer.titlefield;
					xgfwExtentLinkfield=configXML.xzfw_xg.extentLayer.linkfield;
					xgfwFieldsStr=configXML.xzfw_xg.extentLayer.fields;
					xgfwFieldsCNStr = configXML.xzfw_xg.extentLayer.fieldsCN;
					xgfwResultFWFieldsCN = xgfwFieldsCNStr.split(",");
					xgfwResultFWFields =  xgfwFieldsStr.split(",");
					xgfwLinkURL =configData.project_UrlROOT+configXML.xzfw_xg.linkURL;
					
					//动态初始化年份
					var now:Date=new Date();
					var yearValue:Number = now.fullYear;
					var dateyear:Object;
					for (var j:Number=1993; j <=yearValue; j++)
					{
						var yearvalue:String=j.toString();
						dateyear={label:yearvalue}
						configYear.push(dateyear);
					}
					configYear.push("------年份------");
					YearLocate.dataProvider=configYear.reverse();
					
				}
				wTemplate.addTitlebarButton(ICON_URL + "i_atquery.png", "选址信息属性查询", showStateCoordinates);
				//wTemplate.addTitlebarButton(ICON_URL + "i_spquery.png", "选址信息空间查询", showStateAddress);
				wTemplate.addTitlebarButton(ICON_URL +"i_table.png", "选址信息查询结果", showStateResults);
				
				ViewerContainer.addEventListener(AppEvent.GHDataGridClick,infomationHandler);
				FWSymbol.getInstance();
				DKSymbol.getInstance();
				
				//在查询之前先查看要查询的范围
				lysShow();
				
				//初始圆选工具
				circleTool.map=map;
				circleTool.graphicsLayer=drawGraphicsLayer;
				circleTool.displayRadius=false;
				circleTool.displayCenter=true;
				
				
				if(configData.preloadWidget.search("Da")!=-1&&configData.preSearchStr&&configData.preSearchStr!="")
				{
					xz_ids = "";
					infoOBJ = new Object();
					CursorManager.setBusyCursor();
					this.showInfoWindow(null);
					graphicsLayer.clear();
					extentGraphicsLayer.clear();
					gridVisible=false;
					queryDataGrid.dataProvider=null;
					queryXZDKDataGrid.dataProvider=null;
					showMessage("正在查询...",true,true);
					showStateResults();
					setMapNavigation(NavigationTool.PAN, "漫游");
					if (infoUrl)
					{
						var whereStr:String = "where 1=1";
						var httpservice:HTTPService=new HTTPService();
						httpservice.url=infoUrl;
						httpservice.resultFormat="text";
						var obj:Object=new Object();
						
						httpservice.addEventListener(ResultEvent.RESULT, info_onResult);
						httpservice.addEventListener(FaultEvent.FAULT, info_onFault);
						obj.table=infoTable;
						obj.fields=infoFieldsStr;
						whereStr += " and PASS_NO like '%" + decodeURI(configData.preSearchStr) + "%'";
						obj.where = whereStr;
						httpservice.send(obj);
						function info_onResult(event:ResultEvent):void
						{
							infoOBJ = JSON.decode(event.result.toString());
							for each(var obj:Object in infoOBJ.datas)
							{
								xz_ids += "'" + obj.ID + "',";
							}
							if(xz_ids != ""){
								queryGeomByIds(xz_ids.substring(0,xz_ids.length-1));
							}else{
								showMessage("没有查询到相关信息", false,true);
								CursorManager.removeBusyCursor();
							}
						}	
						function info_onFault(event:FaultEvent):void
						{
							showMessage("没有查询到相关信息", false,true);
							CursorManager.removeBusyCursor();
						}
					}
					else
					{
						showMessage("信息查询地址出错", false,true);
						CursorManager.removeBusyCursor();
					}
					
				}
			}
			private function lysShow(){
				
				var leftmin  = configData.extentdata_LEFTMIN ;
				var leftmax  = configData.extentdata_LEFTMAX ;
				var rightmin = configData.extentdata_RIGHTMIN ;
				var rightmax = configData.extentdata_RIGHTMAX ;				
				var extent:Extent = new Extent(leftmin , rightmin , leftmax , rightmax);
				map.extent = extent;
				var visibleLayerAC:ArrayCollection=new ArrayCollection;
				visibleLayerAC.addItem(queryRange);
				lys.visibleLayers = visibleLayerAC;
				lys.visible = true;
				lys.alpha = 0.7;
				
			}
			private function infomationHandler(event:AppEvent):void
			{
				if(event.data=="xzfw_mx")
				{
					clickHandle();
				}else if(event.data=="xzfw_yd"){
					showXZFW_YDResults();
					map.infoWindow.hide();
					showYDFWMessage("正在查询...",true,true);
					xzfw_ydGridVisible=false;
					var geometryArrCol:ArrayCollection=queryDataGrid.selectedItem.projectArrCol;
					if(geometryArrCol&&geometryArrCol.length>0){
						var polygon:Polygon;
						var rings:Array=new Array();
						for(var i:int=0;i<geometryArrCol.length;i++){
							polygon=geometryArrCol[i].polygon||geometryArrCol[i].graphic.geometry;
							for(var j:int=0;j<polygon.rings.length;j++){
								rings.push(polygon.rings[j]);
							}
						}
						polygon=new Polygon(rings);
						ydfwQuery(polygon);
					} 
				}else if(event.data=="xzfw_gc"){
					showXZFW_GCResults();
					map.infoWindow.hide();
					showGCFWMessage("正在查询...",true,true);
					xzfw_gcGridVisible=false;
					var geometryArrCol:ArrayCollection=queryDataGrid.selectedItem.projectArrCol;
					if(geometryArrCol&&geometryArrCol.length>0){
						var polygon:Polygon;
						var rings:Array=new Array();
						for(var i:int=0;i<geometryArrCol.length;i++){
							polygon=geometryArrCol[i].polygon||geometryArrCol[i].graphic.geometry;
							for(var j:int=0;j<polygon.rings.length;j++){
								rings.push(polygon.rings[j]);
							}
						}
						polygon=new Polygon(rings);
						gcfwQuery(polygon);
					}
				}else if(event.data=="xzfw_xg"){
					//点击详规，同时显示地块----sh----20141022
					showXZFW_XGResults();
					map.infoWindow.hide();
					showXGFWMessage("正在查询...",true,true);
					xzfw_xgGridVisible=false;
					var geometryArrCol:ArrayCollection=queryDataGrid.selectedItem.projectArrCol;
					if(geometryArrCol&&geometryArrCol.length>0){
						var polygon:Polygon;
						var rings:Array=new Array();
						for(var i:int=0;i<geometryArrCol.length;i++){
							polygon=geometryArrCol[i].polygon||geometryArrCol[i].graphic.geometry;
							for(var j:int=0;j<polygon.rings.length;j++){
								rings.push(polygon.rings[j]);
							}
						}
						polygon=new Polygon(rings);
						xgfwQuery(polygon);
					}
				}else if(event.data=="xzfw_ydmx"){
					ydfwClickHandle();
				}else if(event.data=="xzfw_gcmx"){
					gcfwClickHandle();
				}else if(event.data=="xzfw_xgmx"){
					xgfwClickHandle();
				}else if(event.data=="info_dk")
				{
					//增加地块查询
					this.showInfoWindow(null);
					clickDKHandle();
				}
			}
			private function showYDFWMessage(msg:String,swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				xzfw_ydTxtMessage.text=msg;
				xzfw_ydSwfMessage.visible=swfVisible;
				xzfw_ydMsgVisible=boxMessageVisible;
			}
			private function showGCFWMessage(msg:String,swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				xzfw_gcTxtMessage.text=msg;
				xzfw_gcSwfMessage.visible=swfVisible;
				xzfw_gcMsgVisible=boxMessageVisible;
			}
			private function showXGFWMessage(msg:String,swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				xzfw_xgTxtMessage.text=msg;
				xzfw_xgSwfMessage.visible=swfVisible;
				xzfw_xgMsgVisible=boxMessageVisible;
			}
			/**
			 * 重叠选址查询
			 * */
			private function ydfwQuery(geometry:Geometry):void
			{
				
				var queryTask:QueryTask=new QueryTask(ydfwExtentUrl);
				var query:Query=new Query();
				query.where="1=1";
				query.outFields=ydfwExtentFields.split(",");
				query.returnGeometry=true;
				query.geometry=geometry;
				queryTask.showBusyCursor=true;
				try
				{
					queryTask.execute(query, new AsyncResponder(ydfwResult, ydfwFault));
				}
				catch (error:Error)
				{
					Alert.show(error.toString());
				}
			}
			/**
			 * 重叠用地查询
			 * */
			private function gcfwQuery(geometry:Geometry):void
			{
				
				var queryTask:QueryTask=new QueryTask(gcfwExtentUrl);
				var query:Query=new Query();
				query.where="1=1";
				query.outFields=gcfwExtentFields.split(",");
				query.returnGeometry=true;
				query.geometry=geometry;
				queryTask.showBusyCursor=true;
				try
				{
					queryTask.execute(query, new AsyncResponder(gcfwResult, gcfwFault));
				}
				catch (error:Error)
				{
					Alert.show(error.toString());
				}
			}
			/**
			 * 重叠详规查询
			 * */
			public  function xgfwQuery(polygon:Polygon):void
			{
				var queryTask:QueryTask=new QueryTask(xgfwExtentUrl);
				var query:Query=new Query();
				query.where="1=1";
				query.outFields=xgfwExtentFields.split(",");;
				query.geometry=polygon as Geometry; 
				query.returnGeometry=true;
				queryTask.execute(query,new AsyncResponder(xgfwResult,xgfwFault));
			}
			private function ydfwMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				if(graphic==null){
					graphic=event.target.parent  as Graphic;
				}
				if(graphic!=null){
					if(graphic.geometry is Polygon){
						glowLayer.clear();
						var gra:Graphic=new Graphic(graphic.geometry,FWSymbol.ydSelectedGraphicSymbol,graphic.attributes);
						glowLayer.add(gra);
					}
					var infoData:Object=graphic.attributes;
					infoData.label="查看用地信息";
					this.showInfoWindow(infoData);
				}
			}
			private function gcfwMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				if(graphic==null){
					graphic=event.target.parent  as Graphic;
				}
				if(graphic!=null){
					if(graphic.geometry is Polygon){
						glowLayer.clear();
						var gra:Graphic=new Graphic(graphic.geometry,FWSymbol.xzSelectedGraphicSymbol,graphic.attributes);
						glowLayer.add(gra);
					}
					var infoData:Object=graphic.attributes;
					infoData.label="查看工程信息";
					this.showInfoWindow(infoData);
				}
			}
			private function xgfwMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				var infoData:Object=graphic.attributes;
				infoData.label = "查看详规信息";
				this.showInfoWindow(infoData);
			}
			private function queryWidgetClosed():void
			{
				graphicsLayer.visible=false;
				drawGraphicsLayer.visible=false;
				extentGraphicsLayer.visible=false;
				glowLayer.visible=false;
				gcfwExtentGraphicsLayer.visible=false;
				xgfwExtentGraphicsLayer.visible=false;
				ydfwExtentGraphicsLayer.visible=false;
				plotGraphicsLayer.visible=false;
				lys.visible = false;
				lys.defaultVisibleLayers();
				setMapNavigation(NavigationTool.PAN, "漫游");
				this.showInfoWindow(null);
			}
			
			private function queryWidgetOpened():void
			{
				if(flag == "3"&&extentGraphicsLayer)
				{
					glowLayer.visible=true;
					extentGraphicsLayer.visible=true;
					graphicsLayer.visible=true;
					drawGraphicsLayer.visible=true;
					gcfwExtentGraphicsLayer.visible=true;
					xgfwExtentGraphicsLayer.visible=true;
					ydfwExtentGraphicsLayer.visible=true;
				}
				else if(extentGraphicsLayer)
				{
					glowLayer.visible=false;
					graphicsLayer.visible=true;
					drawGraphicsLayer.visible=true;
					extentGraphicsLayer.visible=true;
					gcfwExtentGraphicsLayer.visible=true;
					xgfwExtentGraphicsLayer.visible=true;
					ydfwExtentGraphicsLayer.visible=true;
					plotGraphicsLayer.visible=true;
				}
				if(wTitle!="")
				{
					wTemplate.widgetTitle=wTitle;
				}
				if(lys){
					lysShow();
				}
				
				setMapNavigation(NavigationTool.PAN, "漫游");
			}
			
			
			private function showStateAddress():void
			{
				flag = "2";
				viewStack.selectedIndex=1;
				gcfwExtentGraphicsLayer.visible=false;
				xgfwExtentGraphicsLayer.visible=false;
				ydfwExtentGraphicsLayer.visible=false;
				wTemplate.selectedTitlebarButtonIndex=1;
				wTemplate.widgetTitle="选址信息空间查询";
			}
			
			private function showStateCoordinates():void
			{
				flag = "1";
				viewStack.selectedIndex=0;
				gcfwExtentGraphicsLayer.visible=false;
				xgfwExtentGraphicsLayer.visible=false;
				ydfwExtentGraphicsLayer.visible=false;
				wTemplate.selectedTitlebarButtonIndex=0;
				wTemplate.widgetTitle="选址信息属性查询";
			}
			
			private function showStateResults():void
			{
				glowLayer.clear();
				extentGraphicsLayer.visible=true;
				glowLayer.visible=true;
				graphicsLayer.visible=false;
				gcfwExtentGraphicsLayer.visible=false;
				xgfwExtentGraphicsLayer.visible=false;
				ydfwExtentGraphicsLayer.visible=false;
				plotGraphicsLayer.visible=false;
				flag = "3";
				viewStack.selectedIndex=2;
				wTemplate.selectedTitlebarButtonIndex=2;
				wTemplate.widgetTitle="选址信息查询结果";
				map.infoWindow.hide();
			}
			public function ydfwClickHandle():void
			{
				navigateToURL(new URLRequest(xzfw_gcDataGrid.selectedItem.link+"&account="+configData.userId));
			}
			public function xgfwClickHandle():void
			{
				navigateToURL(new URLRequest(xzfw_xgDataGrid.selectedItem.link+"&account="+configData.userId));
			}
			public function gcfwClickHandle():void
			{
				navigateToURL(new URLRequest(xzfw_gcDataGrid.selectedItem.link+"&account="+configData.userId));
			}
			//添加地块查询内容----sh---20141022
			public function clickDKHandle():void{
				var selectInfo:Object = xzfw_xgDataGrid.dataProvider[xzfw_xgDataGrid.selectedIndex];
				showLayer(selectInfo.plan_num);
				var plan_num:String = xzfw_xgDataGrid.selectedItem.plan_num;
				//记录地块编号- 沪府规（2014）0124号
				planxNum = selectInfo.plan_num;
				dk_gridVisible=false;
				queryDK(plan_num,selectInfo);
			}
			
			private function queryDK(plan_num:String,selectInfo:Object):void
			{
				CursorManager.setBusyCursor();
				this.showInfoWindow(null);
				graphicsLayer.clear();
				plotGraphicsLayer.clear();
				//customGraphicsLayer.visible=false;
				queryXZDKDataGrid.dataProvider=null;
				showDKMessage("正在查询...",true,true);
				showDKResults();
				var ghGra:Graphic = new Graphic(selectInfo.graphic.geometry,FWSymbol.xgDKExtentLineSymbos,selectInfo);
				graphicsLayer.add(ghGra);
				UtilsClass.zoomToGraphics(map,graphicsLayer);
				setMapNavigation(NavigationTool.PAN, "漫游");
				if (areaUrl)
				{
					var queryTask:QueryTask=new QueryTask(areaUrl);
					var query:Query=new Query();
					var expr:String = "PLAN_NUM = '" + plan_num + "'";
					query.where=expr;
					query.outFields=areaFields.split(",");
					query.returnGeometry=true;
					queryTask.showBusyCursor=true;
					queryTask.execute(query, new AsyncResponder(ontextDKResult, ontextDKFault));
				}
				else
				{
					showDKMessage("地块图层不存在", false,true);
				}
			}
			
			private function ontextDKFault(info:Object, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				showDKMessage(info.toString(), false,true);
				showDKResults();
			}
			
			private function ontextDKResult(featureSet:FeatureSet, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				this.showInfoWindow(null);
				glowLayer.clear();
				if (featureSet.features.length > 0)
				{					
					try
					{						
						var recAC:ArrayCollection=createDKRecordData(featureSet);
						queryXZDKDataGrid.dataProvider=UtilsClass.sortArrayCollection("title",recAC);
						showDKMessage("", false,false);
						dk_gridVisible=true;
					}
					catch (error:Error)
					{
						
					}
				}
				else
				{
					showDKMessage("暂无符合条件的记录!", false,true);
				}
			}
			
			private function createDKRecordData(featureSet:FeatureSet):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				for each (var gra:Graphic in featureSet.features)
				{
					var code:String="MR";
					if(gra.attributes.CUS_TYPE)
					{
						code=gra.attributes.CUS_TYPE.toString();
					}
					else
					{
						gra.attributes.CUS_TYPE="";
						code="MR";
					}
					var symObj:Object=DKSymbol.findSymbolByCode(code);
					gra.symbol=symObj.symbol as SimpleFillSymbol;
					//数据构造部分
					var obj:Object=gra.attributes;
					var fld:String;
					var value:String;
					var title:String;
					var content:String="";
					var link:String="";
					var point:MapPoint=getGeomCenter(gra);
					var fldAliases:Object=featureSet.fieldAliases;
					var cus_type:String;
					var plot_name:String;
					var temp:String;
					for (fld in obj)
					{
						value=obj[fld]||"";
						if (fld.toUpperCase() == areaTitlefield.toUpperCase()){
							title=value;
							if (!title)
								title=widgetTitle;
						}
						if (fld.toUpperCase() == areaLinkfield.toUpperCase())
						{
							link=linkURL+value;
						}
						if (fld.toUpperCase() == "CUS_TYPE")
						{
							cus_type=value||"";
						}
						if (fld.toUpperCase() == "PLOT_NAME")
						{
							plot_name=value;
						}
					}
					for(var i:int = 0;i < resultDKFieldsCN.length;i++ ){
						temp = resultDKFields[i].toString();
						if("DKAREA" == temp){
							var areaNum:Number=Number(obj[temp]);
							obj[temp]=areaNum.toFixed(2);
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp] + " 公顷;";
						}else if("BLDG_DENS" == temp || "VEG_RATIO" == temp){
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp] + "%;";
						}else if("BLDG_HLMT" == temp){
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp] + " 米;";
						}else if("ENTRANCE"==temp){
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp];
						}else{
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp] + ";";	
						}
						
					}
					
					var infoData:Object={icon: icon,cus_type:cus_type,plot_name:plot_name, title: title, content: content, link: link, point: point,graphic:gra};
					gra.attributes=infoData;
					plotGraphicsLayer.add(gra);
					recAC.addItem(infoData);
				}
				return recAC;
			}
			
			private function showDKMessage(msg:String, swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				dk_txtMessage.text=msg;
				dk_swfMessage.visible=swfVisible;
				dk_msgVisible=boxMessageVisible;
				dkbackBtn.visible=!dk_swfMessage.visible;
			}
			
			private function showLayer(plan_num:String):void
			{
				lys.visibleLayers = new ArrayCollection([0,2]);
				var str:String = "PLAN_NUM='" + plan_num + "'";
				lys.layerDefinitions = [str,"",str,"","","","","","","","",""];
				lys.visible = true;
				lys.refresh();
			}
			
			private function queryXZDKDataGrid_dataDKGridClick(event:ListEvent):void
			{
				lys = map.getLayer("专业图层") as ArcGISDynamicMapServiceLayer;
				//将lys图层放到map图层的最上面显示
				map.reorderLayer(lys.id,map.layerIds.length as int);
				showLayer(planxNum);
				var infoData:Object=queryXZDKDataGrid.dataProvider[event.rowIndex];
				infoData.label = "查看详规地块信息";
				var pt:MapPoint=infoData.point;
				map.centerAt(pt);
				this.showInfoWindow(infoData);
			}
			
			private function plotMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				var infoData:Object=graphic.attributes;
				infoData.label = "查看详规地块信息";
				this.showInfoWindow(infoData);
			}
			
			private function showDKResults():void
			{
				//lys.visible = true;
				//textGraphicsLayer.visible=false;
				//jsydlayer.visible=false;
				//jsxzlayer.visible=false;
				//jsgclayer.visible=false;
				//cdxglayer.visible=false;
				//bgxglayer.visible=false;
				extentGraphicsLayer.visible=true;
				plotGraphicsLayer.visible=true;
				graphicsLayer.visible=true;
				viewStack.selectedIndex=6;
				wTemplate.selectedTitlebarButtonIndex=6;
				wTemplate.widgetTitle="详规地块查询结果";
				this.showInfoWindow(null);
			}
			//地块返回按钮触发事件
			protected function backDKBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				showDKStateResults();
			}
			
			private function showDKStateResults():void
			{
				glowLayer.clear();
				lys.visible = false;
				extentGraphicsLayer.visible=true;
				plotGraphicsLayer.visible=false;
				graphicsLayer.visible=false;
				this.showInfoWindow(null);
				
				//点击详规，同时显示地块----sh----20141022
				showXZFW_XGResults();
				map.infoWindow.hide();
				showXGFWMessage("正在查询...",true,true);
				xzfw_xgGridVisible=false;
				var geometryArrCol:ArrayCollection=queryDataGrid.selectedItem.projectArrCol;
				if(geometryArrCol&&geometryArrCol.length>0){
					var polygon:Polygon;
					var rings:Array=new Array();
					for(var i:int=0;i<geometryArrCol.length;i++){
						polygon=geometryArrCol[i].polygon||geometryArrCol[i].graphic.geometry;
						for(var j:int=0;j<polygon.rings.length;j++){
							rings.push(polygon.rings[j]);
						}
					}
					polygon=new Polygon(rings);
					xgfwQuery(polygon);
				}
			}
			//---------end 地块--------
			
			private function showXZFW_YDResults():void
			{
				ydfwExtentGraphicsLayer.visible=true;
				gcfwExtentGraphicsLayer.visible=false;
				xgfwExtentGraphicsLayer.visible=false;
				graphicsLayer.visible=false;
				glowLayer.clear();
				glowLayer.visible=true;
				viewStack.selectedIndex=3;
				wTemplate.widgetTitle="选址信息查询结果";
			}
			private function showXZFW_GCResults():void
			{
				gcfwExtentGraphicsLayer.visible=true;
				xgfwExtentGraphicsLayer.visible=false;
				ydfwExtentGraphicsLayer.visible=false;
				graphicsLayer.visible=false;
				glowLayer.clear();
				glowLayer.visible=true;
				viewStack.selectedIndex=4;
				wTemplate.widgetTitle="工程信息查询结果";
			}
			private function showXZFW_XGResults():void
			{
				xgfwExtentGraphicsLayer.visible=true;
				ydfwExtentGraphicsLayer.visible=false;
				gcfwExtentGraphicsLayer.visible=false;
				graphicsLayer.visible=false;
				glowLayer.clear();
				glowLayer.visible=true;
				viewStack.selectedIndex=5;
				wTemplate.widgetTitle="详规信息查询结果";
			}
			private function xgfwResult(featureSet:FeatureSet,token:Object=null):void
			{
				var resultArrCol:ArrayCollection=new ArrayCollection;
				glowLayer.clear();
				this.showInfoWindow(null);
				resultArrCol=createXGFWRecordData(featureSet);
				if(resultArrCol&&resultArrCol.length>0)
				{
					xzfw_xgDataGridItem.headerText="详细规划信息(合计"+resultArrCol.length.toString()+"条)";
					xzfw_xgDataGrid.dataProvider=UtilsClass.sortArrayCollection("START_DATE",resultArrCol);
					UtilsClass.zoomToGraphics(map,xgfwExtentGraphicsLayer);
					xzfw_xgGridVisible=true;
					showXGFWMessage("", false,false);
				}
				else
				{
					showXGFWMessage("暂无符合条件的记录!", false,true);
				}
			}
			private function xgfwFault(info:Object,token:Object=null):void{
				
				Alert.show("查询重叠规划范围时QueryTask出错！");
			}
			private function ydfwResult(featureSet:FeatureSet, token:Object=null):void{
				
				map.infoWindow.hide();
				if (featureSet.features.length > 0)
				{
					try
					{
						queryYDFWInfoData(featureSet);
					}
					catch (error:Error)
					{
						showYDFWMessage(error.message,false,true);
					}
				}
				else
				{
					showYDFWMessage("暂无符合条件的记录!", false,true);
				}
			}
			private function gcfwResult(featureSet:FeatureSet, token:Object=null):void{
				
				map.infoWindow.hide();
				if (featureSet.features.length > 0)
				{
					try
					{
						queryGCFWInfoData(featureSet);
					}
					catch (error:Error)
					{
						showGCFWMessage(error.message,false,true);
					}
				}
				else
				{
					showGCFWMessage("暂无符合条件的记录!", false,true);
				}
			}
			private function ydfwFault(info:Object, token:Object=null):void{
				map.infoWindow.hide();
				showYDFWMessage("暂无符合条件的记录!", false,true);
			}
			private function gcfwFault(info:Object, token:Object=null):void{
				map.infoWindow.hide();
				showGCFWMessage("暂无符合条件的记录!", false,true);
			}
			
			private function queryYDFWInfoData(featureSet:FeatureSet):void
			{
				var yd_ids:String="";
				//infoOBJ存储属性信息
				if(featureSet.features.length>0){
					
					for each (var gra:Graphic in featureSet.features)
					{
						var content:String="";
						var obj:Object=gra.attributes;
						var yd_id:String = obj.YD_ID;
						yd_ids += "'" + yd_id + "',";
					}
					if(yd_ids!=""){
						yd_ids=yd_ids.substr(0,yd_ids.length-1);
					}
					var whereStr:String = "where ID in ( "+yd_ids+" )";
					var httpservice:HTTPService=new HTTPService();
					httpservice.url=ydfwInfoUrl;
					httpservice.resultFormat="text";
					var obj:Object=new Object();
					
					httpservice.addEventListener(ResultEvent.RESULT, info_onResult);
					httpservice.addEventListener(FaultEvent.FAULT, info_onFault);
					obj.table=ydfwInfoTable;
					obj.fields=ydfwInfoFieldsStr;
					obj.where = whereStr;
					httpservice.send(obj);
					function info_onResult(event:ResultEvent):void
					{
						var ydfwInfoOBJ:Object= JSON.decode(event.result.toString());
						var resultArrCol:ArrayCollection=createYDFWRecordData(featureSet,ydfwInfoOBJ);
						xzfw_ydDataGridItem.headerText="用地信息(合计"+resultArrCol.length.toString()+"条)";
						xzfw_ydDataGrid.dataProvider=UtilsClass.sortArrayCollection("DOC_DATE",resultArrCol);
						showYDFWMessage("", false,false);
						xzfw_ydGridVisible=true;
						UtilsClass.zoomToGraphics(map,ydfwExtentGraphicsLayer);
						CursorManager.removeBusyCursor();
					}
					function info_onFault(event:FaultEvent):void
					{
						showYDFWMessage("暂无符合条件的记录!", false,true);
						CursorManager.removeBusyCursor();
					}
				}
			}
			private function queryGCFWInfoData(featureSet:FeatureSet):void
			{
				var gc_ids:String="";
				//infoOBJ存储属性信息
				if(featureSet.features.length>0){
					
					for each (var gra:Graphic in featureSet.features)
					{
						var content:String="";
						var obj:Object=gra.attributes;
						var gc_id:String = obj.GC_ID;
						gc_ids += "'" + gc_id + "',";
					}
					if(gc_ids!=""){
						gc_ids=gc_ids.substr(0,gc_ids.length-1);
					}
					var whereStr:String = "where ID in ( "+gc_ids+" )";
					var httpservice:HTTPService=new HTTPService();
					httpservice.url=gcfwInfoUrl;
					httpservice.resultFormat="text";
					var obj:Object=new Object();
					
					httpservice.addEventListener(ResultEvent.RESULT, info_onResult);
					httpservice.addEventListener(FaultEvent.FAULT, info_onFault);
					obj.table=gcfwInfoTable;
					obj.fields=gcfwInfoFieldsStr;
					obj.where = whereStr;
					httpservice.send(obj);
					function info_onResult(event:ResultEvent):void
					{
						var gcfwInfoOBJ:Object= JSON.decode(event.result.toString());
						var recAC:ArrayCollection=createGCFWRecordData(featureSet,gcfwInfoOBJ);
						xzfw_gcDataGridItem.headerText="工程信息(合计"+recAC.length.toString()+"条)";
						xzfw_gcDataGrid.dataProvider=UtilsClass.sortArrayCollection("APPROVE_DATE",recAC);
						showGCFWMessage("", false,false);
						xzfw_gcGridVisible=true;
						UtilsClass.zoomToGraphics(map,gcfwExtentGraphicsLayer);
						CursorManager.removeBusyCursor();
					}  
					function info_onFault(event:FaultEvent):void
					{
						showGCFWMessage("暂无符合条件的记录!", false,true);
						CursorManager.removeBusyCursor();
					}
				}
			}
			private function createYDFWRecordData(featureSet:FeatureSet,ydfwInfoOBJ:Object):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				//infoOBJ存储属性信息
				for each(var info:Object in ydfwInfoOBJ.datas)
				{
					var infoFld:String;
					var value:String;
					var title:String;
					var link:String="";
					var plan_num:String;
					var temp:String;
					var pass_no:String;
					var project_name:String;
					var str:String;
					var projectArrCol:ArrayCollection=new ArrayCollection;
					var graphicsArrCol:ArrayCollection=new ArrayCollection;
					for each (var gra:Graphic in featureSet.features)
					{
						var content:String="";
						var obj:Object=gra.attributes;
						var yd_id:String = obj.YD_ID.toString();
						if(yd_id&&info.ID)
						{
							if(yd_id == info.ID.toString())
							{
								var graphic:Graphic=new Graphic(gra.geometry,gra.symbol,gra.attributes);
								
								graphic.symbol=FWSymbol.ydGraphicSymbol;
								//数据构造部分
								var fld:String;
								var point:MapPoint=getGeomCenter(gra);
								var fldAliases:Object=featureSet.fieldAliases;
								//判断是Title还是Content
								for (fld in obj)
								{
									value=obj[fld].toString();
									if (fld.toUpperCase() == extentTitlefield.toUpperCase())
									{
										title=value;
										if (!title)
											title=widgetTitle;
									}
									if (fld.toUpperCase() == ydfwExtentLinkfield.toUpperCase())
									{
										link=ydfwLinkURL + value;
									}
								}
								for(var i:int = 0;i < ydfwInfoFieldsCN.length;i++ )
								{
									temp = ydfwInfoFields[i].toString();
									if("ID" != temp)
									{
										if("PROJECT_NAME" == temp)
										{
											project_name = info[temp];
										}
										else if("PASS_NO" == temp)
										{
											pass_no = info[temp];
										}
										if("BUILD_AREA" == temp)
										{
											content+=ydfwInfoFieldsCN[i].toString() + ": " + info[temp] + "平方米;";
										}
										else if("DOC_DATE" == temp)
										{
											str = info[temp].toString();
											content+=ydfwInfoFieldsCN[i].toString() + ": " + str.substr(0,10) + ";";
										}
										else
										{
											str =info[temp]||"";
											content+=ydfwInfoFieldsCN[i].toString() + ": " + info[temp] + ";";
										}
									}
								}
								if(content == "") content = "无相关的属性信息";
								content=content.substring(0,content.length-1);
								var infoData:Object={icon: icon,yd_id:yd_id,buildingName:gra.attributes.GC_C10,pass_no:pass_no,project_name:project_name, title: title,type:"xz_ydfw", content: content, link: link, point: point, graphic: gra};
								graphic.attributes=infoData;
								ydfwExtentGraphicsLayer.add(graphic);
								projectArrCol.addItem(infoData);
								graphicsArrCol.addItem(graphic);
							}
						}
					}
					if(projectArrCol&&projectArrCol.length>0)
					{
						var projectInfo:Object={pass_no:pass_no,type:"xz_ydfw",project_name:project_name,projectArrCol:projectArrCol,link:link,graphicsArrCol:graphicsArrCol};
						recAC.addItem(projectInfo);
					}
				}
				glowLayer.clear();
				return recAC;
			}
			/**
			 * 详规范围查询结果处理，返回ArrayCollection
			 * */
			private function createXGFWRecordData(featureSet:FeatureSet):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				for each (var gra:Graphic in featureSet.features)
				{
					if(gra.geometry==null){
						continue;
					}else{
						gra.symbol=FWSymbol.xgGraphicSymbol;
						//数据构造部分
						var obj:Object=gra.attributes;
						var fld:String;
						var value:String;
						var title:String;
						var content:String="";
						var link:String="";
						var point:MapPoint=getGeomCenter(gra);
						var fldAliases:Object=featureSet.fieldAliases;
						var plan_num:String;
						var plan_code:String;
						var plan_type:String;
						var plan_date:String;
						var temp:String;
						//判断是Title还是Content
						for (fld in obj)
						{
							value = obj[fld] ? obj[fld].toString():"";
							
							if (fld.toUpperCase() == xgfwExtentTitlefield.toUpperCase())
							{
								title=value;
								if (!title)
									title=widgetTitle;
							}
							if (fld.toUpperCase() ==  xgfwExtentLinkfield.toUpperCase())
							{
								plan_num = value;
								link= xgfwLinkURL+value;
							}
							if(fld.toUpperCase() == "PLAN_CODE")
							{
								plan_code=value;
							}
							if(fld.toUpperCase() == "PLAN_TYPE")
							{
								plan_type=value;
							}
						}
						for(var i:int = 0;i < xgfwResultFWFieldsCN.length;i++ ){
							temp = xgfwResultFWFields[i].toString();
							if("TOT_AREA" == temp){
								var areaNum:Number=Number(obj[temp]);
								obj[temp]=areaNum.toFixed(2);
								content+=xgfwResultFWFieldsCN[i].toString() + ": " + obj[temp] + " 公顷;";
							}
							else if(temp=="START_DATE"||temp=="END_DATE")
							{
								var df:DateFormatter= new DateFormatter();
								df.formatString='YYYY-MM-DD';
								var date:Date=new Date(obj[temp]);
								obj[temp] = df.format(date);
								plan_date=df.format(date);
								content+=xgfwResultFWFieldsCN[i].toString() + ": " + obj[temp];
							}else{
								content+=xgfwResultFWFieldsCN[i].toString() + ": " + obj[temp] + ";";
							}
						}
						var infoData:Object={icon:icon,plan_num:plan_num,plan_code:plan_code,plan_date:plan_date,plan_type:plan_type, title: title,type:"xz_xgfw", content: content, link: link, point: point, graphic: gra};
						gra.attributes=infoData;
						xgfwExtentGraphicsLayer.add(gra);
						recAC.addItem(infoData);
					}
					
				}
				return recAC;
			}
			private function createGCFWRecordData(featureSet:FeatureSet,xzfwInfoOBJ:Object):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				//infoOBJ存储属性信息
				for each(var info:Object in xzfwInfoOBJ.datas)
				{
					var infoFld:String;
					var value:String;
					var title:String;
					var link:String="";
					var plan_num:String;
					var temp:String;
					var pass_no:String;
					var project_name:String;
					var str:String;
					var projectArrCol:ArrayCollection=new ArrayCollection;
					var graphicsArrCol:ArrayCollection=new ArrayCollection;
					for each (var gra:Graphic in featureSet.features)
					{
						var content:String="";
						var obj:Object=gra.attributes;
						var gc_id:String = obj.GC_ID.toString();
						if(gc_id&&info.ID)
						{
							if(gc_id == info.ID.toString())
							{
								var graphic:Graphic=new Graphic(gra.geometry,gra.symbol,gra.attributes);
								
								graphic.symbol=FWSymbol.gcUpGraphicSymbol;
								//数据构造部分
								var fld:String;
								var point:MapPoint=getGeomCenter(gra);
								var fldAliases:Object=featureSet.fieldAliases;
								//判断是Title还是Content
								for (fld in obj)
								{
									value=obj[fld].toString();
									if (fld.toUpperCase() == extentTitlefield.toUpperCase())
									{
										title=value;
										if (!title)
											title=widgetTitle;
									}
									if (fld.toUpperCase() == gcfwExtentLinkfield.toUpperCase())
									{
										link=gcfwLinkURL + value;
									}
								}
								for(var i:int = 0;i < gcfwInfoFieldsCN.length;i++ )
								{
									temp = gcfwInfoFields[i].toString();
									if("ID" != temp)
									{
										if("PROJECT_NAME" == temp)
										{
											project_name = info[temp];
										}
										else if("PASS_NO" == temp)
										{
											pass_no = info[temp];
										}
										if("BUILD_AREA" == temp)
										{
											content+=gcfwInfoFieldsCN[i].toString() + ": " + info[temp] + "平方米;";
										}
										else if("DOC_DATE" == temp)
										{
											str = info[temp].toString();
											content+=gcfwInfoFieldsCN[i].toString() + ": " + str.substr(0,10) + ";";
										}
										else
										{
											str =info[temp]||"";
											content+=gcfwInfoFieldsCN[i].toString() + ": " + info[temp] + ";";
										}
									}
								}
								if(content == "") content = "无相关的属性信息";
								content=content.substring(0,content.length-1);
								var infoData:Object={icon: icon,gc_id:gc_id,buildingName:gra.attributes.GC_C10,pass_no:pass_no,project_name:project_name, title: title,type:"xz_gcfw", content: content, link: link, point: point, graphic: gra};
								graphic.attributes=infoData;
								gcfwExtentGraphicsLayer.add(graphic);
								projectArrCol.addItem(infoData);
								graphicsArrCol.addItem(graphic);
							}
						}
					}
					if(projectArrCol&&projectArrCol.length>0)
					{
						var projectInfo:Object={pass_no:pass_no,type:"xz_gcfw",project_name:project_name,projectArrCol:projectArrCol,link:link,graphicsArrCol:graphicsArrCol};
						recAC.addItem(projectInfo);
					}
				}
				return recAC;
			}
			private function tableCountQuery(XZ_ID:String):void
			{
				//先查询一下这个图层数据的总数
				CursorManager.setBusyCursor();				
				if (xzfwCountUrl)
				{
					var whereStr:String = "where 1=1";
					whereStr+=" and "+XZ_ID;
					var httpCount:HTTPService=new HTTPService();
					httpCount.url=xzfwCountUrl;
					httpCount.resultFormat="e4x";
					httpCount.method="post";
					httpCount.addEventListener(ResultEvent.RESULT, count_onResult);
					httpCount.addEventListener(FaultEvent.FAULT, count_onFault);
					var random:Number=Math.random();
					var obj:Object=new Object();
					obj.table=xzfwCountTable;
					obj.database="sde";
					obj.action="query";
					obj.column=xzfwColcum;
					obj.tablename = xzfwCountTable;
					obj.whereClause = whereStr;
					obj.random=random;
					httpCount.send(obj);
					function count_onResult(event:ResultEvent):void
					{
						var count:String  = JSON.decode(event.result.toString());
						CursorManager.removeBusyCursor();
						queryDataGridItem.headerText="选址信息(合计"+count+"条)";
						
					}	
					function count_onFault(event:FaultEvent):void
					{
						showMessage("没有查询到相关信息", false,true);
						CursorManager.removeBusyCursor();
					}
				}
			}
			private function textQuery():void
			{
				//先查询出表中的记录数--有where条件的。
				//tableCountQuery();
				xz_ids = "";
				infoOBJ = new Object();
				CursorManager.setBusyCursor();
				this.showInfoWindow(null);
				graphicsLayer.clear();
				extentGraphicsLayer.clear();
				gridVisible=false;
				lys.visible = false;
				queryDataGrid.dataProvider=null;
				showMessage("正在查询...",true,true);
				showStateResults();
				setMapNavigation(NavigationTool.PAN, "漫游");
				if (infoUrl)
				{
					var whereStr:String = "where 1=1";
					var httpservice:HTTPService=new HTTPService();
					httpservice.url=infoUrl;
					httpservice.resultFormat="text";
					var obj:Object=new Object();
					
					httpservice.addEventListener(ResultEvent.RESULT, info_onResult);
					httpservice.addEventListener(FaultEvent.FAULT, info_onFault);
					obj.table=infoTable;
					obj.fields=infoFieldsStr;
					if(projectName.text!=""){
						whereStr += " and PROJECT_NAME like '%" +StringUtil.trim( projectName.text) + "%'";
					}
					if(pass_no.text!=""){
						whereStr += " and PASS_NO like '%" +StringUtil.trim( pass_no.text )+ "%'";
					}
					if(YearLocate.selectedIndex>0){
						whereStr +=" and DOC_DATE > to_date('" + YearLocate.selectedItem.label + "-1-1','yyyy-mm-dd') and DOC_DATE < to_date('" + YearLocate.selectedItem.label + "-12-31','yyyy-mm-dd')";
					}
					obj.where = whereStr;
					httpservice.send(obj);
					function info_onResult(event:ResultEvent):void
					{
						infoOBJ = JSON.decode(event.result.toString());
						for each(var obj:Object in infoOBJ.datas)
						{
							xz_ids += "'" + obj.ID + "',";
						}
						if(xz_ids != ""){
							queryGeomByIds(xz_ids.substring(0,xz_ids.length-1));
						}else{
							showMessage("没有查询到相关信息", false,true);
							CursorManager.removeBusyCursor();
						}
					}	
					function info_onFault(event:FaultEvent):void
					{
						showMessage("没有查询到相关信息", false,true);
						CursorManager.removeBusyCursor();
					}
				}
				else
				{
					showMessage("信息查询地址出错", false,true);
					CursorManager.removeBusyCursor();
				}
			}
			private function createXZIDData(xz_ids:String):String
			{
				var whereSring="";
				if(xz_ids  != ""){
					var resultIDS:Array=xz_ids.split(",");
					if(resultIDS.length<1000){
						whereSring =  "XZ_ID in (" + xz_ids + ")";
					}else{
						var count:int = (resultIDS.length)/1000;
						if(count*1000<resultIDS.length){
							count = count+1;
						}
						
						for(var i=0; i<count; i++){
							if(i==0){
								whereSring += "XZ_ID in (";
							}else{
								whereSring += "or XZ_ID in (";
							}
							for(var j = 0; j<1000 && i*1000+j<resultIDS.length; j++){
								whereSring+=resultIDS[i*1000+j];
								if(j != 999 && i*1000+j <resultIDS.length-1){
									whereSring+=","
								}
							}
							whereSring += ")";
						}
					}
				}
				return whereSring;
			}
			private function queryGeomByIds(xz_ids:String):void
			{
				if (extentUrl)
				{
					
					var queryTask:QueryTask=new QueryTask(extentUrl);
					var query:Query=new Query();
					//var expr:String = "XZ_ID in (" + xz_ids + ")";
					var expr:String = createXZIDData(xz_ids);
					tableCountQuery(expr);
					query.where=expr;
					query.outFields=extentFields.split(",");
					var graphicsLayer2Arr:ArrayCollection = drawGraphicsLayer.graphicProvider as ArrayCollection;
					if(graphicsLayer2Arr.length > 0){
						query.geometry = drawGeom;						
					}
					query.returnGeometry=true;
					queryTask.showBusyCursor=true;
					queryTask.execute(query, new AsyncResponder(ontextResult, ontextFault));
				}
				else
				{
					showMessage("查询图层不存在", false,true);
				}
			}
			
			//on fault
			private function ontextFault(info:Object, token:Object=null):void
			{
				//Alert.show(info.toString());
				CursorManager.removeBusyCursor();
				showMessage(info.toString(), false,true);
				showStateResults();
			}
			
			private function ontextResult(featureSet:FeatureSet, token:Object=null):void
			{
				if (featureSet.features.length > 0)
				{
					try
					{
						var recAC:ArrayCollection=createRecordData(featureSet);
						//queryDataGridItem.headerText="选址信息(合计"+recAC.length.toString()+"条)";
						queryDataGrid.dataProvider=UtilsClass.sortArrayCollection("DOC_DATE",recAC);
						gridVisible=true;
						showMessage("",false,false);
					}
					catch (error:Error)
					{
						showMessage(error.message,false,true);
					}
				}
				else
				{
					showMessage("暂无符合条件的记录!", false,true);
					showStateResults();
				}
				UtilsClass.zoomToGraphics(map,extentGraphicsLayer);
				CursorManager.removeBusyCursor();
			}
			
			private function polygonQuery(value:String):void
			{
				graphicsLayer.clear();
				drawGraphicsLayer.clear();
				glowLayer.clear();
				extentGraphicsLayer.clear();
				this.showInfoWindow(null);
				setMapNavigation(NavigationTool.PAN, "漫游");
				switch (value)
				{
					case DrawTool.POLYGON:
					{
						setMapAction(value, "多边形",new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, 0x3FAFDC, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0x3FAFDC, 1, 1)), drawEnd);
						break;
					}
					case DrawTool.EXTENT:
					{
						setMapAction(value, "框选", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, 0x3FAFDC, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0x3FAFDC, 1, 1)), drawEnd);
						break;
					}
					case "CIRCLE":
					{
						setMapAction(value, "圆选", null,null);
						circleTool.activate(CustomDraw.CIRCLE);
						break;
					}
					case DrawTool.POLYLINE:
					{
						setMapAction(value, "线形",new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0x3FAFDC, 1, 1), drawEnd);
						break;
					}
				}
				
			}
			
			//绘制完成，在graphiclayer上添加graphic 并将该多边形的点位传送给服务器端
			private function drawEnd(event:DrawEvent):void
			{
				//	CursorManager.setBusyCursor();
				graphicsLayer.clear();
				drawGraphicsLayer.clear();
				plotGraphicsLayer.clear();
				glowLayer.clear();
				extentGraphicsLayer.clear();
				gridVisible=false;
				lys.visible = false;
				queryDataGrid.dataProvider=null;
				showStateResults();
				showMessage("正在查询...",true,true);
				circleTool.deactivate();
				setMapNavigation(NavigationTool.PAN, "漫游");
				var gra:Graphic=event.graphic as Graphic;
				
				if (gra.attributes)
				{
					if (gra.attributes.type == CustomDraw.CUSTOM_CIRCLE)
					{
						//TODO:是否需要添加中心点
						var obj:Object=gra.attributes;
						bufferRadius_txt.text=Number(obj.radius).toFixed(0);
					}
					
				}
				gra.symbol=FWSymbol.xzDrawGraphicSymbol;
				drawGraphicsLayer.add(gra);
				
				drawGeom = event.graphic.geometry;
				textQuery();
			}
			
			
			
			private function clear():void
			{
				
				graphicsLayer.clear();
				drawGraphicsLayer.clear();
				plotGraphicsLayer.clear();
				glowLayer.clear();
				extentGraphicsLayer.clear();
				this.showInfoWindow(null);
				bufferRadius_txt.text="";
				queryDataGrid.dataProvider=null;
				gridVisible=false;
				dk_msgVisible=false;
				msgVisible=false;
				circleTool.deactivate();
				setMapNavigation(NavigationTool.PAN, "漫游");
			}
			
			
			private function getGeomCenter(gra:Graphic):MapPoint
			{
				var pt:MapPoint;
				switch (gra.geometry.type)
				{
					case Geometry.MULTIPOINT:
					{
						var multiPoint:Multipoint=Multipoint(gra.geometry);
						pt=MapPoint(multiPoint.points[0]);
						break;
						
					}
					case Geometry.MAPPOINT:
					{
						pt=gra.geometry as MapPoint;
						break;
					}
						
					case Geometry.POLYLINE:
					{
						var pl:Polyline=gra.geometry as Polyline;
						var pathCount:Number=pl.paths.length;
						var pathIndex:int=int((pathCount / 2) - 1);
						var midPath:Array=pl.paths[pathIndex];
						var ptCount:Number=midPath.length;
						var ptIndex:int=int((ptCount / 2) - 1);
						pt=pl.getPoint(pathIndex, ptIndex);
						break;
					}
						
					case Geometry.POLYGON:
					{
						var poly:Polygon=gra.geometry as Polygon;
						pt=poly.extent.center;
						break;
					}
						
				}
				return pt;
			}
			private function mouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				if(graphic==null){
					graphic=event.target.parent  as Graphic;
				}
				if(graphic!=null){
					if(graphic.geometry is Polygon){
						glowLayer.clear();
						var gra:Graphic=new Graphic(graphic.geometry,FWSymbol.xzSelectedGraphicSymbol,graphic.attributes);
						glowLayer.add(gra);
					}
					var infoData:Object=graphic.attributes;
					infoData.label="查看选址信息";
					this.showInfoWindow(infoData);
				}
			}
			
			private function createRecordData(featureSet:FeatureSet):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				//infoOBJ存储属性信息
				for each(var info:Object in infoOBJ.datas)
				{
					var infoFld:String;
					var value:String;
					var title:String;
					var link:String="";
					var plan_num:String;
					var temp:String;
					var pass_no:String;
					var project_name:String;
					var str:String;
					var projectArrCol:ArrayCollection=new ArrayCollection;
					var graphicsArrCol:ArrayCollection=new ArrayCollection;
					for each (var gra:Graphic in featureSet.features)
					{
						var content:String="";
						var obj:Object=gra.attributes;
						var xz_id:String = obj.XZ_ID.toString();
						if(xz_id&&info.ID)
						{
							if(xz_id == info.ID.toString())
							{
								var graphic:Graphic=new Graphic(gra.geometry,gra.symbol,gra.attributes);
								
								graphic.symbol=FWSymbol.xzGraphicSymbol;
								//数据构造部分
								var fld:String;
								var point:MapPoint=getGeomCenter(gra);
								var fldAliases:Object=featureSet.fieldAliases;
								//判断是Title还是Content
								for (fld in obj)
								{
									value=obj[fld].toString();
									if (fld.toUpperCase() == extentTitlefield.toUpperCase())
									{
										title=value;
										if (!title)
											title=widgetTitle;
									}
									if (fld.toUpperCase() == extentLinkfield.toUpperCase())
									{
										link=linkURL + value;
									}
								}
								for(var i:int = 0;i < infoFieldsCN.length;i++ )
								{
									temp = infoFields[i].toString();
									if("ID" != temp)
									{
										if("PROJECT_NAME" == temp)
										{
											project_name = info[temp];
										}
										else if("PASS_NO" == temp)
										{
											pass_no = info[temp];
										}
										if("BUILD_AREA" == temp)
										{
											content+=infoFieldsCN[i].toString() + ": " + info[temp] + "平方米;";
										}
										else if("DOC_DATE" == temp)
										{
											str = info[temp].toString();
											content+=infoFieldsCN[i].toString() + ": " + str.substr(0,10) + ";";
										}
										else
										{
											str =info[temp]||"";
											if(str=="null"||str=="NULL"){
												str = "";
											}
											content+=infoFieldsCN[i].toString() + ": " + str + ";";
										}
									}
								}
								if(content == "") content = "无相关的属性信息";
								content=content.substring(0,content.length-1);
								var infoData:Object={icon: icon,xz_id:xz_id,buildingName:gra.attributes.GC_C10,pass_no:pass_no,project_name:project_name, title: title,type:"xzfw", content: content, link: link, point: point, graphic: gra};
								graphic.attributes=infoData;
								extentGraphicsLayer.add(graphic);
								projectArrCol.addItem(infoData);
								graphicsArrCol.addItem(graphic);
							}
						}
					}
					if(projectArrCol&&projectArrCol.length>0)
					{
						var projectInfo:Object={pass_no:pass_no,type:"xzfw",project_name:project_name,projectArrCol:projectArrCol,link:link,graphicsArrCol:graphicsArrCol};
						recAC.addItem(projectInfo);
					}
				}
				return recAC;
			}
			
			private function dataGridClick(event:ListEvent):void
			{
				this.showInfoWindow(null);
				glowLayer.clear();
				glowLayer.visible=true;
				var infoData:Object=queryDataGrid.dataProvider[event.rowIndex];
				var projectArrCol:ArrayCollection=infoData.projectArrCol;
				var graphicsArrCol:ArrayCollection=infoData.graphicsArrCol;
				if(projectArrCol&&projectArrCol.length>0)
				{
					for(var i:int=0;i<graphicsArrCol.length;i++)
					{
						var glowGraphic:Graphic;
						if(graphicsArrCol[i].geometry is MapPoint){
							
							glowGraphic=new Graphic(graphicsArrCol[i].attributes.polygon,FWSymbol.gcSelectedGraphicSymbol,graphicsArrCol[i].attributes);
							
						}else{
							glowGraphic=new Graphic(graphicsArrCol[i].geometry,FWSymbol.gcSelectedGraphicSymbol,graphicsArrCol[i].attributes);
						}
						glowLayer.add(glowGraphic);
					}
					glowLayer.refresh();
				}
				UtilsClass.zoomToGraphics(map,glowLayer);
				graphicsArrCol[0].attributes.label="查看选址信息";
				this.showInfoWindow(graphicsArrCol[0].attributes);
			}
			override public function showInfoWindow(infoData:Object):void
			{
				if (infoData)
				{
					var infoTemplate:InfoPopupWidget = new InfoPopupWidget();
					map.infoWindow.setStyle("contentBackgroundAlpha", 0.95);
					map.infoWindow.setStyle("backgroundAlpha", 0.95);
					map.infoWindow.setStyle("backgroundColor", 0xCBE5FE);
					map.infoWindow.content = infoTemplate as UIComponent;
					map.infoWindow.label =infoData.label;
					infoTemplate.data = infoData;
					map.infoWindow.show(infoData.point);
				}
				else
				{
					map.infoWindow.hide();
				}
			}
			//event handler - fires when drawing starts
			//clear the previous graphics from the map
			private function drawStartHandler(event:DrawEvent):void
			{
				//clear all selections before new drawing
				this.showInfoWindow(null);
				graphicsLayer.clear();
				drawGraphicsLayer.clear();
				plotGraphicsLayer.clear();
				glowLayer.clear();
			}
			
			
			private function showMessage(msg:String, swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				txtMessage.text=msg;
				swfMessage.visible=swfVisible;
				msgVisible=boxMessageVisible;
			}
			
			private function radiusTuning():void
			{
				if (drawGraphicsLayer.numGraphics == 1)
				{
					var gra:Graphic=drawGraphicsLayer.getChildAt(0) as Graphic;
					if (gra.attributes != null)
					{
						if (gra.attributes.type == CustomDraw.CUSTOM_CIRCLE)
						{
							var circleObj:Object=gra.attributes as Object;
							var centerPoint:MapPoint=circleObj.cpoint as MapPoint;
							var m_radius:Number=Number(StringUtil.trim(bufferRadius_txt.text));
							function createCirclePoints(m_center:MapPoint):Array
							{
								var cosinus:Number;
								var sinus:Number;
								var x:Number;
								var y:Number;
								var arrayOfPoints:Array=new Array();
								var numberOfCirclePoints:int=100;
								for (var i:int=0; i < numberOfCirclePoints; i++)
								{
									sinus=Math.sin((Math.PI * 2.0) * (i / numberOfCirclePoints));
									cosinus=Math.cos((Math.PI * 2.0) * (i / numberOfCirclePoints));
									x=m_center.x + m_radius * cosinus;
									y=m_center.y + m_radius * sinus;
									arrayOfPoints[i]=new MapPoint(x, y);
								}
								
								arrayOfPoints.push(arrayOfPoints[0]);
								return arrayOfPoints;
							}
							var m_circleGeometry:Polygon=new Polygon;
							m_circleGeometry.addRing(createCirclePoints(centerPoint));
							drawGraphicsLayer.clear();
							glowLayer.clear();
							gra=new Graphic(m_circleGeometry,FWSymbol.xzDrawGraphicSymbol);
							gra.attributes=circleObj;
							drawGraphicsLayer.add(gra);
							drawGeom = gra.geometry;
							textQuery();
						}
						
					}
					else
					{
						Alert.show("微调半径仅对圆选生效。");
					}
				}
			}
			
			public function clickHandle():void
			{
				navigateToURL(new URLRequest(queryDataGrid.selectedItem.link+"&account="+configData.userId));
			}
			
			protected function wTemplate_minimizedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				wTitle=wTemplate.widgetTitle;
				wTemplate.widgetTitle="选址意见";
			}
			protected function glowLayer_effectEndHandler(event:EffectEvent):void
			{
				// TODO Auto-generated method stub
				event.effectInstance.reverse();
				event.effectInstance.play();
			}
			public function  passnoLableFunction(item:Object, column:DataGridColumn):String{
				
				var title:String=item.pass_no;
				if(title.length>12){
					
					title=title.substr(0,11)+"...";
				}
				return title;
			}
			public function  projectionNameLabelFunction(item:Object, column:DataGridColumn):String{
				
				var title:String=item.project_name;
				if(title.length>14){
					
					title=title.substr(0,12)+"...";
				}
				return title;
			}
			protected function backBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				showStateResults();
			}
			protected function xzfw_xgDataGrid_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				glowLayer.clear();
				var infoData:Object=xzfw_xgDataGrid.dataProvider[event.rowIndex];
				var graphic:Graphic=new Graphic(infoData.graphic.geometry,FWSymbol.xgSelectedGraphicSymbol,infoData.graphic.attributes);
				glowLayer.add(graphic);
				UtilsClass.zoomToGraphics(map,glowLayer);
				infoData.label = "查看详规信息";
				this.showInfoWindow(infoData);
			}
			
			protected function xzfw_ydDataGrid_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				this.showInfoWindow(null);
				glowLayer.clear();
				glowLayer.visible=true;
				var infoData:Object=xzfw_ydDataGrid.dataProvider[event.rowIndex];
				var projectArrCol:ArrayCollection=infoData.projectArrCol;
				var graphicsArrCol:ArrayCollection=infoData.graphicsArrCol;
				if(projectArrCol&&projectArrCol.length>0)
				{
					for(var i:int=0;i<graphicsArrCol.length;i++)
					{
						var glowGraphic:Graphic;
						if(graphicsArrCol[i].geometry is MapPoint){
							
							glowGraphic=new Graphic(graphicsArrCol[i].attributes.polygon,FWSymbol.gcSelectedGraphicSymbol,graphicsArrCol[i].attributes);
							
						}else{
							glowGraphic=new Graphic(graphicsArrCol[i].geometry,FWSymbol.gcSelectedGraphicSymbol,graphicsArrCol[i].attributes);
						}
						glowLayer.add(glowGraphic);
					}
					glowLayer.refresh();
				}
				UtilsClass.zoomToGraphics(map,glowLayer);
				graphicsArrCol[0].attributes.label="查看用地信息";
				this.showInfoWindow(graphicsArrCol[0].attributes);
			}
			
			protected function xzfw_gcDataGrid_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				this.showInfoWindow(null);
				glowLayer.clear();
				glowLayer.visible=true;
				var infoData:Object=xzfw_gcDataGrid.dataProvider[event.rowIndex];
				var projectArrCol:ArrayCollection=infoData.projectArrCol;
				var graphicsArrCol:ArrayCollection=infoData.graphicsArrCol;
				if(projectArrCol&&projectArrCol.length>0)
				{
					for(var i:int=0;i<graphicsArrCol.length;i++)
					{
						var glowGraphic:Graphic;
						if(graphicsArrCol[i].geometry is MapPoint){
							
							glowGraphic=new Graphic(graphicsArrCol[i].attributes.polygon,FWSymbol.gcSelectedGraphicSymbol,graphicsArrCol[i].attributes);
							
						}else{
							glowGraphic=new Graphic(graphicsArrCol[i].geometry,FWSymbol.gcSelectedGraphicSymbol,graphicsArrCol[i].attributes);
						}
						glowLayer.add(glowGraphic);
					}
				}
				UtilsClass.zoomToGraphics(map,glowLayer);
				graphicsArrCol[0].attributes.label="查看用地信息";
				this.showInfoWindow(graphicsArrCol[0].attributes);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<esri:GraphicsLayer id="glowLayer"  />
		<mx:DateFormatter id="formatDate" formatString="YYYY-MM-DD">
			</mx:DateFormatter>
		<circle:CustomDraw id="circleTool"
						   drawStart="drawStartHandler(event)"
						   drawEnd="drawEnd(event)">
		</circle:CustomDraw>
	</fx:Declarations>
	<viewer:WidgetTemplate id="wTemplate"
					closed="queryWidgetClosed()"
					minimized="wTemplate_minimizedHandler(event)"
					open="queryWidgetOpened()" height="280" width="380"
					>
		<mx:ViewStack id="viewStack"
					  width="100%"
					  height="100%"
					  creationPolicy="all"
					  >
			<mx:VBox width="100%"
					 height="100%"
					 verticalGap="1"
					  >
				<mx:Form id="frmLocateCoords"
						 verticalScrollPolicy="off"
						 paddingBottom="0"
						 width="100%"
						 height="100%">

					<mx:FormItem label="项目名称"
								 styleName="WidgetText">
						<mx:VBox verticalAlign="middle"	 >	
							<mx:TextInput id="projectName"
										  text=""
										  maxChars="30"/>
						</mx:VBox>		
					</mx:FormItem>
					<mx:FormItem label="证号"
								 styleName="WidgetText">
					<mx:VBox verticalAlign="middle"	>	
							<mx:TextInput id="pass_no"
										  text=""
										  maxChars="30"/>
					</mx:VBox>		
					</mx:FormItem>
					
					<mx:FormItem label="年份" styleName="WidgetText" direction="horizontal">
						<mx:ComboBox id="YearLocate" width="130" height="22" />
						
					</mx:FormItem>
					<mx:FormItem label="空间查询" styleName="WidgetText" direction="horizontal">
						<mx:Image source="assets/images/icons/s_circle.png"
								  click="{polygonQuery('CIRCLE')}"
								  useHandCursor="true"
								  buttonMode="true"
								  toolTip="圆选"
								  width="32"
								  height="32"/>
						<mx:Image source="assets/images/icons/s_polygon.png"
								  click="{polygonQuery(DrawTool.POLYGON)}"
								  useHandCursor="true"
								  buttonMode="true"
								  toolTip="多边形"
								  width="32"
								  height="32"/>
						<mx:TextInput id="bufferRadius_txt"
									  text=""
									  restrict="0-9\."
									  width="80"
									  maxChars="10"
									  enter="radiusTuning()"
									  visible="false"/>
						<mx:Text text="米"
								 styleName="WidgetText"
								 visible="false"/>
						
						<mx:Button label="微调半径"
								   click="radiusTuning()"
								   visible="false"  />
					</mx:FormItem>
					<mx:HBox horizontalAlign="center"
							 width="100%">
						<mx:Button label="查询"
								   icon="{Search}"
								   click="textQuery()"/>

						<mx:Button label="清除"
								   icon="{Clear}"
								   click="clear()"/>
					</mx:HBox>
				</mx:Form>
			</mx:VBox>
			<mx:VBox width="100%"
					 height="100%"
					 horizontalAlign="center"
					 verticalAlign="middle"
					 visible="true">
				<mx:Label id="graphicallb"
						  styleName="WidgetText"/>
				
				<mx:Button label="清除"
						   icon="{Clear}"
						   click="clear()"/>
			</mx:VBox>
			<mx:VBox id="extendVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:HBox id="boxMessage"
						 visible="{msgVisible}"
						 includeInLayout="{msgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="swfMessage"
								  source="assets/flash/loader.swf"/>

					<mx:Text id="txtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>

				<mx:VBox width="100%" height="100%">
					<mx:DataGrid id="queryDataGrid"
								 width="100%"
								 height="100%"
								 variableRowHeight="true"
								 alpha="1"  
								 itemClick="dataGridClick(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0xffffff"
								 selectionColor="0xfbefa0"
								 alternatingItemColors="{[0xffffff,0x85d4fc]}"
								 visible="{gridVisible}">
						<mx:columns>
							<mx:DataGridColumn   id="queryDataGridItem"  width="1.0"  itemRenderer="com.esri.viewer.utils.DataGridColumnGCFontItemRender" >
							</mx:DataGridColumn>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="xzfw_ydVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:Button id="xzfw_ydBackBtn" 
						   width="56"
						   icon="{Back}" toolTip="返回" 
						   click="backBtn_clickHandler(event)"/>
				<mx:HBox id="xzfw_ydBoxMessage"
						 visible="{xzfw_ydMsgVisible}"
						 includeInLayout="{xzfw_ydMsgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="xzfw_ydSwfMessage"
								  source="assets/flash/loader.swf"/>
					<mx:Text id="xzfw_ydTxtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				
				<mx:VBox width="100%"  height="100%">
					<mx:DataGrid id="xzfw_ydDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"  
								 itemClick="xzfw_ydDataGrid_itemClickHandler(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0xffffff"
								 selectionColor="0xfbefa0"
								 alternatingItemColors="{[0xffffff,0x85d4fc]}"
								 visible="{xzfw_ydGridVisible}">
						<mx:columns>
							<mx:DataGridColumn width="1.0"  id="xzfw_ydDataGridItem"  itemRenderer="com.esri.viewer.utils.DataGridColumnSubItemRender"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="xzfw_gcVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:Button id="xzfw_gcBackBtn" 
						   width="56"
						   icon="{Back}" toolTip="返回" 
						   click="backBtn_clickHandler(event)"/>
				<mx:HBox id="xzfw_gcBoxMessage"
						 visible="{xzfw_gcMsgVisible}"
						 includeInLayout="{xzfw_gcMsgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="xzfw_gcSwfMessage"
								  source="assets/flash/loader.swf"/>
					<mx:Text id="xzfw_gcTxtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				
				<mx:VBox width="100%"  height="100%">
					<mx:DataGrid id="xzfw_gcDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"  
								 itemClick="xzfw_gcDataGrid_itemClickHandler(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0xffffff"
								 selectionColor="0xfbefa0"
								 alternatingItemColors="{[0xffffff,0x85d4fc]}"
								 visible="{xzfw_gcGridVisible}">
						<mx:columns>
							<mx:DataGridColumn width="1.0"  id="xzfw_gcDataGridItem"   itemRenderer="com.esri.viewer.utils.DataGridColumnSubItemRender" />
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="xzfw_xgVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:Button id="xzfw_xgBackBtn" 
						   width="56"
						   icon="{Back}" toolTip="返回" 
						   click="backBtn_clickHandler(event)"/>
				<mx:HBox id="xzfw_xgBoxMessage"
						 visible="{xzfw_xgMsgVisible}"
						 includeInLayout="{xzfw_xgMsgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="xzfw_xgSwfMessage"
								  source="assets/flash/loader.swf"/>
					<mx:Text id="xzfw_xgTxtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				
				<mx:VBox width="100%"  height="100%">
					<mx:DataGrid id="xzfw_xgDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"  
								 itemClick="xzfw_xgDataGrid_itemClickHandler(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0xffffff"
								 selectionColor="0xfbefa0"
								 alternatingItemColors="{[0xffffff,0x85d4fc]}"
								 visible="{xzfw_xgGridVisible}">
						<mx:columns>
							<mx:DataGridColumn width="1.0"  id="xzfw_xgDataGridItem"   itemRenderer="com.esri.viewer.utils.DataGridColumnSubItemRender"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="dkVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:HBox id="dk_boxMessage"
						 visible="{dk_msgVisible}"
						 includeInLayout="{dk_msgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="dk_swfMessage"
								  source="assets/flash/loader.swf"/>
					<mx:Text id="dk_txtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				<mx:VBox width="100%" height="100%">
					<mx:Button id="dkbackBtn" 
							   width="56"
							   icon="{Back}" toolTip="返回" 
							   click="backDKBtn_clickHandler(event)"/>
					<mx:DataGrid id="queryXZDKDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"
								 sortableColumns="false"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 visible="{dk_gridVisible}"
								 textAlign="center"
								 itemClick="queryXZDKDataGrid_dataDKGridClick(event)"
								 rowHeight="25">
						<mx:columns>
							<mx:DataGridColumn width="0.2" dataField="title" 
											   headerText="地块编号"/>
							<mx:DataGridColumn width="0.5" dataField="plot_name"
											   headerText="用地性质名称"/>
							<mx:DataGridColumn width="0.3" dataField="cus_type" 
											   headerText="用地性质编号"/>
							
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
		</mx:ViewStack>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
