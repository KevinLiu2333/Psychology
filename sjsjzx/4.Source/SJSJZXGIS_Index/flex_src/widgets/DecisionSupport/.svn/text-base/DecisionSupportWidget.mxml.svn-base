<?xml version="1.0" encoding="utf-8"?>

<viewer:BaseWidget xmlns:viewer="com.esri.viewer.*"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:mxeffects="com.adobe.ac.mxeffects.*"
				   xmlns:widgets="widgets.*"
				   widgetConfigLoaded="init()"
				   creationComplete="changeTitle()">
	
	<viewer:states>
		<s:State name="serviceArea"/>
		<s:State name="route"/>
		<!--s:State name="GPSRes"/-->
	</viewer:states>
	
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<!--s:Fade targets="{[serviceArea, route, GPSRes]}"/-->
			<s:Fade targets="{[serviceArea, route]}"/>
		</s:Transition>
	</viewer:transitions>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.RouteEvent;
			import com.esri.ags.events.ServiceAreaEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.*;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.AddressCandidate;
			import com.esri.ags.tasks.supportClasses.DataFile;
			import com.esri.ags.tasks.supportClasses.ExecuteResult;
			import com.esri.ags.tasks.supportClasses.NAMessage;
			import com.esri.ags.tasks.supportClasses.ParameterValue;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tasks.supportClasses.RouteResult;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.serialization.json.*;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.Hashtable;
			import com.esri.viewer.utils.SymbolFunctionRenderer;
			import com.esri.viewer.utils.WidgetEffects;
			import com.esri.viewer.utils.UrlUtil;

			import mx.collections.*;
			import mx.controls.Alert;
			import mx.controls.ToolTip;
			import mx.managers.ToolTipManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			private var isServiceAreaResultExist:Boolean=false;

			private var isRouteExist:Boolean=false;

			private var rightTip:ToolTip;

			private var timer:Timer;

			private var graphicsLayer_R:GraphicsLayer = new GraphicsLayer();

			private var queryRefreshRate:String;

			private var loadingLabel:String;

			[Bindable]
			private var msgVisible:Boolean=false;
			[Bindable]
			private var msgVisible2:Boolean=false;
			[Bindable]
			private var eventLocationVisible:Boolean=false;

			private var graphicsLayer:GraphicsLayer = new GraphicsLayer();
			//private var lineGraphicsLayer:GraphicsLayer;


			private var locPoint:MapPoint;

			private var outlineSym:SimpleLineSymbol=new SimpleLineSymbol("solid", 0xFFFFFF, 1, 2);


			private var locSym:SimpleMarkerSymbol=new SimpleMarkerSymbol("circle", 12, 0x08C308, 1, 0, 0, 0, outlineSym);

			private var fillSym1:SimpleFillSymbol=new SimpleFillSymbol("solid", 0xFF0000, 0.5);

			private var fillSym2:SimpleFillSymbol=new SimpleFillSymbol("solid", 0xFF7800, 0.5);

			private var fillSym3:SimpleFillSymbol=new SimpleFillSymbol("solid", 0xC8FF00, 0.5);

			//Routing
			[Bindable]
			private var stops:FeatureSet=new FeatureSet([]);
			[Bindable]
			private var barriers:FeatureSet=new FeatureSet([]);

			[Bindable]
			private var lastRoute:Graphic;
			[Bindable]
			private var directionlengthunits:String;
			//Routing-End

			//private var segmentGraphic:Graphic;

			private var respointservice:String;

			private const ICON_URL:String=UrlUtil.URL_DOMAIN + "assets/images/icons/";

			private const START_POINT:String="startPoint";

			private const END_POINT:String="endPoint";

			private var isPaused:Boolean=false;
			
			private var initFinished:Boolean=false;
			private var creationFinished:Boolean=false;

			[Bindable]
			[Embed(source="assets/images/icons/i_redclear.png")]
			public var Clear:Class;
			private var symbolfunctionRender:SymbolFunctionRenderer = new SymbolFunctionRenderer();
			
			
			[Bindable]
			private var facilities:FeatureSet;
			
			private function changeTitle():void
			{
//				wTemplate.setTitle("影响范围分析");
				creationFinished=true;
			}

			private function init():void
			{

				setMapNavigation(NavigationTool.PAN, "漫游");
				symbolfunctionRender.symbolFunction = fillFunc;
				graphicsLayer.renderer = symbolfunctionRender;
				//graphicsLayer.symbolFunction=fillFunc;
				//lineGraphicsLayer.symbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0x00ff00, 0.5, 5);
				//map.addLayer(lineGraphicsLayer);
				map.addLayer(graphicsLayer);
				
				graphicsLayer_R.graphicProvider=lastRoute;
				graphicsLayer_R.symbol=routeSymbol;


				stops=new FeatureSet([]);
				barriers=new FeatureSet([]);
				lastRoute=new Graphic;
				map.addLayer(graphicsLayer_R);


				if (configXML)
				{
					queryRefreshRate=configXML.refreshrate;
					directionlengthunits=configXML.dirlengthunits || "esriMiles";
					//routeTask.url=configXML.routetasksolver;
					routeTask.url=gisdata_UrlROOT + configXML.routeserviceurl;
					respointservice=servlet_UrlROOT + configXML.respointservice;
					serviceAreaService.url=servlet_UrlROOT + configXML.serviceareaservice;
					
					saTask.url=gisdata_UrlROOT + configXML.areaserviceurl;
				}
				wTemplate.addTitlebarButton(ICON_URL + "i_influ.png", "影响范围分析", showServiceArea);
				wTemplate.addTitlebarButton(ICON_URL + "i_route.png", "路径分析", showRoute);
//				wTemplate.addTitlebarButton(ICON_URL + "i_dymres.png", "动态资源", showGPSRes);
				initFinished=true;
			}


			private function showServiceArea():void
			{
				this.currentState = "serviceArea";
				wTemplate.selectedTitlebarButtonIndex = 0;
			}
			
			private function showRoute():void
			{
				this.currentState = "route";
				wTemplate.selectedTitlebarButtonIndex = 1;
			}
			
			private function showGPSRes():void
			{
//				this.currentState = "GPSRes";
				wTemplate.selectedTitlebarButtonIndex = 2;
			}

			private function activateTool():void
			{
				var status:String="添加中心点";
				setMapAction(DrawTool.MAPPOINT, status, null, locationClick);
			}


			private function locationClick(event:DrawEvent):void
			{
				setMapNavigation(null, null);

				var geom:Geometry=event.graphic.geometry;
				var pt:MapPoint=geom as MapPoint;
				locPoint=pt;
				updateGraphics();
				computeServiceArea();
			}

			private function updateGraphics():void
			{
				graphicsLayer.clear();
				if (locPoint)
				{
					var locGra:Graphic=new Graphic(locPoint, locSym);
					graphicsLayer.add(locGra);
				}
			}





//
//			private function getServiceArea():void
//			{
//
//				computeServiceArea();
//
//			}

			private function computeServiceArea():void
			{
				if (locPoint)
				{
					var graphic:Graphic=new Graphic(locPoint, locSym);
					var featureSet:FeatureSet=new FeatureSet([graphic]);
					saParams.facilities = featureSet;
					saTask.solve(saParams);
					
//					var params:Object={"X": locPoint.x, "Y": locPoint.y};
//					serviceAreaService.execute(params, new AsyncResponder(onResult, onFault));
//					serviceAreaService.showBusyCursor=true;
//					showMessage(loadingLabel, true);
//
//					function onResult(gpResult:ExecuteResult, token:Object=null):void
//					{
//						var pv:ParameterValue=gpResult.results[0];
//						var fs:FeatureSet=pv.value as FeatureSet;
//						graphicsLayer.graphicProvider=fs.features;
//						graphicsLayer.add(graphic);
//
//						if (gpResult.results[1])
//						{
//							var pv2:ParameterValue=gpResult.results[1];
//							var fs2:FeatureSet=pv2.value as FeatureSet;
//								//lineGraphicsLayer.graphicProvider=fs2.features;
//
//						}
//						map.extent=getFeatureSetExtent(fs);
//						clearMessage();
//						isServiceAreaResultExist=true;
//					}
//
//					function onFault(info:Object, token:Object=null):void
//					{
//						//TODO:当事件坐标不在地图范围内，会报错。
//						showMessage("坐标异常，无法进行影响范围分析！详情：" + info.toString(), false);
//					}
				}
			}

			private function sa_solveCompleteHandler(event:ServiceAreaEvent):void
			{
				if(event.serviceAreaSolveResult){
					// Check for messages
					if (event.serviceAreaSolveResult.messages.length > 0)
					{
						var msg:NAMessage = event.serviceAreaSolveResult.messages[0] as NAMessage;
						Alert.show("Unexpected Message:\n\n" + msg.description, "Service Area Error " + msg.type);
						return;
					}
					
					var serviceAreaPolygons:Array = event.serviceAreaSolveResult.serviceAreaPolygons;
					for (var i:int = 0; i < serviceAreaPolygons.length; i++)
					{
						var polygonGraphic:Graphic = serviceAreaPolygons[i];
						//polygonGraphic.toolTip = polygonGraphic.attributes.Name;
						graphicsLayer.add(polygonGraphic);
					}
					var graphic:Graphic=new Graphic(locPoint, locSym);
					graphicsLayer.add(graphic);
					
					var fs:FeatureSet= new FeatureSet(serviceAreaPolygons);
					//loop through service area polylines
					//for (var n:Number = 0; n < event.serviceAreaSolveResult.serviceAreaPolylines.length; n++)
					//{
					//	var polylineGraphic:Graphic = event.serviceAreaSolveResult.serviceAreaPolylines[n];
					//	polylineGraphic.toolTip = polylineGraphic.attributes.Name;
					//	graphicsLayer.add(polylineGraphic);
					//}
					
					map.extent=getFeatureSetExtent(fs);
					clearMessage();
					isServiceAreaResultExist=true;
				}
			}
			
			private function getFeatureSetExtent(fs:FeatureSet):Extent
			{
				var ext:Extent;
				for each (var gra:Graphic in fs.features)
				{
					if (gra.geometry.type == Geometry.POLYGON)
					{
						var poly:Polygon=gra.geometry as Polygon;
						if (ext)
						{
							ext=ext.union(poly.extent);
						}
						else
						{
							ext=poly.extent;
						}
					}
				}
				return ext.expand(2);
			}

			private function fillFunc(g:Graphic):Symbol
			{
//				var index:String=g.attributes.index;
//				if (index == "3")
//				{
//					return fillSym1;
//				}
//				if (index == "2")
//				{
//					return fillSym2;
//				}
//				return fillSym3;
				var index:int=g.attributes.ToBreak;
				if (index == 500)
				{
					return fillSym1;
				}
				if (index == 800)
				{
					return fillSym2;
				}
				if (index == 1000)
				{
					return fillSym3;
				}
				return null;
			}

			private function clear():void
			{
				graphicsLayer.clear();
				graphicsLayer_R.clear();
				//lineGraphicsLayer.clear();
				locPoint=null;
				clearMessage();
				stops=new FeatureSet([]);
				barriers=new FeatureSet([]);
				lastRoute=new Graphic;
				graphicsLayer_R.clear();
				graphicsLayer.clear();
				isRouteExist=false;
				isServiceAreaResultExist=false;
				//lineGraphicsLayer.clear();
				//segmentGraphic=null;
				clearMessage2();
			}

			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text=msg;
				swfMessage.visible=swfVisible;
				msgVisible=true;
			}

			private function showMessage2(msg:String, swfVisible:Boolean):void
			{
				txtMessage2.text=msg;
				swfMessage2.visible=swfVisible;
				msgVisible2=true;
			}

			private function clearMessage():void
			{
				msgVisible=false;
			}

			private function clearMessage2():void
			{
				msgVisible2=false;
			}


			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible=false;
				//lineGraphicsLayer.visible=false;
				graphicsLayer_R.visible=false;
				setMapNavigation(NavigationTool.PAN, "漫游");
				stopWidgetTimer();
			}

			private function widgetOpenedHandler(event:Event):void
			{
				graphicsLayer.visible=true;
				//lineGraphicsLayer.visible=true;
				graphicsLayer_R.visible=true;
				setMapNavigation(NavigationTool.PAN, "漫游");

			}

			private function widgetMinimizedHandler(event:Event):void
			{

			}

			private function AddRouteLocTool():void
			{
				var status:String="设置必经点";
				setMapAction(DrawTool.MAPPOINT, status, null, AddRouteClick);
			}

			private function AddBarrierLocTool():void
			{
				var status:String="设置障碍点";
				setMapAction(DrawTool.MAPPOINT, status, null, AddBarrierClick);
			}

			private function AddRouteClick(event:DrawEvent):void
			{

				var stopSymbol:CompositeSymbol=new CompositeSymbol();
				var circleSym:SimpleMarkerSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 20, 0x000099);
				var textSym:TextSymbol=new TextSymbol(String(stops.features.length + 1));
				textSym.textFormat=new TextFormat("Verdana", null, null, true);
				textSym.color=0xFFFFFF;
				stopSymbol.symbols=[circleSym, textSym];
				var geom1:Geometry=event.graphic.geometry;
				var pt1:MapPoint=geom1 as MapPoint;
				var stop:Graphic=new Graphic(pt1, stopSymbol);
				graphicsLayer.add(stop);
				stops.features.push(stop);
				if (stops.features.length > 1)
				{
					//segmentGraphic=null;
					showMessage2("计算路径中....", true);
					routeTask.solve(routeParams);
				}

			}

			//FIXME:在路口设置障碍点，分析结果有问题
			private function AddBarrierClick(event:DrawEvent):void
			{
				var geomb:Geometry=event.graphic.geometry;
				var ptb:MapPoint=geomb as MapPoint;
				var barrier:Graphic=new Graphic(ptb, barrierSymbol);
				graphicsLayer.add(barrier);
				barriers.features.push(barrier);
				if (stops.features.length > 1)
				{

					//segmentGraphic=null;
					showMessage2("计算路径中.....", true);
					routeTask.solve(routeParams);
				}

			}
			private function sa_faultHandler(event:FaultEvent):void
			{
				showMessage("坐标异常，无法进行影响范围分析！详情：" + event.fault.faultDetail.toString(), false);
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				showMessage2("无法计算路径。请执行清除操作后重新设置，或者添加一个有效的必经点。 ", false);

			}

			private function solveCompleteHandler(event:RouteEvent):void
			{
				var routeResult:RouteResult=event.routeSolveResult.routeResults[0];
				lastRoute=routeResult.route;
				lastRoute.toolTip=routeResult.routeName;
				graphicsLayer_R.graphicProvider=lastRoute;
				var num:Number=(Number)(lastRoute.attributes.Total_Length);
				txtRouteLength.text=num.toFixed(2);
				isRouteExist=true;
				clearMessage2();
				
			}

			private function startWidgetTimer():void
			{
				if (queryRefreshRate)
				{
					var seconds:Number=Number(queryRefreshRate);
					var rate:Number=seconds * 1000;
					stopWidgetTimer();
					timer=new Timer(rate);
					timer.addEventListener(TimerEvent.TIMER, timerTick);
					timer.start();
				}
			}

			private function stopWidgetTimer():void
			{
				if (timer != null)
				{
					if (timer.running)
						timer.stop();
				}
			}

			private function timerTick(evt:TimerEvent):void
			{
				var queryLayer:String=respointservice;
				var queryTask:QueryTask=new QueryTask(queryLayer);

				var query:Query=new Query();
				query.where="where are they";
				query.returnGeometry=true;
				//query.outSpatialReference = map.spatialReference;
				queryTask.showBusyCursor=true;
				try
				{
					queryTask.execute(query, new AsyncResponder(ongraphicalResult, ongraphicalFault));
				}
				catch (error:Error)
				{
					Alert.show(error.toString());
						//showMessage(error.message, false);
				}

				//showMessage(loadingLabel, true); 
				function ongraphicalResult(featureSet:FeatureSet, token:Object=null):void
				{
					setMapNavigation(NavigationTool.PAN, "漫游");
					graphicsLayer.clear();
					if (featureSet.features.length > 0)
					{
						try
						{
							for each (var gra:Graphic in featureSet.features)
							{
								var mp:MapPoint=gra.geometry as MapPoint;
								//map.centerAt(mp);
								gra.addEventListener(MouseEvent.ROLL_OVER, mouseOverGraphic);
								gra.addEventListener(MouseEvent.ROLL_OUT, mouseOutGraphic);
								gra.addEventListener(MouseEvent.MOUSE_DOWN, mouseOutGraphic);
								gra.symbol=locSym;
								graphicsLayer.add(gra);
							}
						}
						catch (error:Error)
						{
							Alert.show("出错了！\n" + error.message);
								//showMessage(error.message, false);
						}
					}
					else
					{
						graphicsLayer.clear();
						showMessage("暂无符合条件的记录！", false);
					}

				}
				function ongraphicalFault(info:Object, token:Object=null):void
				{
					Alert.show(info.toString());
					setMapNavigation(NavigationTool.PAN, "漫游");
				}
			}

			private function mouseOverGraphic(event:MouseEvent):void
			{
				if (startImg.toolTip == "暂停")
				{
					switchState();
					isPaused=false;
				}

				var gra:Graphic=event.currentTarget as Graphic;
				var mapPoint:MapPoint=gra.geometry as MapPoint;
				var point:Point=map.toScreen(mapPoint);
				var tip:String="";
				var value:String;
				var fld:String;
				var obj:Object=gra.attributes;

				for (fld in obj)
				{
					value=obj[fld].toString();
					tip+=fld + ": " + value + "\n";
				}
				rightTip=ToolTipManager.createToolTip(tip, point.x, point.y - 12) as ToolTip;
				rightTip.setStyle("styleName", "ArrowTip");

			}

			private function mouseOutGraphic(event:MouseEvent):void
			{
				if (startImg.toolTip == "继续" && !isPaused)
				{
					switchState();
				}

				if (rightTip)
				{
					ToolTipManager.destroyToolTip(rightTip);
					rightTip=null;
				}
			}


			private function switchState():void
			{
				switch (startImg.toolTip)
				{
					case "开始":
					{
						startWidgetTimer();
						startImg.toolTip="暂停";
						startImg.source="assets/images/icons/b_pause.png";
						break;
					}
					case "暂停":
					{
						stopWidgetTimer();
						startImg.toolTip="继续";
						startImg.source="assets/images/icons/b_play.png";
						isPaused=true;
						break;
					}
					case "继续":
					{
						startWidgetTimer();
						startImg.toolTip="暂停";
						startImg.source="assets/images/icons/b_pause.png";
						break;
					}
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<esri:ServiceAreaTask id="saTask"
							  concurrency="last"
							  fault="sa_faultHandler(event)"
							  requestTimeout="30"
							  showBusyCursor="true"
							  solveComplete="sa_solveCompleteHandler(event)"
							  url=""/>
		
		<esri:ServiceAreaParameters id="saParams"
									defaultBreaks="{[500, 800, 1000]}"
									outSpatialReference="{map.spatialReference}"
									outputPolygons="esriNAOutputPolygonDetailed"
									returnFacilities="false"
									splitPolygonsAtBreaks="true"/>

		
		<esri:Geoprocessor id="serviceAreaService"
						   updateDelay="3000"/>
	
		<esri:RouteTask id="routeTask"
						concurrency="last"
						fault="faultHandler(event)"
						requestTimeout="30"
						showBusyCursor="true"
						solveComplete="solveCompleteHandler(event)"/>
	
		<esri:RouteParameters id="routeParams"
							  stops="{stops}"
							  pointBarriers="{barriers}"/>
	
		<esri:SimpleMarkerSymbol id="barrierSymbol2"
								 size="15"
								 style="x"
								 color="0xFF0000">
			<esri:SimpleLineSymbol width="4"/>
		</esri:SimpleMarkerSymbol>
	
		<esri:PictureMarkerSymbol id="barrierSymbol"
								  source="assets/images/icons/i_road-closed.png"/>
	
		<esri:SimpleLineSymbol id="routeSymbol"
							   color="0x000099"
							   alpha="0.6"
							   width="5"/>
	
		<esri:SimpleLineSymbol id="segmentSymbol"
							   color="0xFF0000"
							   alpha="0.5"
							   width="8"/>
	</fx:Declarations>
	<viewer:WidgetTemplate id="wTemplate"
						   closed="widgetClosedHandler(event)"
					 open="widgetOpenedHandler(event)"
					 minimized="widgetMinimizedHandler(event)">
		<s:VGroup id="serviceArea"
				 width="100%" height="90%"
				 visible="false"
				 visible.serviceArea="true"
				 >
			<s:VGroup width="100%"
					 height="100%">
				<mx:Form id="frmDraw"
						 verticalScrollPolicy="off"
						 paddingBottom="0"
						 width="100%"
						 paddingTop="0">
					<mx:Text text="添加一个中心点，查询按道路扩散的影响范围："
							 styleName="WidgetText"
							 width="100%"/>

					<mx:FormItem label="设定中心点"
								 styleName="WidgetText"
								 width="100%"
								 direction="horizontal">
						<mx:Image click="activateTool()"
								  source="assets/images/w_addstart.png"
								  useHandCursor="true"
								  buttonMode="true"
								  toolTip="添加中心点"
								  width="20"
								  height="20"/>
					</mx:FormItem>

					<mx:HRule styleName="BannerRule"
							  width="100%"/>

					<mx:Text text="0-500米，500-800米，800米-1000米路径的影响范围"
							 styleName="WidgetText"
							 width="100%"/>
				</mx:Form>

				<s:HGroup horizontalAlign="center"
						 width="100%"
						 >
					<mx:Button label="清除"
							   icon="{Clear}"
							   click="clear()"/>
				</s:HGroup>

				<s:HGroup id="boxMessage"
						 visible="{msgVisible}"
						 includeInLayout="{msgVisible}"
						 width="100%">
					<mx:SWFLoader id="swfMessage"
								  source="assets/flash/loader.swf"
								  visible="false"/>

					<mx:Text id="txtMessage"
							 text=""
							 styleName="WidgetText"
							 width="90%"/>
				</s:HGroup>
				</s:VGroup>
			</s:VGroup>

			<mx:VBox id="route"
					 width="100%" height="90%"
					 visible="false"
					 visible.route="true"   horizontalAlign="center"
					 >
				<mx:HBox id="tipMessage"
						 width="100%"
						 horizontalAlign="center"
						 paddingTop="15">
					<mx:Text id="tipText"
							 text="选择添加驻点或设置障碍点："
							 styleName="WidgetText"/>
				</mx:HBox>

				<mx:HBox  horizontalCenter="center" >
					<mx:Image click="AddRouteLocTool()"
							  source="assets/images/icons/i_stops.png"
							  useHandCursor="true"
							  buttonMode="true"
							  toolTip="设置必经点"
							  width="32"
							  height="32"/>

					<mx:Image click="AddBarrierLocTool()"
							  source="assets/images/icons/i_barrier.png"
							  useHandCursor="true"
							  buttonMode="true"
							  toolTip="设置障碍点"
							  width="32"
							  height="32"/>

					<mx:Image source="assets/images/icons/i_delete.png"
							  useHandCursor="true"
							  buttonMode="true"
							  toolTip="清除"
							  width="32"
							  height="32">
						<mx:click>
							<![CDATA[
								stops=new FeatureSet([]);
								barriers=new FeatureSet([]);
								lastRoute=new Graphic;
								graphicsLayer_R.clear();
								graphicsLayer.clear();
								//lineGraphicsLayer.clear();
								//segmentGraphic=null;
								clearMessage();
							]]>
						</mx:click>
					</mx:Image>
				</mx:HBox>
				<mx:HBox width="90%"
						 verticalAlign="middle"
						 horizontalAlign="center"
						 horizontalGap="10">
					
					<mx:Label text="路径长度："
							  styleName="WidgetText" />
					
					<mx:TextInput id="txtRouteLength"
								  width="100" editable="false"
								  text=""/>
					<mx:Label text="米"
							  styleName="WidgetText" />
				</mx:HBox>
				<mx:HBox id="boxMessage2"
						 visible="{msgVisible2}"
						 includeInLayout="{msgVisible2}"
						 width="100%">
					<mx:SWFLoader id="swfMessage2"
								  source="assets/flash/loader.swf"
								  visible="false"/>

					<mx:Text id="txtMessage2"
							 text=""
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				
			</mx:VBox>

			<s:VGroup id="GPSRes"
					 width="100%" height="90%"
					 visible="false"
					 >
				<mx:Text styleName="WidgetText"
						 text="点击播放按钮开始动态资源监测。"
						 paddingTop="15"/>
				<s:HGroup paddingTop="20"
						  >
					<mx:Image id="startImg"
							  source="assets/images/icons/b_play.png"
							  click="switchState()"
							  useHandCursor="true"
							  buttonMode="true"
							  toolTip="开始"
							  width="30"
							  height="30"/>

					<mx:Image id="stopImg"
							  source="assets/images/icons/b_stop.png"
							  click="stopWidgetTimer();clear();startImg.source='assets/images/icons/b_play.png';startImg.toolTip='开始'"
							  useHandCursor="true"
							  buttonMode="true"
							  toolTip="停止"
							  width="30"
							  height="30"/>
				</s:HGroup>


			</s:VGroup>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
