<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:viewer="com.esri.viewer.*"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   widgetConfigLoaded="init();"
				   xmlns:circle="com.wonders.circle.*"
				   xmlns:comp="com.esri.viewer.components.*"
				   xmlns:Query="widgets.Query.*">
	<fx:Script>
		<![CDATA[
			import adobe.utils.CustomActions;
			import com.adobe.serialization.json.JSON;
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.components.supportClasses.StringField;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Multipoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.BufferParameters;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.DataGridColumnFontItemRender;
			import com.esri.viewer.utils.UtilsClass;
			import com.wonders.circle.CustomDraw;
			import com.wonders.polygontopoint.PolygonToPointLayer;
			import com.esri.viewer.utils.UrlUtil;
			import com.esri.ags.geometry.Extent;
			import flash.net.URLRequest;
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.graphics.IFill;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.StringUtil;
			
			import spark.components.supportClasses.ItemRenderer;
			
			import widgets.InfoTemplates.InfoPopupWidget;
			
			private var graphicPointSym:PictureMarkerSymbol;
			
			private const ICON_URL:String=UrlUtil.URL_DOMAIN + "assets/images/icons/";
			
			[Bindable]
			[Embed(source="assets/images/icons/i_redclear.png")]
			public var Clear:Class;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_query.png")]
			public var Search:Class;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_dk_information1.png")]
			public var Information:Class;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_information.png")]
			public var DK_Information:Class;
			[Bindable]
			[Embed(source="assets/images/icons/i_back.png")]
			public var Back:Class;
			
			[Bindable]
			private var msgVisible:Boolean=false;
			
			[Bindable]
			private var cdzxMsgVisible:Boolean=false;
			[Bindable]
			private var cdxgMsgVisible:Boolean=false;
			
			[Bindable]
			private var dk_msgVisible:Boolean=false;
			
			private var graphicsLayer:GraphicsLayer;
			
			private var plotGraphicsLayer:GraphicsLayer;
			
			private var dawGraphicsLayer:GraphicsLayer;
			
			private var extentGraphicsLayer:PolygonToPointLayer;
			
			private var cdzxlayer:GraphicsLayer;
			
			private var cdxglayer:GraphicsLayer;
			
			private var circleDraw:CustomDraw;
			
			[Bindable]
			private var gridVisible:Boolean=false;
			[Bindable]
			private var cdzxGridVisible:Boolean=false;
			[Bindable]
			private var cdxgGridVisible:Boolean=false;
			
			[Bindable]
			private var dk_gridVisible:Boolean=false;
			[Bindable]
			public var planTxtStr:String;
			
			private var linkURL:String;
			
			private var extentUrl:String;
			private var xxghExtentUrl:String;
			private var extentGraphicalsearchlabel:String;
			private var extentFields:String;
			private var xxghFields:String;
			private var extentTitlefield:String;
			private var extentLinkfield:String;
			
			private var areaUrl:String;
			private var areaGraphicalsearchlabel:String;
			private var areaFields:String;
			private var areaTitlefield:String;
			private var areaLinkfield:String;
			private var resultFWFields:Array;
			private var resultXGFWFields:Array;
			private var resultFWFieldsCN:Array;
			private var fwFieldsCNStr:String;
			private var xxghFieldsCNStr:String;
			private var resultXGFWFieldsCN:Array;
			private var resultDKFields:Array;
			private var resultDKFieldsCN:Array;
			private var dkFieldsCNStr:String;
			private var lys:ArcGISDynamicMapServiceLayer;
			private var wTitle:String="";
			private var xgfwCountUrl="";
			private var xgfwCountTable="";
			private var xgfwColcum="";
			//查询范围id
			private var queryRange:Number;
			
			private function init():void
			{
				graphicsLayer=new GraphicsLayer;
				plotGraphicsLayer=new GraphicsLayer;
				plotGraphicsLayer.addEventListener(MouseEvent.CLICK,plotMouseClickGraphic);
				dawGraphicsLayer=new GraphicsLayer;
				extentGraphicsLayer=new PolygonToPointLayer(map);
				extentGraphicsLayer.addEventListener(MouseEvent.CLICK,extentMouseClickGraphic);
				cdzxlayer=new GraphicsLayer;
				cdzxlayer.addEventListener(MouseEvent.CLICK,cdzxMouseClickGraphic);
				cdxglayer=new GraphicsLayer;
				cdxglayer.addEventListener(MouseEvent.CLICK,cdxgMouseClickGraphic);
				map.addLayer(dawGraphicsLayer);
				map.addLayer(extentGraphicsLayer);
				map.addLayer(graphicsLayer);
				map.addLayer(plotGraphicsLayer);
				map.addLayer(cdzxlayer);
				map.addLayer(cdxglayer);
				glowLayer.addEventListener(MouseEvent.CLICK,extentMouseClickGraphic);
				map.addLayer(glowLayer);
				setMapNavigation(NavigationTool.PAN, "漫游");
				lys =map.getLayer("专业图层") as ArcGISDynamicMapServiceLayer;
				//将动态地图放到顶层来显示
				map.reorderLayer(lys.id,map.layerIds.length as int);
				if (configXML)
				{
					queryRange = configXML.queyRange;

					xgfwCountUrl=configXML.layers.xgfw_count.url.toString();
					xgfwCountTable=configXML.layers.xgfw_count.table.toString();
					xgfwColcum = configXML.layers.xgfw_count.column.toString();
					
					extentUrl = configData.gisdata_UrlROOT + configXML.layers.extentLayer.url;
					xxghExtentUrl=configData.gisdata_UrlROOT + configXML.xxghExtentUrl;
					
					xxghFields=configXML.xxghFields;
					resultXGFWFields = xxghFields.split(",");
					xxghFieldsCNStr = configXML.xxghFieldsCNStr;
					resultXGFWFieldsCN = xxghFieldsCNStr.split(",");
					
					extentGraphicalsearchlabel=configXML.layers.extentLayer.graphicalsearchlabel;
					extentTitlefield=configXML.layers.extentLayer.titlefield;
					extentLinkfield=configXML.layers.extentLayer.linkfield;
					extentFields=configXML.layers.extentLayer.fields;
					resultFWFields = extentFields.split(",");
					fwFieldsCNStr = configXML.layers.extentLayer.fieldsCN;
					resultFWFieldsCN = fwFieldsCNStr.split(",");
					
					areaUrl = configData.gisdata_UrlROOT + configXML.layers.areaLayer.url;
					areaGraphicalsearchlabel=configXML.layers.areaLayer.graphicalsearchlabel;
					areaFields=configXML.layers.areaLayer.fields;
					areaTitlefield=configXML.layers.areaLayer.titlefield;
					areaLinkfield=configXML.layers.areaLayer.linkfield;
					dkFieldsCNStr = configXML.layers.areaLayer.fieldsCN;
					resultDKFields = areaFields.split(",");
					resultDKFieldsCN = dkFieldsCNStr.split(",");
					
					linkURL =configData.project_UrlROOT + configXML.linkURL;
					
					graphicallb.text = extentGraphicalsearchlabel;
				}
				lysShow();
				wTemplate.addTitlebarButton(ICON_URL + "i_atquery.png", "专项规划属性查询", showStateCoordinates);
				//wTemplate.addTitlebarButton(ICON_URL + "i_spquery.png", "专项规划空间查询", showStateAddress);
				wTemplate.addTitlebarButton(ICON_URL +"i_table.png", "专项规划信息", showStateResults);
				//初始圆选工具
				circleTool.map=map;
				circleTool.graphicsLayer=dawGraphicsLayer;
				circleTool.displayRadius=false;
				circleTool.displayCenter=true;
				
				ViewerContainer.addEventListener(AppEvent.GHDataGridClick,infomationHandler);
				DKSymbol.getInstance();
				FWSymbol.getInstance();
				
				if(configData.preloadWidget.search("Ce")!=-1&&configData.preSearchStr&&configData.preSearchStr!=""){
					
					planCode.text=decodeURI(configData.preSearchStr);
					textQuery();
				}
			}
			
			private function lysShow(){
				var leftmin  = configData.extentdata_LEFTMIN ;
				var leftmax  = configData.extentdata_LEFTMAX ;
				var rightmin = configData.extentdata_RIGHTMIN ;
				var rightmax = configData.extentdata_RIGHTMAX ;				
				var extent:Extent = new Extent(leftmin , rightmin , leftmax , rightmax);
				map.extent = extent;
				var visibleLayerAC:ArrayCollection=new ArrayCollection;
				visibleLayerAC.addItem(queryRange);
				lys.visibleLayers = visibleLayerAC;
				lys.visible = true;
				lys.alpha = 0.7;
				
			}
			private function getLayerExpr(event:AppEvent):void
			{
				var obj:Object=event.data;
				var name:String=obj.name.toString();
				var gname:String=obj.gname.toString();
				var startdate:String=obj.startdate.toString();
				var enddate:String=obj.enddate.toString();
				
				planName.text = name;
				planCode.text = gname;
				textQuery();
			}
			
			public static function URLEncodeChange(p:String,chartSet:String):String
			{
				var result:String ="";
				var byte:ByteArray =new ByteArray();
				byte.writeMultiByte(p,chartSet);
				for(var i:int;i<byte.length;i++)
				{
					result += escape(String.fromCharCode(byte[i]));
				}
				return result;
			}
			
			
			private function queryWidgetClosed():void
			{
				glowLayer.visible=false;
				graphicsLayer.visible=false;
				plotGraphicsLayer.visible=false;
				dawGraphicsLayer.visible=false;
				extentGraphicsLayer.visible=false;
				cdzxlayer.visible=false;
				cdxglayer.visible=false;
				lys.visible = false;
				setMapNavigation(NavigationTool.PAN, "漫游");
				this.showInfoWindow(null);
			}
			
			private function queryWidgetOpened():void
			{
				if(extentGraphicsLayer)
				{
					glowLayer.visible=true;
					graphicsLayer.visible=true;
					plotGraphicsLayer.visible=false;
					dawGraphicsLayer.visible=true;
					extentGraphicsLayer.visible=true;
					showStateAddress();
				}
				if(wTitle!="")
				{
					wTemplate.widgetTitle=wTitle;
				}
				if(lys){
					lysShow();
				}
				setMapNavigation(NavigationTool.PAN, "漫游");
			}
			
			private function showStateAddress():void
			{
				viewStack.selectedIndex=1;
				wTemplate.selectedTitlebarButtonIndex=1;
				dawGraphicsLayer.visible=true;
				wTemplate.widgetTitle="专项规划空间查询";
			}
			private  function showCDZXResults():void
			{
				this.showInfoWindow(null);
				cdzxlayer.visible=true;
				cdxglayer.visible=false;
				extentGraphicsLayer.visible=false;
				plotGraphicsLayer.visible=false;
				graphicsLayer.visible=false;
				lys.visible = false;
				viewStack.selectedIndex=3;
				wTemplate.selectedTitlebarButtonIndex=3;
				wTemplate.widgetTitle="重叠规划信息";
			}
			private  function showCDXGResults():void
			{
				this.showInfoWindow(null);
				cdxglayer.visible=true;
				cdzxlayer.visible=false;
				extentGraphicsLayer.visible=false;
				plotGraphicsLayer.visible=false;
				graphicsLayer.visible=false;
				lys.visible = false;
				viewStack.selectedIndex=4;
				wTemplate.selectedTitlebarButtonIndex=4;
				wTemplate.widgetTitle="重叠详规信息";
			}
			private function showStateCoordinates():void
			{
				this.showInfoWindow(null);
				viewStack.selectedIndex=0;
				wTemplate.selectedTitlebarButtonIndex=0;
				wTemplate.widgetTitle="专项规划属性查询";
			}
			
			private function showStateResults():void
			{
				glowLayer.clear();
				this.showInfoWindow(null);
				extentGraphicsLayer.visible=true;
				plotGraphicsLayer.visible=false;
				graphicsLayer.visible=false;
				cdzxlayer.visible=false;
				cdxglayer.visible=false;
				lys.visible = false;
				viewStack.selectedIndex=2;
				wTemplate.selectedTitlebarButtonIndex=2;
				wTemplate.widgetTitle="专项规划查询结果";
				dawGraphicsLayer.visible=true;
			}
			
			private function showDKResults():void
			{
				this.showInfoWindow(null);
				cdzxlayer.visible=false;
				cdxglayer.visible=false;
				extentGraphicsLayer.visible=false;
				plotGraphicsLayer.visible=true;
				graphicsLayer.visible=true;
				lys.visible = true;
				viewStack.selectedIndex=5;
				wTemplate.selectedTitlebarButtonIndex=5;
				wTemplate.widgetTitle="专项规划地块查询结果";
			}
			private function tableCountQuery(XZ_ID:String):void
			{
				//先查询一下这个图层数据的总数
				CursorManager.setBusyCursor();
				if (xgfwCountUrl)
				{
					var whereStr:String = "where 1=1";
					whereStr+=" and "+XZ_ID;
					var httpCount:HTTPService=new HTTPService();
					httpCount.url=xgfwCountUrl;
					httpCount.resultFormat="e4x";
					httpCount.method="post";
					httpCount.addEventListener(ResultEvent.RESULT, count_onResult);
					httpCount.addEventListener(FaultEvent.FAULT, count_onFault);
					var random:Number=Math.random();
					var obj:Object=new Object();
					obj.table=xgfwCountTable;
					obj.database="sde";
					obj.action="query";
					obj.column=xgfwColcum;
					obj.tablename = xgfwCountTable;
					obj.whereClause = whereStr;
					obj.random=random;
					httpCount.send(obj);
					function count_onResult(event:ResultEvent):void
					{
						var count:String  = JSON.decode(event.result.toString());
						CursorManager.removeBusyCursor();
						queryDataGridItem.headerText="专项规划信息(合计"+count+"条)";
						
					}	
					function count_onFault(event:FaultEvent):void
					{
						showMessage("没有查询到相关信息", false,true);
						CursorManager.removeBusyCursor();
					}
				}
			}
			private function textQuery():void
			{
				CursorManager.setBusyCursor();
				this.showInfoWindow(null);
				graphicsLayer.clear();
				plotGraphicsLayer.clear();
				dawGraphicsLayer.clear();
				extentGraphicsLayer.clear();
				glowLayer.clear();
				gridVisible=false;
				lys.visible = false;
				queryDataGrid.dataProvider=null;
				dk_gridVisible=false;
				queryDKDataGrid.dataProvider=null;
				
				showMessage("正在查询...",true,true);
				showStateResults();
				setMapNavigation(NavigationTool.PAN, "漫游");
				if (extentUrl)
				{
					var queryTask:QueryTask=new QueryTask(extentUrl);
					var query:Query=new Query();
					var expr:String = "PLAN_TYPE='专项规划'";
					if(planCode.text!=""){
						expr += " and PLAN_NUM like '%" + StringUtil.trim(planCode.text )+ "%'";
					}
					if(planName.text!=""){
						expr += " and PLAN_NAME like '%" + StringUtil.trim(planName.text) + "%'";
					}
					tableCountQuery(expr);
					query.where=expr;
					query.outFields=extentFields.split(",");
					query.returnGeometry=true;
					queryTask.showBusyCursor=true;
					queryTask.execute(query, new AsyncResponder(ontextResult, ontextFault));
					showMessage("正在查询...", true,true);
				}
				else
				{
					showStateResults();
					showMessage("查询图层不存在", false,true);
				}
				
			}
			
			//on fault
			private function ontextFault(info:Object, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				showMessage(info.toString(), false,true);
				showStateResults();
			}
			
			private function ontextResult(featureSet:FeatureSet, token:Object=null):void
			{
				if (featureSet.features.length > 0)
				{
					try
					{
						var recAC:ArrayCollection=createRecordData(featureSet,extentGraphicsLayer,FWSymbol.zxGraphicSymbol);
						queryDataGridItem.headerText="专项规划信息(合计"+recAC.length.toString()+"条)";
						queryDataGrid.dataProvider=recAC;
						UtilsClass.zoomToGraphics(map,extentGraphicsLayer);
						gridVisible=true;
						showMessage("", false,false);
					}
					catch (error:Error)
					{
						showMessage(error.message, false,true);
					}
				}
				else
				{
					showMessage("暂无符合条件的记录!", false,true);
				}
				
				CursorManager.removeBusyCursor();
			}
			
			private function polygonQuery(value:String):void
			{
				graphicsLayer.clear();
				plotGraphicsLayer.clear();
				dawGraphicsLayer.clear();
				extentGraphicsLayer.clear();
				glowLayer.clear();
				this.showInfoWindow(null);
				setMapNavigation(NavigationTool.PAN, "漫游");
				switch (value)
				{
					case DrawTool.POLYGON:
					{
						setMapAction(value, "多边形",new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, 0x3FAFDC, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0x3FAFDC, 1, 1)), drawEnd);
						break;
					}
					case DrawTool.EXTENT:
					{
						setMapAction(value, "框选", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, 0x3FAFDC, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0x3FAFDC, 1, 1)), drawEnd);
						break;
					}
					case "CIRCLE":
					{
						setMapAction(value, "圆选", null,null);
						circleTool.activate(CustomDraw.CIRCLE);
						break;
					}
					case DrawTool.POLYLINE:
					{
						setMapAction(value, "线形",new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0x3FAFDC, 1, 1), drawEnd);
						break;
					}
				}
				
			}
			
			//绘制完成，在graphiclayer上添加graphic 并将该多边形的点位传送给服务器端
			private function drawEnd(event:DrawEvent):void
			{
				CursorManager.setBusyCursor();
				graphicsLayer.clear();
				plotGraphicsLayer.clear();
				dawGraphicsLayer.clear();
				extentGraphicsLayer.clear();
				glowLayer.clear();
				gridVisible=false;
				lys.visible = false;
				queryDataGrid.dataProvider=null;
				dk_gridVisible=false;
				queryDKDataGrid.dataProvider=null;
				showStateResults();
				showMessage("正在查询...", true,true);
				circleTool.deactivate();
				setMapNavigation(NavigationTool.PAN,"漫游");
				var gra:Graphic=event.graphic as Graphic;
				
				if (gra.attributes)
				{
					if (gra.attributes.type == CustomDraw.CUSTOM_CIRCLE)
					{
						//TODO:是否需要添加中心点
						var obj:Object=gra.attributes;
						bufferRadius_txt.text=Number(obj.radius).toFixed(0);
					}
					
				}
				gra.symbol=FWSymbol.zxDrawGraphicSymbol;
				dawGraphicsLayer.add(gra);
				exeQuery(event.graphic.geometry);
			}
			
			private function exeQuery(geometry:Geometry):void
			{
				if ((extentUrl) && (geometry))
				{
					var queryTask:QueryTask=new QueryTask(extentUrl);
					var query:Query=new Query();
					query.outFields=extentFields.split(",");
					var expr:String = "PLAN_TYPE='专项规划'";
					if(planCode.text!=""){
						//expr += " and PLAN_NUM like '%" + StringUtil.trim(planCode.text) + "%'";
					}
					if(planName.text!=""){
						//expr += " and PLAN_NAME like '%" +StringUtil.trim( planName.text )+ "%'";
					}
					query.where=expr;
					query.returnGeometry=true;
					query.geometry=geometry;
					try
					{
						queryTask.execute(query, new AsyncResponder(ongraphicalResult, ongraphicalFault));
					}
					catch (error:Error)
					{
						Alert.show(error.toString());
					}
				}
			}
			//on fault
			private function ongraphicalFault(info:Object, token:Object=null):void
			{
				//Alert.show(info.toString());
				setMapNavigation(NavigationTool.PAN, "漫游");
				gridVisible=false;
				queryDataGrid.dataProvider=null;
				dk_gridVisible=false;
				queryDKDataGrid.dataProvider=null;
				showMessage(info.toString(), false,true);
			}
			private function ongraphicalResult(featureSet:FeatureSet, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				gridVisible=false;
				queryDataGrid.dataProvider=null;
				dk_gridVisible=false;
				queryDKDataGrid.dataProvider=null;
				setMapNavigation(NavigationTool.PAN, "漫游");
				if (featureSet.features.length > 0)
				{
					try
					{
						var recAC:ArrayCollection=createRecordData(featureSet,extentGraphicsLayer,FWSymbol.zxGraphicSymbol);
						queryDataGridItem.headerText="专项规划信息(合计"+recAC.length.toString()+"条)";
						queryDataGrid.dataProvider=recAC;
						showMessage("", false,false);
						gridVisible=true;
					}
					catch (error:Error)
					{
						showMessage(error.message, false,true);
					}
				}
				else
				{
					showMessage("暂无符合条件的记录！", false,true);
				}
				
			}
			private function clear():void
			{
				
				graphicsLayer.clear();
				plotGraphicsLayer.clear();
				dawGraphicsLayer.clear();
				extentGraphicsLayer.clear();
				glowLayer.clear();
				this.showInfoWindow(null);
				bufferRadius_txt.text="";
				queryDataGrid.dataProvider=null;
				gridVisible=false;
				msgVisible=false;
				queryDKDataGrid.dataProvider=null;
				dk_gridVisible=false;
				dk_msgVisible=false;
				circleTool.deactivate();
				setMapNavigation(NavigationTool.PAN, "漫游");
			}
			/**
			 * 获取多边形中心点
			 * */
			private function getGeomCenter(gra:Graphic):MapPoint
			{
				var pt:MapPoint;
				switch (gra.geometry.type)
				{
					case Geometry.MULTIPOINT:
					{
						var multiPoint:Multipoint=Multipoint(gra.geometry);
						pt=MapPoint(multiPoint.points[0]);
						break;
						
					}
					case Geometry.MAPPOINT:
					{
						pt=gra.geometry as MapPoint;
						break;
					}
						
					case Geometry.POLYLINE:
					{
						var pl:Polyline=gra.geometry as Polyline;
						var pathCount:Number=pl.paths.length;
						var pathIndex:int=int((pathCount / 2) - 1);
						var midPath:Array=pl.paths[pathIndex];
						var ptCount:Number=midPath.length;
						var ptIndex:int=int((ptCount / 2) - 1);
						pt=pl.getPoint(pathIndex, ptIndex);
						break;
					}
						
					case Geometry.POLYGON:
					{
						var poly:Polygon=gra.geometry as Polygon;
						pt=poly.extent.center;
						break;
					}
						
				}
				return pt;
			}
			
			private function extentMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				if(graphic==null){
					graphic=event.target.parent  as Graphic;
				}
				if(graphic!=null){
					
					if(graphic.geometry is Polygon){
						glowLayer.clear();
						var gra:Graphic=new Graphic(graphic.geometry,FWSymbol.xgSelectedGraphicSymbol,graphic.attributes);
						glowLayer.add(gra);
					}
					var infoData:Object=graphic.attributes;
					infoData.label = "查看专项规划范围信息";
					this.showInfoWindow(infoData);
				}
			}
			private function cdxgMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				var infoData:Object=graphic.attributes;
				infoData.label = "查看重叠详规信息";
				this.showInfoWindow(infoData);
			}
			private function cdzxMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				var infoData:Object=graphic.attributes;
				infoData.label ="重叠专项规划信息";
				this.showInfoWindow(infoData);
			}
			private function plotMouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				var infoData:Object=graphic.attributes;
				infoData.label = "查看专项规划地块信息";
				this.showInfoWindow(infoData);
			}
			
		
			private function mouseOutGraphic(event:MouseEvent):void
			{
				var gra:Graphic=event.currentTarget as Graphic;
				this.showInfoWindow(null);
			}
			
			private function createRecordData(featureSet:FeatureSet,layer:GraphicsLayer,symbol:SimpleFillSymbol):ArrayCollection
			{
				layer.clear();
				var recAC:ArrayCollection=new ArrayCollection();
				for each (var gra:Graphic in featureSet.features)
				{
					gra.symbol=symbol;
					//数据构造部分
					var obj:Object=gra.attributes;
					var fld:String;
					var value:String;
					var title:String;
					var content:String="";
					var link:String="";
					var point:MapPoint=getGeomCenter(gra);
					var fldAliases:Object=featureSet.fieldAliases;
					var plan_num:String;
					var temp:String;
					//判断是Title还是Content
					for (fld in obj)
					{
						value=obj[fld].toString();
						
						if (fld.toUpperCase() == extentTitlefield.toUpperCase())
						{
							title=value;
							if (!title)
								title=widgetTitle;
						}
						if (fld.toUpperCase() == extentLinkfield.toUpperCase())
						{
							plan_num = value;
							link=linkURL+value;
						}
					}
					for(var i:int = 0;i < resultFWFieldsCN.length;i++ ){
						temp = resultFWFields[i].toString();
						if("TOT_AREA" == temp){
							var areaNum:Number=Number(obj[temp]);
							obj[temp]=areaNum.toFixed(2);
							content+=resultFWFieldsCN[i].toString() + ": " + obj[temp] + " 公顷;";
						}
						else if(temp=="START_DATE"||temp=="END_DATE")
						{
							var df:DateFormatter= new DateFormatter();
							df.formatString='YYYY-MM-DD';
							var date:Date=new Date(obj[temp]);
							obj[temp] = df.format(date);
							content+=resultFWFieldsCN[i].toString() + ": " + obj[temp];
						}
							
						else{
							content+=resultFWFieldsCN[i].toString() + ": " + obj[temp] + ";";
						}
					}
					var infoData:Object={icon: icon,plan_num:plan_num, title: title,type:"zxgh", content: content, link: link, point: point, graphic:gra};
					
					gra.attributes=infoData;
					layer.add(gra);
					recAC.addItem(infoData);
					
				}
				return recAC;
			}
			private function queryDKDataGrid_dataDKGridClick(event:ListEvent):void
			{
				var infoData:Object=queryDKDataGrid.dataProvider[event.rowIndex];
				var pt:MapPoint=infoData.point;
				map.centerAt(pt);
				infoData.label = "查看专项规划地块信息";
				this.showInfoWindow(infoData);
			}
			private function dataGridClick(event:ListEvent):void
			{
				glowLayer.clear();
				var infoData:Object=queryDataGrid.dataProvider[event.rowIndex];
				var graphic:Graphic;
				if(infoData.graphic.geometry is MapPoint){
					graphic=new Graphic(infoData.polygon,FWSymbol.zxSelectedGraphicSymbol,infoData.graphic.attributes);
				}else{
					graphic=new Graphic(infoData.graphic.geometry,FWSymbol.zxSelectedGraphicSymbol,infoData.graphic.attributes);
				}
				glowLayer.add(graphic);
				UtilsClass.zoomToGraphics(map,glowLayer);
				infoData.label = "查看专项规划范围信息";
				this.showInfoWindow(infoData);
			}
			
			private function cdzxDataGridClick(event:ListEvent):void
			{
				glowLayer.clear();
				var infoData:Object=cdzxDataGrid.dataProvider[event.rowIndex];
				if(infoData.graphic.geometry is MapPoint){
					map.centerAt(infoData.graphic.geometry as MapPoint)
					
				}else{
					
					var graphic:Graphic=infoData.graphic;
					var glowGraphic:Graphic=new Graphic(graphic.geometry,FWSymbol.zxSelectedGraphicSymbol,graphic.attributes);
					glowLayer.add(glowGraphic);
					map.extent=graphic.geometry.extent.expand(2.5);
				}
				infoData.label ="重叠专项规划信息";
				this.showInfoWindow(infoData);
			}
			private function cdxgDataGridClick(event:ListEvent):void
			{
				glowLayer.clear();
				var infoData:Object=cdxgDataGrid.dataProvider[event.rowIndex];
				if(infoData.graphic.geometry is MapPoint){
					map.centerAt(infoData.graphic.geometry as MapPoint)
					
				}else{
					var graphic:Graphic=infoData.graphic;
					var glowGraphic:Graphic=new Graphic(graphic.geometry,FWSymbol.zxSelectedGraphicSymbol,graphic.attributes);
					glowLayer.add(glowGraphic);
					map.extent=graphic.geometry.extent.expand(2.5);
				}
				infoData.label = "查看重叠详规信息";
				this.showInfoWindow(infoData);
				
			}
			override public function showInfoWindow(infoData:Object):void
			{
				if (infoData)
				{
					var infoTemplate:InfoPopupWidget = new InfoPopupWidget();
					map.infoWindow.setStyle("contentBackgroundAlpha", 0.95);
					map.infoWindow.setStyle("backgroundAlpha", 0.95);
					map.infoWindow.setStyle("backgroundColor", 0xCBE5FE);
					map.infoWindow.content = infoTemplate as UIComponent;
					map.infoWindow.label =infoData.label;
					infoTemplate.data = infoData;
					map.infoWindow.show(infoData.point);
				}
				else
				{
					map.infoWindow.hide();
				}
			}
			private function dataDKGridClick(event:ListEvent):void
			{
				var infoData:Object=queryDKDataGrid.dataProvider[event.rowIndex];
				var pt:MapPoint=infoData.point;
				
				map.centerAt(pt);
				this.showInfoWindow(infoData);
			}
			//event handler - fires when drawing starts
			//clear the previous graphics from the map
			private function drawStartHandler(event:DrawEvent):void
			{
				//clear all selections before new drawing
				this.showInfoWindow(null);
				graphicsLayer.clear();
				plotGraphicsLayer.clear();
				dawGraphicsLayer.clear();
			}
			private function showMessage(msg:String, swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				txtMessage.text=msg;
				swfMessage.visible=swfVisible;
				msgVisible=boxMessageVisible;
			}
			
			private function radiusTuning():void
			{
				if (dawGraphicsLayer.numGraphics == 1)
				{
					var gra:Graphic=dawGraphicsLayer.getChildAt(0) as Graphic;
					if (gra.attributes != null)
					{
						if (gra.attributes.type == CustomDraw.CUSTOM_CIRCLE)
						{
							var circleObj:Object=gra.attributes as Object;
							var centerPoint:MapPoint=circleObj.cpoint as MapPoint;
							var m_radius:Number=Number(StringUtil.trim(bufferRadius_txt.text));
							function createCirclePoints(m_center:MapPoint):Array
							{
								var cosinus:Number;
								var sinus:Number;
								var x:Number;
								var y:Number;
								var arrayOfPoints:Array=new Array();
								var numberOfCirclePoints:int=100;
								for (var i:int=0; i < numberOfCirclePoints; i++)
								{
									sinus=Math.sin((Math.PI * 2.0) * (i / numberOfCirclePoints));
									cosinus=Math.cos((Math.PI * 2.0) * (i / numberOfCirclePoints));
									x=m_center.x + m_radius * cosinus;
									y=m_center.y + m_radius * sinus;
									arrayOfPoints[i]=new MapPoint(x, y);
								}
								
								arrayOfPoints.push(arrayOfPoints[0]);
								return arrayOfPoints;
							}
							var m_circleGeometry:Polygon=new Polygon;
							m_circleGeometry.addRing(createCirclePoints(centerPoint));
							dawGraphicsLayer.clear();
							gra=new Graphic(m_circleGeometry, FWSymbol.zxDrawGraphicSymbol);
							gra.attributes=circleObj;
							dawGraphicsLayer.add(gra);
							exeQuery(gra.geometry);
						}
						
					}
					else
					{
						Alert.show("微调半径仅对圆选生效。");
					}
					
				}
				
			}
			
			public function clickHandle():void{
				navigateToURL(new URLRequest(cdxgDataGrid.selectedItem.link+"&account="+configData.userId));
			}
			
			private function infomationHandler(event:AppEvent):void
			{
				
				if(event.data=="zxgh_cdzx")
				{
					clickCDZXHandle();
				}else if(event.data=="zxgh_cdxg")
				{
					clickCDXGHandle();
				}else if(event.data=="zxgh_dk")
				{
					clickDKHandle();
				}else if(event.data=="zxgh_xgmx"){
					clickHandle();
				}
				
			}
			public function clickDKHandle():void{
				var selectInfo:Object = queryDataGrid.dataProvider[queryDataGrid.selectedIndex];
				showLayer(selectInfo.plan_num);
				var plan_num:String = queryDataGrid.selectedItem.plan_num;
				queryDK(plan_num,selectInfo);
				
			}
			public function clickCDZXHandle():void{
				var token:String="zxgh";
				var selectInfo:Object = queryDataGrid.dataProvider[queryDataGrid.selectedIndex];
				var polygon:Polygon=selectInfo.graphic.geometry as Polygon;
				if(polygon==null){
					
					polygon=selectInfo.graphic.attributes.polygon as Polygon;
				}
				cdzxGridVisible=false;
				showCDZXResults();
				showCDZXMessage("正在查询...",true,true);
				setMapNavigation(NavigationTool.PAN, "漫游");
				searchIntersectedPolygon(polygon,resultFWFields,extentUrl,token);
			}
			private function showCDZXMessage(msg:String, swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				cdzxTxtMessage.text=msg;
				cdzxSwfMessage.visible=swfVisible;
				cdzxMsgVisible=boxMessageVisible;
				cdzxbackBtn.visible=!swfVisible;
			}
			private function showCDXGMessage(msg:String, swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				cdxgTxtMessage.text=msg;
				cdxgSwfMessage.visible=swfVisible;
				cdxgMsgVisible=boxMessageVisible;
				cdxgbackBtn.visible=!swfVisible;
			}
			public function clickCDXGHandle():void
			{
				var token:String="xxgh";
				var selectInfo:Object = queryDataGrid.dataProvider[queryDataGrid.selectedIndex];
				var polygon:Polygon=selectInfo.graphic.geometry as Polygon;
				if(polygon==null){
					
					polygon=selectInfo.graphic.attributes.polygon as Polygon;
				}
				cdxgGridVisible=false;
				showCDXGMessage("正在查询...",true,true);
				showCDXGResults();
				setMapNavigation(NavigationTool.PAN, "漫游");
				map.infoWindow.hide();
				searchIntersectedPolygon(polygon,["*"],xxghExtentUrl,token);
			}
			
			
			private function createXXGHRecordData(featureSet:FeatureSet,layer:GraphicsLayer):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				for each (var gra:Graphic in featureSet.features)
				{
					gra.symbol=FWSymbol.xgGraphicSymbol;
					//数据构造部分
					var obj:Object=gra.attributes;
					var fld:String;
					var value:String;
					var title:String;
					var content:String="";
					var link:String="";
					var point:MapPoint=getGeomCenter(gra);
					var fldAliases:Object=featureSet.fieldAliases;
					var plan_num:String;
					var temp:String;
					//判断是Title还是Content
					for (fld in obj)
					{
						value = obj[fld] ? obj[fld].toString():"";
						
						if (fld.toUpperCase() == extentTitlefield.toUpperCase())
						{
							title=value;
							if (!title)
								title=widgetTitle;
						}
						
						if (fld.toUpperCase() == extentLinkfield.toUpperCase())
						{
							plan_num = value;
							link=linkURL+value;
						}
					}
					for(var i:int = 0;i < resultFWFieldsCN.length;i++ ){
						temp = resultFWFields[i].toString();
						if("TOT_AREA" == temp){
							var areaNum:Number=Number(obj[temp]);
							obj[temp]=areaNum.toFixed(2);
							content+=resultFWFieldsCN[i].toString() + ": " + obj[temp] + " 公顷;";
						}
						else if(temp=="START_DATE"||temp=="END_DATE")
						{
							var df:DateFormatter= new DateFormatter();
							df.formatString='YYYY-MM-DD';
							var date:Date=new Date(obj[temp]);
							obj[temp] = df.format(date);
							content+=resultFWFieldsCN[i].toString() + ": " + obj[temp];
						}else{
							content+=resultFWFieldsCN[i].toString() + ": " + obj[temp] + ";";
						}
					}
					var infoData:Object={icon:icon,plan_num:plan_num, title: title,type:"zxgh_cdxg", content: content, link: link, point: point, graphic: gra};
					gra.attributes=infoData;
					layer.add(gra);
					recAC.addItem(infoData);
				}
				return recAC;
			}
			
			
			
			
			public  function searchIntersectedPolygon(polygong:Polygon,fieldsArr:Array,url:String,token:String):void
			{
				var queryTask:QueryTask=new QueryTask(url);
				var query:Query=new Query();
				query.where="PLAN_TYPE='专项规划'";
				query.outFields=fieldsArr;
				query.geometry=polygong as Geometry;
				query.returnGeometry=true;
				queryTask.execute(query,new AsyncResponder(onResult,onFault,token));
			}
			
			private function onResult(featureSet:FeatureSet,token:Object=null):void
			{
				var resultArrCol:ArrayCollection=new ArrayCollection;
				if(token=="zxgh")
				{
					cdzxlayer.clear();
					glowLayer.clear();
					resultArrCol=createRecordData(featureSet,cdzxlayer,FWSymbol.cdxgGraphicSymbol);
					if(resultArrCol&&resultArrCol.length>0)
					{
						cdzxDataGridItem.headerText="重叠专项信息(合计"+resultArrCol.length.toString()+"条)";
						cdzxDataGrid.dataProvider=resultArrCol;
						UtilsClass.zoomToGraphics(map,cdzxlayer);
						cdzxGridVisible=true;
						showCDZXMessage("", false,false);
					}
					else
					{
						showCDZXMessage("暂无符合条件的记录!", false,true);
						
					}
				}else if(token=="xxgh")
				{
					cdxglayer.clear();
					glowLayer.clear();
					resultArrCol=createXXGHRecordData(featureSet,cdxglayer);
					if(resultArrCol&&resultArrCol.length>0)
					{
						cdxgDataGridItem.headerText="重叠详规信息(合计"+resultArrCol.length.toString()+"条)";
						cdxgDataGrid.dataProvider=resultArrCol;
						UtilsClass.zoomToGraphics(map,cdxglayer);
						cdxgGridVisible=true;
						showCDXGMessage("", false,false);
					}
					else 
					{
						showCDXGMessage("暂无符合条件的记录!", false,true);
						
					}
				}
				map.infoWindow.hide();
				
			}
			private function onFault(info:Object,token:Object=null):void{
				
				Alert.show("查询重叠规划范围时QueryTask出错！");
			}
			private function queryDK(plan_num:String,selectInfo:Object):void
			{
				CursorManager.setBusyCursor();
				this.showInfoWindow(null);
				graphicsLayer.clear();
				plotGraphicsLayer.clear();
				dawGraphicsLayer.visible=false;
				glowLayer.clear();
				extentGraphicsLayer.visible=false;
				dk_gridVisible=false;
				queryDKDataGrid.dataProvider=null;
				showDKResults();
				showDKMessage("正在查询...", true,true);
				var ghGra:Graphic = new Graphic(selectInfo.graphic.geometry,FWSymbol.zxDKExtentLineSymbos,selectInfo);
				graphicsLayer.add(ghGra);
				UtilsClass.zoomToGraphics(map,graphicsLayer);
				setMapNavigation(NavigationTool.PAN, "漫游");
				if (areaUrl)
				{
					var queryTask:QueryTask=new QueryTask(areaUrl);
					var query:Query=new Query();
					var expr:String = "PLAN_NUM = '" + plan_num + "'";
					query.where=expr;
					query.outFields=areaFields.split(",");
					query.returnGeometry=true;
					queryTask.showBusyCursor=true;
					queryTask.execute(query, new AsyncResponder(ontextDKResult, ontextDKFault));
				}
				else
				{
					showDKResults();
					showDKMessage("地块图层不存在", false,true);
				}
			}
			
			private function ontextDKFault(info:Object, token:Object=null):void
			{
				showDKMessage(info.toString(), false,true);
				showDKResults();
			}
			
			private function ontextDKResult(featureSet:FeatureSet, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				glowLayer.clear();
				if (featureSet.features.length > 0)
				{
					try
					{
						var recAC:ArrayCollection=createDKRecordData(featureSet);
						queryDKDataGrid.dataProvider=UtilsClass.sortArrayCollection("title",recAC);
						showDKMessage("", false,false);
						dk_gridVisible=true;		
					}
					catch (error:Error)
					{
						showDKMessage(error.toString()+"1", false,true);
					}
				}
				else
				{
					showDKMessage("暂无符合条件的记录!", false,true);
				}
				this.showInfoWindow(null);
			}
			
			private function createDKRecordData(featureSet:FeatureSet):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				for each (var gra:Graphic in featureSet.features)
				{
					var code:String="MR";
					if(gra.attributes.CUS_TYPE)
					{
						code=gra.attributes.CUS_TYPE.toString();
					}
					else
					{
						gra.attributes.CUS_TYPE="";
						code="MR";
					}
					var symObj:Object=DKSymbol.findSymbolByCode(code);
					gra.symbol=symObj.symbol as SimpleFillSymbol;
					
					//数据构造部分
					var obj:Object=gra.attributes;
					var fld:String;
					var value:String;
					var title:String;
					var content:String="";
					var link:String="";
					var point:MapPoint=getGeomCenter(gra);
					var fldAliases:Object=featureSet.fieldAliases;
					var cus_type:String;
					var plot_name:String;
					var plan_num:String
					var temp:String;
					for (fld in obj)
					{
						value=obj[fld]||"";
						if (fld.toUpperCase() == areaTitlefield.toUpperCase()){
							title=value||"";
							if (!title)
								title=widgetTitle;
						}
						if (fld.toUpperCase() == areaLinkfield.toUpperCase())
						{
							link=linkURL+value||"";
						}
						if (fld.toUpperCase() == "CUS_TYPE")
						{
							cus_type=value||"";
						}
						if (fld.toUpperCase() == "PLOT_NAME")
						{
							plot_name=value||"";
						}
						if(fld=="批复文号")
						{
							plan_num=value||"";
						}
					}
					for(var i:int = 0;i < resultDKFieldsCN.length;i++ ){
						temp = resultDKFields[i].toString();
						if("ENTRANCE"==temp){
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp];
						}
						else if("DKAREA" == temp){
							var areaNum:Number=Number(obj[temp]);
							obj[temp]=areaNum.toFixed(2);
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp] + " 公顷;";
						}else if("BLDG_DENS" == temp || "VEG_RATIO" == temp){
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp] + "%;";
						}else if("BLDG_HLMT" == temp){
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp] + " 米;";
						}else{
							content+=resultDKFieldsCN[i].toString() + ": " + obj[temp]+";";	
						}
						
					}
					var infoData:Object={icon: icon,cus_type:cus_type,plot_name:plot_name,plan_num:plan_num, title: title, content: content, link: link, point: point, geometry: gra.geometry};
					gra.attributes=infoData;
					plotGraphicsLayer.add(gra);
					recAC.addItem(infoData);
				}
				return recAC;
			}
			private function showDKMessage(msg:String, swfVisible:Boolean,dk_boxMessageVisible:Boolean):void
			{
				dk_txtMessage.text=msg;
				dk_swfMessage.visible=swfVisible;
				dk_msgVisible=dk_boxMessageVisible;
				dkbackBtn.visible=!swfVisible;
			}
			
			private function showLayer(plan_num:String):void
			{
				lys.visibleLayers = new ArrayCollection([1,6]);
				var arr:Array = [];
				var str:String = "PLAN_NUM='" + plan_num + "'";
				lys.layerDefinitions = ["",str,"","","","",str,"","","","",""];
				lys.visible = true;
				lys.refresh();
			}
			protected function backBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				showStateResults();
			}

			protected function wTemplate_minimizedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				wTitle=wTemplate.widgetTitle;
				wTemplate.widgetTitle="专项规划";
			}
			
			protected function glowLayer_effectEndHandler(event:EffectEvent):void
			{
				// TODO Auto-generated method stub
				event.effectInstance.reverse();
				event.effectInstance.play();
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<esri:GraphicsLayer id="glowLayer" minScale="32000" />
		<mx:DateFormatter id="formatDate" formatString="YYYY-MM-DD">
		</mx:DateFormatter>
		<circle:CustomDraw id="circleTool"
						   drawStart="drawStartHandler(event)"
						   drawEnd="drawEnd(event)">
		</circle:CustomDraw>
		<fx:Component  id="customComponent">
			<mx:VBox     horizontalAlign="left"   verticalGap="3" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				<mx:Text  id="planTxt" textAlign="left"  htmlText="{outerDocument.planTxtStr}"  />
				<mx:HBox  verticalAlign="middle" horizontalGap="5">
					<mx:Button label="重叠规划"  width="65"/>
					<mx:Button label="重叠详规"  width="65"/>
					<mx:Button label="地块"  width="45"/>
				</mx:HBox>
			</mx:VBox>
		</fx:Component>
	</fx:Declarations>
	<viewer:WidgetTemplate id="wTemplate"
						   closed="queryWidgetClosed()"
						   minimized="wTemplate_minimizedHandler(event)"
						   open="queryWidgetOpened()" height="280" width="380">
		<mx:ViewStack id="viewStack"
					  width="100%"
					  height="100%"
					  creationPolicy="all">
			<mx:VBox width="100%"
					 height="100%"
					 verticalGap="20">
				<mx:Form id="frmLocateCoords"
						 verticalGap="15"
						 verticalScrollPolicy="off">
					<mx:FormItem label="批复文号"
								 styleName="WidgetText">
						<mx:VBox  horizontalAlign="left">
							<mx:TextInput id="planCode"
										  text=""
										  maxChars="30"/>
							<!--s:Label  text="例如：浦府[2001]0219号"/-->
						</mx:VBox>
					</mx:FormItem>
					<mx:FormItem label="规划名称"
								 styleName="WidgetText">
						<mx:VBox  horizontalAlign="left">
							<mx:TextInput id="planName"
										  text=""
										  maxChars="30"/>
							<!--s:Label  text="例如：2001_0219"/-->
						</mx:VBox>
					</mx:FormItem>
					<mx:FormItem label="空间查询"
								 styleName="WidgetText"
								 direction="horizontal">
						<mx:Image source="assets/images/icons/s_polygon.png"
								  click="{polygonQuery(DrawTool.POLYGON)}"
								  useHandCursor="true"
								  buttonMode="true"
								  toolTip="多边形"
								  width="32"
								  height="32"/>
						
						<mx:Image source="assets/images/icons/s_circle.png"
								  click="{polygonQuery('CIRCLE')}"
								  useHandCursor="true"
								  buttonMode="true"
								  toolTip="圆选"
								  width="32"
								  height="32"/>
						
						<mx:TextInput id="bufferRadius_txt"
									  text=""
									  restrict="0-9\."
									  width="80"
									  maxChars="10"
									  enter="radiusTuning()"
									  visible="false"/>
						
						<mx:Text text="米"
								 styleName="WidgetText"
								 visible="false"/>
						
						<mx:Button label="微调半径"
								   click="radiusTuning()"
								   visible="false"/>
					</mx:FormItem>
					<mx:HBox horizontalAlign="center"
							 width="100%">
						<mx:Button label="查询"
								   icon="{Search}"
								   click="textQuery()"/>
						
						<mx:Button label="清除"
								   icon="{Clear}"
								   click="clear()"/>
					</mx:HBox>
				</mx:Form>
			</mx:VBox>
			<mx:VBox width="100%"
					 height="100%"
					 horizontalAlign="center"
					 verticalAlign="middle">
				
				<mx:Label id="graphicallb"
						  styleName="WidgetText"/>
				
				
				
				<mx:Button label="清除"
						   icon="{Clear}"
						   click="clear()"/>
			</mx:VBox>
			<mx:VBox id="extendVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:HBox id="boxMessage"
						 visible="{msgVisible}"
						 includeInLayout="{msgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="swfMessage"
								  source="assets/flash/loader.swf"/>
					<mx:Text id="txtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				
				<mx:VBox   width="100%" height="100%">
					<mx:DataGrid id="queryDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"  
								 variableRowHeight="true"
								 itemClick="dataGridClick(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0xffffff"
								 selectionColor="0xfbefa0"
								 alternatingItemColors="{[0xffffff,0x85d4fc]}"
								 visible="{gridVisible}">
						<mx:columns>
							<mx:DataGridColumn   id="queryDataGridItem"  width="1.0"  itemRenderer="com.esri.viewer.utils.DataGridColumnFontItemRender"   headerText="专项规划信息">
							</mx:DataGridColumn>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="cdzxVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:HBox id="cdzxBoxMessage"
						 visible="{cdzxMsgVisible}"
						 includeInLayout="{cdzxMsgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="cdzxSwfMessage"
								  source="assets/flash/loader.swf"/>
					<mx:Text id="cdzxTxtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				<mx:VBox   width="100%" height="100%">
					<mx:Button id="cdzxbackBtn" 
							   width="56"
							   icon="{Back}" toolTip="返回" 
							   click="backBtn_clickHandler(event)"/>
					<mx:DataGrid id="cdzxDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"  
								 itemClick="cdzxDataGridClick(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0xffffff"
								 selectionColor="0xfbefa0"
								 alternatingItemColors="{[0xffffff,0x85d4fc]}"
								 visible="{cdzxGridVisible}">
						<mx:columns>
							<mx:DataGridColumn width="1.0"  id="cdzxDataGridItem"   itemRenderer="com.esri.viewer.utils.DataGridColumnSubItemRender" />
							<!--mx:DataGridColumn width="0.6" dataField="title" 
							headerText="规划名称"/>
							<mx:DataGridColumn width="0.4" headerText="批复文号" dataField="plan_num">
							</mx:DataGridColumn-->
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="cdxgVbox"
					 width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:HBox id="cdxgBoxMessage"
						 visible="{cdxgMsgVisible}"
						 includeInLayout="{cdxgMsgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="cdxgSwfMessage"
								  source="assets/flash/loader.swf"/>
					
					<mx:Text id="cdxgTxtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				
				<mx:VBox width="100%"  height="100%">
					<mx:Button id="cdxgbackBtn" 
							   width="56"
							   icon="{Back}" toolTip="返回" 
							   click="backBtn_clickHandler(event)"/>
					<mx:DataGrid id="cdxgDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"  
								 itemClick="cdxgDataGridClick(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0xffffff"
								 selectionColor="0xfbefa0"
								 alternatingItemColors="{[0xffffff,0x85d4fc]}"
								 visible="{cdxgGridVisible}">
						<mx:columns>
							<mx:DataGridColumn width="1.0"  id="cdxgDataGridItem"   itemRenderer="com.esri.viewer.utils.DataGridColumnSubItemRender" />
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox width="100%"
					 height="100%"
					 verticalGap="1"
					 verticalScrollPolicy="off">
				<mx:HBox id="dk_boxMessage"
						 visible="{dk_msgVisible}"
						 includeInLayout="{dk_msgVisible}"
						 width="100%"
						 paddingLeft="15"
						 paddingTop="15">
					<mx:SWFLoader id="dk_swfMessage"
								  source="assets/flash/loader.swf"/>
					
					<mx:Text id="dk_txtMessage"
							 text="正在查询..."
							 styleName="WidgetText"
							 width="90%"/>
				</mx:HBox>
				<mx:VBox id="dkVbox" width="100%"   height="100%">
					<mx:Button id="dkbackBtn" 
							   width="56"
							   icon="{Back}" toolTip="返回" 
							   click="backBtn_clickHandler(event)"/>
					<mx:DataGrid id="queryDKDataGrid"
								 width="100%"
								 height="100%"
								 alpha="1"
								 sortableColumns="false"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 visible="{dk_gridVisible}"
								 itemClick="queryDKDataGrid_dataDKGridClick(event)"
								 rowHeight="25">
						<mx:columns>
							<mx:DataGridColumn width="0.4" dataField="title"
											   headerText="批复文号"/>
							<mx:DataGridColumn width="0.3" dataField="plot_name"
											   headerText="地块性质名称"/>
							<mx:DataGridColumn width="0.3" dataField="cus_type"
											   headerText="地块性质代码" textAlign="center"/>
						
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
		</mx:ViewStack>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
