<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*" 
				   layout="absolute" 
				    widgetConfigLoaded="basewidget1_widgetConfigLoadedHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.events.QueryEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.viewer.utils.NumClassify;
			import com.esri.viewer.utils.SymbolFunctionRenderer;
			import com.esri.viewer.utils.UtilsClass;
			import com.wonders.components.chartCom;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.utils.StringUtil;
			
			import org.osmf.layout.AbsoluteLayoutFacet;
			private var  firstGrade:Number=0;
			private var  secondGrade:Number=30;
			private var  thirdGrade:Number=30;
			private var  forthGrade:Number=80;
			private var  fifthGrade:Number=80;
			private var  sixthGrade:Number=80;
			[Bindable]
			private var defaultDate:Date;
			[Bindable]
			private var firstColor:uint=0x54e8d8;
			[Bindable]
			private var secondColor:uint=0x89ee613;
			[Bindable]
			private var thirdColor:uint=0x369013;
			[Bindable]
			private var secTxt:String;
			[Bindable]
			private var thdTxt:String;
			[Bindable]
			private var firTxt:String;
			private var startDateStr:String="";
			private var endDateStr:String="";
			private var queryLyrUrl:String="";
			private var areaLayerUrl:String="";
			private var outFieldsStr:String="";
			private var outFieldsArr:Array=new Array;
			private var districtUnOrderArrCol:ArrayCollection; 
			private var graphicsProvider:ArrayCollection= new ArrayCollection();
			private var graphicsLayerSymfunctionRender:SymbolFunctionRenderer=new SymbolFunctionRenderer();
			private var districtGraphicsLayer:GraphicsLayer;
			private var graphicLineSym:SimpleLineSymbol=new SimpleLineSymbol("solid", 0x0a86fd, 0.5, 2);
			private var firstGradeSym:SimpleFillSymbol=new SimpleFillSymbol("solid", 0x54e8d8, 0.8, graphicLineSym);
			private var secondGradeSym:SimpleFillSymbol=new SimpleFillSymbol("solid", 0x89ee613, 0.8, graphicLineSym);
			private var threeGradeSym:SimpleFillSymbol=new SimpleFillSymbol("solid", 0x369013, 0.8, graphicLineSym);
			private var defaultSym:SimpleFillSymbol=new SimpleFillSymbol("solid", 0x000000, 0, graphicLineSym);
			private var textGraphicLayer:GraphicsLayer;
			private var flagCheck:Boolean=false;
			private var flagEmpty:Boolean=true;
			private var startYear:int=0;
			private var endYear:int=0;
			private var chart:chartCom=new chartCom;
			[Bindable]
			private var countVisible:Boolean=true;
			[Bindable]
			private var areaVisible:Boolean=true;
			private var staticsType:String="count";
			[Bindable]
			private var sDate:Date;
			[Bindable]
			private var eDate:Date;
			
			private var searched:Boolean=false;
			private var wTitle:String="";

			protected function basewidget1_widgetConfigLoadedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				queryLyrUrl=configData.gisdata_UrlROOT + configXML.queryLayer.url;
				areaLayerUrl=configData.gisdata_UrlROOT + configXML.areaLayer;
				outFieldsStr=configXML.queryLayer.fields;
				outFieldsArr=outFieldsStr.split(",");
				var now:Date=new Date();
				defaultDate=new Date(now.fullYear,now.month,now.date);
				districtGraphicsLayer=new GraphicsLayer();
				districtGraphicsLayer.addEventListener(MouseEvent.CLICK,graphicClickHandler);
				map.addLayer(districtGraphicsLayer);
				textGraphicLayer=new GraphicsLayer();
				textGraphicLayer.minScale=125000;
				map.addLayer(textGraphicLayer);
				var date:Date=new Date();
				eDate=date;
//				date.setFullYear(date.getFullYear()-1);
				date.setFullYear(date.getFullYear(),00,01);
				sDate=date;
				
				districtGraphicsLayer.graphicProvider=graphicsProvider;
				graphicsLayerSymfunctionRender.symbolFunction=graphicSymFunction;
				districtGraphicsLayer.renderer=graphicsLayerSymfunctionRender;
			
				xgThematicWidget.addTitlebarButton(ICON_URL+"statistics.png","详细规划统计",showSatisticsConditon);
				xgThematicWidget.addTitlebarButton(ICON_URL+"i_table.png","详细规划统计结果",showSatisticsResult);
				xgThematicWidget.addTitlebarButton(ICON_URL+"setClass.png","详细规划分级设色",showStatisticsLegend);
				queryJDZName();
			}
			private function  graphicSymFunction(graphic:Graphic):Symbol
			{
				var sym:SimpleFillSymbol=new SimpleFillSymbol();
				if(int(graphic.attributes.num)>=firstGrade&&int(graphic.attributes.num)<=secondGrade)
				{
					sym=firstGradeSym;
				}
				else if((int(graphic.attributes.num)>=thirdGrade)&&(int(graphic.attributes.num)<=forthGrade))
				{
					sym=secondGradeSym;
				}
				else if((int(graphic.attributes.num)>=fifthGrade)&&(int(graphic.attributes.num)<=sixthGrade))
				{
					sym=threeGradeSym;
				}
				else 
				{
					sym=defaultSym;
				}
				return sym;
			}
			private function queryJDZName():void
			{
				var queryTask:QueryTask=new QueryTask(areaLayerUrl);
				var query:Query=new Query();
				query.where="1=1";
				query.returnGeometry=true;
				query.outFields=["*"];
				queryTask.showBusyCursor=true;
				queryTask.execute(query,new AsyncResponder(onResult, onFault));
			}
			private function onResult(featureSet:FeatureSet, token:Object=null):void
			{
				districtUnOrderArrCol=new ArrayCollection;
				districtGraphicsLayer.visible=false;
				for each (var graphic:Graphic in featureSet.features)
				{
					var districtName:String=graphic.attributes.NAME.toString();
					var count:int=0;
					var yearNumArr:Array=new Array();
					var obj:Object={name:districtName,num:count,graphic:graphic,yearNum:yearNumArr};
					graphic.addEventListener(MouseEvent.ROLL_OUT,graphicRollOutHandler);
					graphic.addEventListener(MouseEvent.ROLL_OVER,graphicRollOverHandler);
					graphic.addEventListener(MouseEvent.CLICK,graphicClickHandler);
					graphic.attributes.num=0;
					graphic.attributes.yearNum=yearNumArr;
					districtUnOrderArrCol.addItem(obj);
					graphicsProvider.addItem(graphic);
				}
			}

			private function graphicRollOverHandler(event:MouseEvent):void
			{
				event.currentTarget.filters=[glowFilter];
			}
			private function graphicRollOutHandler(event:MouseEvent):void
			{
				event.currentTarget.filters=null;
			}
			private function graphicClickHandler(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				map.infoWindow.setStyle("contentBackgroundAlpha", 0.95);
				map.infoWindow.setStyle("backgroundAlpha", 0.95);
				map.infoWindow.setStyle("backgroundColor", 0xCBE5FE);
				if(map.infoWindow.visible){
					chart.data=graphic.attributes;
					chart.staticsType=staticsType;
					map.infoWindow.label=graphic.attributes.NAME.toString();
					map.infoWindow.height=320;
					map.infoWindow.content = chart;
					map.infoWindow.verticalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.horizontalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.show(graphic.geometry.extent.center);

				}
				else
				{
					chart.data=graphic.attributes;
					chart.staticsType=staticsType;
					map.infoWindow.label=graphic.attributes.NAME.toString();
					map.infoWindow.height=320;
					map.infoWindow.visible= true;
					map.infoWindow.content = chart;
					map.infoWindow.verticalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.horizontalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.show(graphic.geometry.extent.center);

				}
			}
			private function onFault(info:Object, token:Object=null):void
			{
				Alert.show(info.toString());
			}
			
			private function showSatisticsConditon():void
			{
				this.currentState="statisticsCondition";
				xgThematicWidget.selectedTitlebarButtonIndex=0;
			}
			private function showSatisticsResult():void
			{
				this.currentState="statisticsResult";
				xgThematicWidget.selectedTitlebarButtonIndex=1;
			}
			private function showStatisticsLegend():void
			{
				this.currentState="statisticsLegend";
				xgThematicWidget.selectedTitlebarButtonIndex=2;
			}
			

			protected function statisticsBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub			
				if(startDate.selectedDate&&endDate.selectedDate)
				{
					CursorManager.setBusyCursor();
					if(map.infoWindow.visible)
					{
						map.infoWindow.hide();
					}
					var expr:String="1=1";
					if(startDate.selectedDate!=null){
						expr += " and START_DATE > date '" + formatDate.format(startDate.selectedDate) + "'";
					}
					if(endDate.selectedDate!=null){
						expr += " and START_DATE < date '" + formatDate.format(endDate.selectedDate) + "'";
					}
					startYear=startDate.selectedDate.fullYear;
					endYear=endDate.selectedDate.fullYear;
					if(districtUnOrderArrCol)
					{
						for(var i:int=0;i<districtUnOrderArrCol.length;i++)
						{
							var arr:Array=new Array();
							for(var n:int=0;n<(endYear-startYear+1);n++)
							{
								arr[n]={label:0,value:0};
							}
							districtUnOrderArrCol[i].num=0;
							districtUnOrderArrCol[i].yearNum=arr;
							graphicsProvider[i].attributes.num=0;
						}
					}
					
					var queryTask:QueryTask=new QueryTask(queryLyrUrl);
					var query:Query=new Query();
					query.where=expr;
					query.returnGeometry=true;
					query.outFields=outFieldsArr;
					queryTask.showBusyCursor=true;
					queryTask.execute(query,new AsyncResponder(ontextResult, ontextFault));
				}
				else
				{
//					if(startDate.selectedDate==null)
//					{
//						startlbl.visible=true;
//					}
//					if(endDate.selectedDate==null)
//					{
//						endlbl.visible=true;
//					}
				}
					
			}
			
			private function ontextResult(featureSet:FeatureSet, token:Object=null):void
			{
//				var df:DateFormatter= new DateFormatter();
//				df.formatString='YYYY-MM-DD HH:NN:SS';
				CursorManager.removeBusyCursor();
				textGraphicLayer.clear();
				firstStepColor.selectedColor=0x54e8d8;
				secondStepColor.selectedColor=0x89ee613;
				thirdStepColor.selectedColor=0x369013;
				firstColor=firstStepColor.selectedColor;
				secondColor=secondStepColor.selectedColor;
				thirdColor=thirdStepColor.selectedColor;
				firstGradeSym.color=firstColor;
				secondGradeSym.color=secondColor;
				threeGradeSym.color=thirdColor;
				for each (var graphic:Graphic in featureSet.features)
				{
					var zm:String=graphic.attributes.DISTRICT.toString();
					var date:Date=new Date(graphic.attributes.START_DATE);
					var area:Number=Number(graphic.attributes.TOT_AREA);
//					sr = df.format(date);
//					date.setTime(graphic.attributes.START_DATE);
//					sr = df.format(date);
					var yearTime:int=date.fullYear;
					
					for(var i:int=0;i<districtUnOrderArrCol.length;i++)
					{
						var name:String=districtUnOrderArrCol[i].name.toString();
						var arr:Array=districtUnOrderArrCol[i].yearNum as Array;
						var index:int=int(endYear-yearTime);
						var value:Number=Number(arr[index].value);
						if(zm==name)
						{
							var count:Number=(Number)(districtUnOrderArrCol[i].num);
//							if(ghCountRbtn.selected)
//							{
								count++;
								districtUnOrderArrCol[i].num=count;
								value++;
								countVisible=true;
								areaVisible=false;
//							}
//							else if(ghAreaRbtn.selected)
//							{
//								count=count+area;
//								districtUnOrderArrCol[i].num=Number(count.toFixed(0));
//								value=value+area;
//								countVisible=false;
//								areaVisible=true;
//							}
							//方便对symbol进行分级设置
							graphicsProvider[i].attributes.num=Number(count.toFixed(0));
						}
						arr[endYear-yearTime]={label:yearTime,value:value.toFixed(0)};
						districtUnOrderArrCol[i].yearNum=arr;
						graphicsProvider[i].attributes.yearNum=arr;
					}
				}
				
				for(var m:int=0;m<graphicsProvider.length;m++)
				{
					var mp:MapPoint=graphicsProvider[m].geometry.extent.center;
					var textSymbol:TextSymbol=new TextSymbol();
					var textFormat:TextFormat=new TextFormat();
//					if(ghCountRbtn.selected)
//					{
						textSymbol.text=graphicsProvider[m].attributes.NAME+"\n"+"规划数目:"+graphicsProvider[m].attributes.num;
						staticsType="count";
//					}
//					else if(ghAreaRbtn.selected)
//					{
//						textSymbol.text=graphicsProvider[m].attributes.NAME+"\n"+"规划面积:"+graphicsProvider[m].attributes.num;
//						staticsType="area";
//					}
					textFormat.size=14;
					textFormat.font="黑体";
					textFormat.color="0x000000";
					textSymbol.textFormat=textFormat;
					var textGraphic:Graphic=new Graphic(mp,textSymbol);
					textGraphicLayer.add(textGraphic);
				}
				//避免以为排序之后，districtArrCol与graphicsProvider中的乡镇顺序不一致
				var districtArrCol:ArrayCollection=new ArrayCollection;
				for(var n:int=0;n<districtUnOrderArrCol.length;n++)
				{
					districtArrCol.addItem(districtUnOrderArrCol[n]);
				}
				resultDataGrid.dataProvider=UtilsClass.sortArrayCollection("num",districtArrCol);
				var gradeArr:Array=NumClassify.ThreeClass(resultDataGrid.dataProvider[districtArrCol.length-1].num,resultDataGrid.dataProvider[0].num);
				firstStepColor.selectedColor=0x54e8d8;
				secondStepColor.selectedColor=0x89ee613;
				thirdStepColor.selectedColor=0x369013;
				firstGrade=gradeArr[0];
				secondGrade=gradeArr[1];
				thirdGrade=gradeArr[1]+1;
				forthGrade=gradeArr[2];
				fifthGrade=gradeArr[2]+1;
				sixthGrade=gradeArr[3];
				firstStepValue.text=firstGrade.toString();
				secondStepValue.text=secondGrade.toString();
				thirdStepValue.text=thirdGrade.toString();
				forthStepValue.text=forthGrade.toString();
				fifthStepValue.text=fifthGrade.toString();
				sixthStepValue.text=sixthGrade.toString();
				districtGraphicsLayer.visible=true;
				UtilsClass.zoomToGraphics(map,districtGraphicsLayer);
				districtGraphicsLayer.refresh();
				firTxt=firstGrade.toString()+"~"+secondGrade.toString();
				secTxt=thirdGrade.toString()+"~"+forthGrade.toString();
				thdTxt=fifthGrade.toString()+"~"+sixthGrade.toString();
				showSatisticsResult();
				searched=true;
			}
			private function ontextFault(info:Object, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				Alert.show(info.toString());
			}


			protected function statisticsReset_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				startDate.selectedDate=null;
				endDate.selectedDate=null;
			}


			protected function resultDataGrid_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				var graphic:Graphic=event.itemRenderer.data.graphic as Graphic;
				map.extent=graphic.geometry.extent.expand(2);
				map.infoWindow.setStyle("contentBackgroundAlpha", 0.95);
				map.infoWindow.setStyle("backgroundAlpha", 0.95);
				map.infoWindow.setStyle("backgroundColor", 0xCBE5FE);
				if(map.infoWindow.visible){
					chart.data=event.itemRenderer.data;
					chart.staticsType=staticsType;
					map.infoWindow.label=event.itemRenderer.data.name.toString();
					map.infoWindow.height=320;
					map.infoWindow.content = chart;
					map.infoWindow.verticalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.horizontalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.show(graphic.geometry.extent.center);
				}
				else
				{
					chart.data=event.itemRenderer.data;
					chart.staticsType=staticsType;
					map.infoWindow.label=event.itemRenderer.data.name.toString();
					map.infoWindow.visible= true;
					map.infoWindow.content = chart;
					map.infoWindow.verticalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.horizontalScrollPolicy=ScrollPolicy.OFF;
					map.infoWindow.show(graphic.geometry.extent.center);
				}
				
			}
			
			protected function numbervalidator1_invalidHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				firstSignLabel.visible=true;
				flagCheck=false;
				flagEmpty=false;
			}
			protected function numbervalidator1_validHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				firstSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			
			protected function numbervalidator2_invalidHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				firstSignLabel.visible=true;
				flagCheck=false;
				flagEmpty=false;
				
			}
			
			protected function numbervalidator2_validHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				firstSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			
			protected function numbervalidator3_invalidHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				secondSignLabel.visible=true;
				flagCheck=false;
				flagEmpty=false;
			}
			protected function numbervalidator3_validHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				secondSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			
			protected function numbervalidator4_invalidHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				secondSignLabel.visible=true;
				flagCheck=false;
				flagEmpty=false;
			}
			protected function numbervalidator4_validHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				secondSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			
			protected function numbervalidator5_invalidHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				thirdSignLabel.visible=true;
				flagCheck=false;
				flagEmpty=false;
			}
			protected function numbervalidator5_validHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				thirdSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			protected function numbervalidator6_invalidHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				thirdSignLabel.visible=true;
				flagCheck=false;
				flagEmpty=false;
			}
			protected function numbervalidator6_validHandler(event:ValidationResultEvent):void
			{
				// TODO Auto-generated method stub
				thirdSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			protected function classifyBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.currentState = "statisticsLegend";
				xgThematicWidget.selectedTitlebarButtonIndex = 1; 
			}
			protected function showBtn_clickHandler(event:MouseEvent):void
			{
				if(flagEmpty)
				{
					if(flagCheck)
					{
						// TODO Auto-generated method stub
						if(firstSignLabel.visible==false&&secondSignLabel.visible==false&&thirdSignLabel.visible==false)
						{
							if(firstStepColor.selectedColor==0&&secondStepColor.selectedColor==0&&thirdStepColor.selectedColor==0)
							{
								
							}
							else
							{
								firstColor=firstStepColor.selectedColor;
								secondColor=secondStepColor.selectedColor;
								thirdColor=thirdStepColor.selectedColor;
							}
							firstGrade=(Number)(firstStepValue.text);
							secondGrade=(Number)(secondStepValue.text);
							thirdGrade=(Number)(thirdStepValue.text);
							forthGrade=(Number)(forthStepValue.text);
							fifthGrade=(Number)(fifthStepValue.text);
							sixthGrade=(Number)(sixthStepValue.text);
							
							firTxt=firstGrade.toString()+"~"+secondGrade.toString();
							secTxt=thirdGrade.toString()+"~"+forthGrade.toString();
							thdTxt=fifthGrade.toString()+"~"+sixthGrade.toString();
							resetSymbol(firstColor,secondColor,thirdColor);
							showSatisticsResult();
						}
						
					}
				}
			}
			private function resetSymbol(firstColor:uint,secondColor:uint,thirdColor:uint):void
			{	
				firstGradeSym.color=firstColor;
				secondGradeSym.color=secondColor;
				threeGradeSym.color=thirdColor;
				if(defaultCmb.selected)
				{
					defaultSym.color=defaultStepColor.selectedColor;
					defaultSym.alpha=0.8;
				}
				if(graphicsProvider)
				{
					for(var i:int=0;i<graphicsProvider.length;i++)
					{
						graphicsProvider[i].symbol=graphicSymFunction(graphicsProvider[i]);
					}
					districtGraphicsLayer.refresh();
					UtilsClass.zoomToGraphics(map,districtGraphicsLayer);
				}
			}
			protected function resetBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
//				firstStepColor.selectedColor=0x000000;
//				secondStepColor.selectedColor=0x000000;
//				thirdStepColor.selectedColor=0x000000;
				firstStepValue.text="";
				secondStepValue.text="";
			}


			protected function firstStepValue_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				firstSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}


			protected function firstStepValue_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				var firstValue:int=(int)(firstStepValue.text);
				var  secondValue:int=(int)(secondStepValue.text);
				if(secondStepValue.text)
				{
					if(firstValue>=secondValue)
					{
						firstSignLabel.visible=true;
						flagCheck=false;
						flagEmpty=false;
					}
				}
				if(!(firstStepValue.text))
				{
					firstSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
				
			}
			protected function secondStepValue_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				firstSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			protected function secondStepValue_focusOut(event:Event):void
			{
				// TODO Auto-generated method stub
				var firstValue:int=(int)(firstStepValue.text);
				var  secondValue:int=(int)(secondStepValue.text);
				if(firstValue>=secondValue)
				{
					firstSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
				var  thirdValue:int=(int)(thirdStepValue.text);
				if(thirdStepValue.text)
				{
					if(secondValue>=thirdValue)
					{
						firstSignLabel.visible=true;
						flagCheck=false;
						flagEmpty=false;
					}
				}
				if(!(secondStepValue.text))
				{
					firstSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
			}

			protected function thirdStepValue_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				secondSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			protected function thirdStepValue_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				var  thirdValue:int=(int)(thirdStepValue.text);
				var  forthValue:int=(int)(forthStepValue.text);
				if(forthStepValue.text)
				{
					if(forthValue<=thirdValue)
					{
						secondSignLabel.visible=true;
						flagCheck=false;
						flagEmpty=false;
					}
				}
				var  secondValue:int=(int)(secondStepValue.text);
				if(secondValue>=thirdValue)
				{
					secondSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
				if(!(thirdStepValue.text))
				{
					secondSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
			}


			protected function forthStepValue_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				var  thirdValue:int=(int)(thirdStepValue.text);
				var  forthValue:int=(int)(forthStepValue.text);
				if(thirdValue>=forthValue)
				{
					secondSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
				var  fifthValue:int=(int)(fifthStepValue.text);
				if(fifthStepValue.text)
				{
					if(fifthValue<=forthValue)
					{
						secondSignLabel.visible=true;
						flagCheck=false;
						flagEmpty=false;
					}
				}
				if(!(forthStepValue.text))
				{
					secondSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
			}


			protected function forthStepValue_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				secondSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}
			protected function fifthStepValue_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				var  fifthValue:int=(int)(fifthStepValue.text);
				var  forthValue:int=(int)(forthStepValue.text);
				if(forthValue>=fifthValue)
				{
					thirdSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
				var  sixthValue:int=(int)(sixthStepValue.text);
				if(sixthStepValue.text)
				{
					if(sixthValue<=fifthValue)
					{
						thirdSignLabel.visible=true;
						flagCheck=false;
						flagEmpty=false;
					}
				}
				if(!(fifthStepValue.text))
				{
					thirdSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
			}
			
			protected function fifthStepValue_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				thirdSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
				
			}
			protected function sixthStepValue_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				var  sixthValue:int=(int)(sixthStepValue.text);
				var  fifthValue:int=(int)(fifthStepValue.text);
				if(sixthValue<=fifthValue)
				{
					thirdSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
				if(!(sixthStepValue.text))
				{
					thirdSignLabel.visible=true;
					flagCheck=false;
					flagEmpty=false;
				}
			}
			
			
			protected function sixthStepValue_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				thirdSignLabel.visible=false;
				flagCheck=true;
				flagEmpty=true;
			}

			protected function xgThematicWidget_openHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if(searched)
				{
					if(districtGraphicsLayer)
					{
						districtGraphicsLayer.visible=true;
					}
					if(textGraphicLayer)
					{
						textGraphicLayer.visible=true;
					}
				}
				if(wTitle!="")
				{
					xgThematicWidget.widgetTitle=wTitle;
				}
			}


			protected function xgThematicWidget_closedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if(districtGraphicsLayer)
				{
					districtGraphicsLayer.visible=false;
				}
				if(textGraphicLayer)
				{
					textGraphicLayer.visible=false;
				}
				map.infoWindow.hide();
			}


			protected function startDate_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(startDate.selectedDate)
				{
//					startlbl.visible=false;
				}
			}


			protected function endDate_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(endDate.selectedDate)
				{
//					endlbl.visible=false;
				}
				
			}


			protected function xgThematicWidget_minimizedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				wTitle=xgThematicWidget.widgetTitle;
				xgThematicWidget.widgetTitle="详规街镇统计";
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:GlowFilter id="glowFilter"
					  alpha="1"
					  color="0xf4f0f0"
					  strength="5"/>
		<mx:DateFormatter id="formatDate" formatString="YYYY-MM-DD" />
		<mx:NumberValidator  source="{firstStepValue}" property="text" invalid="numbervalidator1_invalidHandler(event)" valid="numbervalidator1_validHandler(event)"/>
		<mx:NumberValidator  source="{secondStepValue}" property="text" invalid="numbervalidator2_invalidHandler(event)" valid="numbervalidator2_validHandler(event)"/>
		<mx:NumberValidator  source="{thirdStepValue}" property="text" invalid="numbervalidator3_invalidHandler(event)" valid="numbervalidator3_validHandler(event)"/>
		<mx:NumberValidator  source="{forthStepValue}" property="text" invalid="numbervalidator4_invalidHandler(event)" valid="numbervalidator4_validHandler(event)"/>
		<mx:NumberValidator  source="{fifthStepValue}" property="text" invalid="numbervalidator5_invalidHandler(event)" valid="numbervalidator5_validHandler(event)"/>
		<mx:NumberValidator  source="{sixthStepValue}" property="text" invalid="numbervalidator6_invalidHandler(event)" valid="numbervalidator6_validHandler(event)"/>
	</fx:Declarations>
	
	<viewer:states>
		<s:State name="statisticsCondition"  />
		<s:State name="statisticsResult"  />
		<s:State name="statisticsLegend"  />
	</viewer:states>
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade targets="{[statisticsCondition,statisticsResult,statisticsLegend]}" />
		</s:Transition>
	</viewer:transitions>
	<viewer:WidgetTemplate id="xgThematicWidget"
						   width="280" height="320"
						   open="xgThematicWidget_openHandler(event)"
						   minimized="xgThematicWidget_minimizedHandler(event)"
						   closed="xgThematicWidget_closedHandler(event)">
		<mx:VBox 
				id="statisticsCondition" 
				width="100%" height="100%"
				verticalGap="30"  paddingTop="20"
				horizontalAlign="center"
				visible="false" visible.statisticsCondition="true">
			<mx:VBox horizontalAlign="left" paddingTop="10" verticalGap="20">
				<!--mx:HBox verticalAlign="top">
					<mx:Label text="专题类别:" 
							  styleName="WidgetText"/>
					<mx:HBox horizontalAlign="center" >
						<s:RadioButton id="ghCountRbtn" label="规划数目"  selected="true" groupName="class"/>
						<s:RadioButton id="ghAreaRbtn"  label="规划面积"  selected="false" groupName="class"/>
					</mx:HBox>
				</mx:HBox-->
					<mx:HBox verticalAlign="top">
						<mx:Label text="起始日期:" paddingTop="3"
								  styleName="WidgetText"/>
						<mx:VBox horizontalAlign="left" >
							<mx:DateField id="startDate" width="100"
										  yearNavigationEnabled="true"
										  click="startDate_clickHandler(event)"
										  selectedDate="{sDate}"
										  formatString="YYYY-MM-DD"
										  dayNames="['日','一','二','三','四','五','六',]"
										  monthNames="['一','二','三','四','五','六','七','八','九','十','十一','十二']"
										  selectableRange="{{rangeEnd:new Date()}}"/>
						</mx:VBox>
					</mx:HBox>
					<mx:HBox verticalAlign="top">
						<mx:Label text="截止日期:" paddingTop="3"
								  styleName="WidgetText"/>
						<mx:VBox horizontalAlign="left"  >
							<mx:DateField id="endDate"  width="100"
										  yearNavigationEnabled="true"	
										  click="endDate_clickHandler(event)"
										  selectedDate="{eDate}"
										  formatString="YYYY-MM-DD"
										  dayNames="['日','一','二','三','四','五','六',]"
										  monthNames="['一','二','三','四','五','六','七','八','九','十','十一','十二']"
										  selectableRange="{{rangeStart:startDate.selectedDate,rangeEnd:new Date()}}"/>
						</mx:VBox>
					</mx:HBox>
				</mx:VBox>
			<mx:HBox verticalAlign="middle" horizontalGap="10">
				<s:Button id="statisticsBtn"   label="统  计" click="statisticsBtn_clickHandler(event)"/>
				<s:Button id="statisticsReset" label="重  置" click="statisticsReset_clickHandler(event)"/>
			</mx:HBox>
		</mx:VBox>	
		<mx:VBox 
				id="statisticsResult" 
				width="100%" height="100%"
				horizontalAlign="center" verticalGap="10"
				visible="false" visible.statisticsResult="true">
			<mx:HBox  verticalAlign="middle" horizontalGap="20" paddingTop="10">
				<mx:VBox    horizontalAlign="center">
					<mx:Box backgroundColor="{firstColor}" width="20" height="20"/>
					<s:Label id="firLevel"  text="{firTxt}"/>
				</mx:VBox>	
				<mx:VBox   horizontalAlign="center">
					<mx:Box backgroundColor="{secondColor}" width="20" height="20"/>
					<s:Label id="secLevel" text="{secTxt}"/>
				</mx:VBox>	
				<mx:VBox   horizontalAlign="center">
					<mx:Box backgroundColor="{thirdColor}" width="20" height="20"/>
					<s:Label id="thdLevel" text="{thdTxt}"/>
				</mx:VBox>
			</mx:HBox>
			<mx:VBox width="100%" >
					<mx:DataGrid id="resultDataGrid"
								 height="100%" width="100%"
								 alpha="1"  
								 rowHeight="25"
								 itemClick="resultDataGrid_itemClickHandler(event)"
								 headerStyleName="DataGridHeader"
								 chromeColor="0xBCE1E9"
								 >
						<mx:columns>
							<mx:DataGridColumn width="0.4" dataField="name"
											   headerText="名称"/>
							<mx:DataGridColumn width="0.6" dataField="num"  visible="{countVisible}"
											   headerText="规划数目(个)"/>
							<mx:DataGridColumn width="0.6" dataField="num"  visible="{areaVisible}"
											   headerText="规划面积(公顷)"/>
						</mx:columns>
					</mx:DataGrid>
			</mx:VBox>
		</mx:VBox>	
		<mx:VBox 
			  	 id="statisticsLegend"   
				 width="100%" height="100%"
				 horizontalAlign="center" verticalGap="20"
				 visible="false" visible.statisticsLegend="true">
			<mx:VBox width="100%" paddingTop="20" verticalGap="6"  horizontalAlign="left"  paddingLeft="60">
				<s:Label text="颜色与分级数值" fontSize="14"/>
				<mx:HBox verticalAlign="middle">
					<mx:ColorPicker  id="firstStepColor" /> 
					<mx:VBox horizontalAlign="left">
						<mx:HBox verticalAlign="middle">
							<s:TextInput id="firstStepValue"    borderVisible="false" focusOut="firstStepValue_focusOutHandler(event)" focusIn="firstStepValue_focusInHandler(event)"  fontSize="16" width="40"/>
							<s:Label text="~"  fontSize="20"/>
							<s:TextInput  id="secondStepValue"  borderVisible="false"  focusIn="secondStepValue_focusInHandler(event)"  focusOut="secondStepValue_focusOut(event)" fontSize="16" width="40"/>
						</mx:HBox>
						<s:Label  id="firstSignLabel" text="请输入正确的数值"  visible="false"  color="0xFF0000" fontSize="12"/>	
					</mx:VBox>
				</mx:HBox>
				<mx:HBox verticalAlign="middle">
					<mx:ColorPicker  id="secondStepColor"/> 
					<mx:VBox horizontalAlign="left">
						<mx:HBox verticalAlign="middle">
							<s:TextInput  id="thirdStepValue" borderVisible="false" focusOut="thirdStepValue_focusOutHandler(event)" focusIn="thirdStepValue_focusInHandler(event)"   fontSize="16" width="40"/>
							<s:Label text="~"  fontSize="20"/>
							<s:TextInput  id="forthStepValue"  borderVisible="false" focusIn="forthStepValue_focusInHandler(event)"  focusOut="forthStepValue_focusOutHandler(event)" fontSize="16" width="40"/>
						</mx:HBox>
						<s:Label  id="secondSignLabel" text="请输入合适的数值"  visible="false"  color="0xFFFF00" fontSize="12"/>	
					</mx:VBox>
				</mx:HBox>
				<mx:HBox verticalAlign="middle">
					<mx:ColorPicker  id="thirdStepColor"/> 
					<mx:VBox horizontalAlign="left">
						<mx:HBox verticalAlign="middle">
							<s:TextInput  id="fifthStepValue" borderVisible="false"  focusIn="fifthStepValue_focusInHandler(event)"  focusOut="fifthStepValue_focusOutHandler(event)" fontSize="16" width="40"/>
							<s:Label text="~"  fontSize="20"/>
							<s:TextInput  id="sixthStepValue"  borderVisible="false"  focusIn="sixthStepValue_focusInHandler(event)"  focusOut="sixthStepValue_focusOutHandler(event)" fontSize="16" width="40"/>
						</mx:HBox>
						<s:Label  id="thirdSignLabel" text="请输入合适的数值"  visible="false"  color="0xFFFF00" fontSize="12"/>	
					</mx:VBox>
				</mx:HBox>
				<mx:HBox verticalAlign="middle">
					<mx:ColorPicker  id="defaultStepColor"/> 
					<mx:VBox horizontalAlign="left">
						<s:CheckBox id="defaultCmb" label="未分级区域颜色选择"  selected="false"/>
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
			<mx:HBox horizontalGap="20" >
				<mx:Box width="0" visible="false"/>
				<s:Button  label="显  示"  id="showBtn"  click="showBtn_clickHandler(event)"/>
				<s:Button  label="重  置" id="resetBtn"   click="resetBtn_clickHandler(event)" />
			</mx:HBox>
		</mx:VBox>	
	</viewer:WidgetTemplate>
</viewer:BaseWidget>