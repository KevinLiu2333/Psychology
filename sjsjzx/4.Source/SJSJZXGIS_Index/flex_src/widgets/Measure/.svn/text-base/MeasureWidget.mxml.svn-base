<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   layout="horizontal" 
				   widgetConfigLoaded="layerinit()" xmlns:esri="http://www.esri.com/2008/ags">
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geometry.*;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.*;
			import com.esri.ags.tasks.supportClasses.AreasAndLengthsParameters;
			import com.esri.ags.tasks.supportClasses.AreasAndLengthsResult;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.tools.NavigationTool;
			
			import mx.collections.ArrayCollection;
			import mx.events.ItemClickEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
		private var measureResult:Number;
		
		private var graphicsLayer:GraphicsLayer =  new GraphicsLayer();
	
		[Bindable]
		private var lineLabel:String;
		[Bindable]
		private var polygonLabel:String;
		[Bindable]
		private var pointLabel:String;
		[Bindable]
		private var clearLabel:String;
		private const TEXT_MODE:String = "text";
		private var drawMode:String;
		[Bindable]
		private var drawtextLabel:String;
		//只允许存在一个graphic
		private var graFlag:Boolean;
		
		[Bindable]private var gsurl:String;
		
		private function layerinit():void
		{
			map.addLayer(graphicsLayer);
			setMapNavigation(NavigationTool.PAN, "漫游");
			gsurl = gisdata_UrlROOT + gis_Config.geometryurl.toString() || "";
		}
		private function measureClosed():void
		{
			graphicsLayer.visible=false;
			//map.removeEventListener(MapMouseEvent.MAP_CLICK,mapMeasure);
			setMapNavigation(NavigationTool.PAN, "漫游");
			drawpoly.source = ICON_URL + 'tool_poly.png';
			drawline.source = ICON_URL + 'tool_line.png';
		}
		private function measureOpened():void
		{
			graphicsLayer.visible=true;
			setMapNavigation(NavigationTool.PAN, "漫游");
		}
		
		private var selImage:Image;
		
		private function activateDrawTool(value:String, mode:String):void
		{
				drawMode = mode;
				var status:String;
				switch (value)
				{
					case DrawTool.MAPPOINT:
					{
						status = "Draw Point";
						if (mode == TEXT_MODE)
							status = drawtextLabel;
						//map.addEventListener(MapMouseEvent.MAP_CLICK,mapMeasure);
						break;
					}
					
					case DrawTool.POLYLINE:
					{
						status = "长度测量";
						selImage = drawline;
						selImage.source = ICON_URL + 'tool_line_sel.png';
						drawpoly.source = ICON_URL + 'tool_poly.png';
						
						//map.addEventListener(MapMouseEvent.MAP_CLICK,mapMeasure);
						break;
					}
					case DrawTool.POLYGON:
					{
						status = "面积计算";
						
						selImage = drawpoly;
						drawline.source = ICON_URL + 'tool_line.png';
						selImage.source = ICON_URL + 'tool_poly_sel.png';
					
						//map.addEventListener(MapMouseEvent.MAP_CLICK,mapMeasure);
						break;
					}
					
					
				}
				
				graphicsLayer.clear();
				unitComoBox.visible=false;
				resultTxt.text="";
				resultTip.text="";
				setMapAction(value, status, null, drawEnd);	
				
			}
			
			private function drawEnd(event:DrawEvent):void
			{
				graFlag=true;
				//var outSR:SpatialReference = new SpatialReference(spatialref);
				var geom:Geometry = event.graphic.geometry;
				var gra:Graphic = new Graphic(geom);
				switch (geom.type)  
                {         
                	case Geometry.MAPPOINT:
                	{
	                	var ptSym:SimpleMarkerSymbol = new SimpleMarkerSymbol("circle", 12, 0xFF0000);
	                	gra.symbol = ptSym;       		
                		break;
                	}
                		
                	case Geometry.POLYLINE:
                	{
                		var lineSym:SimpleLineSymbol = new SimpleLineSymbol("solid",0xFF0000, 0.5,3);
                		gra.symbol = lineSym;
                		measureDist(geom);
                		break;
                	}
                		              
                	case Geometry.POLYGON:
                	{
                		var outlineSym:SimpleLineSymbol = new SimpleLineSymbol("solid",0xFF0000, 1, 2);
                		var polySym:SimpleFillSymbol = new SimpleFillSymbol("diagonalcross", 0xFF0000, 0.3, outlineSym);
                		gra.symbol = polySym;
                		//measureArea(geom);
						geom.spatialReference=map.spatialReference;
						measureAreaByGS(geom);
                		break;
                	}
                }
                graphicsLayer.add(gra);
                //map.addEventListener(MapMouseEvent.MAP_CLICK,caseGraFlag);
				if(selImage == drawline){ 
					selImage.source = ICON_URL + 'tool_line.png';
				}
				if(selImage == drawpoly){ 
					selImage.source = ICON_URL + 'tool_poly.png';
				}
				selImage = null;
			}
			//drawEnd后增加侦听，一旦点击地图，则删除原有的Graphic
			private function caseGraFlag(event:MapMouseEvent):void
			{
				graphicsLayer.clear();
				map.removeEventListener(MapMouseEvent.MAP_CLICK,caseGraFlag);
			}
			
			
			 private function measureDist(geom:Geometry):void
            {
            	//注意map坐标系的设置
            	var dist:Number=0;
				var mapPtAry:Array=new Array();
				var polyline:Polyline=geom as Polyline;
				var mapPoint:MapPoint=new MapPoint();
				for(var m:Number=0;m<polyline.paths[0].length;m++)
				{
					mapPoint=polyline.getPoint(0,m);
					mapPtAry.push(mapPoint);
				}
				for(var i:Number=0;i<mapPtAry.length-1;i++)
				{
		       		var temDist:Number=(mapPtAry[i].x-mapPtAry[i+1].x)*(mapPtAry[i].x-mapPtAry[i+1].x);
		       		temDist=temDist+(mapPtAry[i].y-mapPtAry[i+1].y)*(mapPtAry[i].y-mapPtAry[i+1].y);
		       		temDist=Math.sqrt(temDist);
		       		dist=dist+temDist;
				}
			//dist=Math.floor(dist);
				measureResult=dist;
		 		resultTxt.text=measureResult.toFixed(3);
		 		resultTip.text="长度测量结果:";
		 		var units:Array = new Array();
		 		units.push({label:"米",data:1});
		 		units.push({label:"公里",data:1000});
		 		unitComoBox.dataProvider=units;
		 		unitComoBox.visible=true;
		 		
		 		if(dist>10000)
		 		{
		 			unitComoBox.selectedIndex=1;
		 			var multiple:Number=unitComoBox.selectedItem.data;
		 			var tempTxt:Number=measureResult/multiple;
		 			resultTxt.text=tempTxt.toFixed(3);
		 		}
		 		//测量完成 清空数组
		 		//mapPoints=new ArrayCollection();
            }
			
			private function measureAreaByGS(geom:Geometry):void{
				geometryService.simplify([geom]);
			}
			
			private function simplifyCompleteHandler(event:GeometryServiceEvent):void
			{
				if (event.result)
				{
					var polygon:Geometry = (event.result as Array)[0];
					var areasAndLengthsParameters:AreasAndLengthsParameters  = new AreasAndLengthsParameters();
					areasAndLengthsParameters.areaUnit = GeometryService.UNIT_SQUARE_METERS;
					areasAndLengthsParameters.polygons = [ polygon ];
					
					geometryService.areasAndLengths(areasAndLengthsParameters, new AsyncResponder(areasAndLengths_resultHandler, areasAndLengths_faultHandler));

					//geometryService.project([ polygon ], new SpatialReference(54034), new AsyncResponder(project_resultHandler, project_faultHandler, polygon));
				}
			}
			private function areasAndLengths_resultHandler(result:AreasAndLengthsResult, token:Object = null):void
			{
				const area:Number = result.areas[0];
				
				measureResult=area;
				resultTxt.text=measureResult.toFixed(3);
				resultTip.text="面积测量结果:";
				var units:Array = new Array();
				units.push({label:"平方米",data:1});
				units.push({label:"平方公里",data:1000000});
				unitComoBox.dataProvider=units;
				
				if(area>99999)
				{
					unitComoBox.selectedIndex=1;
					var multiple:Number=unitComoBox.selectedItem.data;
					var tempTxt:Number=measureResult/multiple;
					resultTxt.text=tempTxt.toFixed(3);
				}
				unitComoBox.visible=true;
				
			}
			
			private function areasAndLengths_faultHandler(fault:Fault, token:Object = null):void
			{
				Alert.show("面积计算过程中出现错误！", "提示信息");
			}

			
            private function measureArea(geom:Geometry):void
            {
            	var area:Number=0;
		  		var mapPtAry:Array=new Array();
		  		var polygon:Polygon=geom as Polygon;
		  		var mapPoint:MapPoint=new MapPoint();
		  		for(var m:Number=0;m<polygon.rings[0].length;m++)
		  		{
		  			mapPoint=polygon.getPoint(0,m);
		  			mapPtAry.push(mapPoint);
		  		}
		  		
		  		var i:Number=0;
		  		var j:Number=mapPtAry.length-1;
		  		var XjYi:Number=0;
		  		var XiYj:Number=0;
		  		var xyDiff:Number=0;

		  		for(i=0;i<mapPtAry.length;i++)
		  		{
		       		XiYj=mapPtAry[i].x*mapPtAry[j].y;
		       		XjYi=mapPtAry[j].x*mapPtAry[i].y;
		       		xyDiff=(XiYj-XjYi);
		       		area =area+ xyDiff;
		       		j=i;
				}
		  		area = Math.abs(area/ 2);
		 	 	measureResult=area;
				resultTxt.text=measureResult.toFixed(3);
				resultTip.text="面积测量结果:";
				var units:Array = new Array();
		 		units.push({label:"平方米",data:1});
		 		units.push({label:"平方公里",data:1000000});
		 		unitComoBox.dataProvider=units;
		 		if(area>99999)
		 		{
		 			unitComoBox.selectedIndex=1;
		 			var multiple:Number=unitComoBox.selectedItem.data;
		 			var tempTxt:Number=measureResult/multiple;
            		resultTxt.text=tempTxt.toFixed(3);

		 		}
		 		unitComoBox.visible=true;
		 		
            }
            private function unitChanged():void
            {
            	var multiple:Number=unitComoBox.selectedItem.data;
            	var tempTxt:Number=measureResult/multiple;
            	resultTxt.text=tempTxt.toFixed(3);
            }			
			
			protected function onFault(event:FaultEvent):void
			{
				Alert.show("几何服务不可用或出现错误！", "提示信息");
			}
			
			private function btnClear_Click(event:MouseEvent):void{
				if(graphicsLayer){
					graphicsLayer.clear();
					unitComoBox.visible=false;
					resultTxt.text='';
					resultTip.text='';
				}
				setMapNavigation(NavigationTool.PAN, "漫游");
				drawpoly.source = ICON_URL + 'tool_poly.png';
				drawline.source = ICON_URL + 'tool_line.png';
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<esri:GeometryService url="{gsurl}" id="geometryService"  showBusyCursor="true"  
							  simplifyComplete="simplifyCompleteHandler(event)"
							  fault="onFault(event)" />
	</fx:Declarations>
		
	<viewer:WidgetTemplate id="widgetTempalte" width="320" height="170" 
		minHeight="140" minWidth="280" closed="measureClosed()" open="measureOpened()">
		<viewer:layout>
			<s:VerticalLayout gap="4" paddingTop="0"/>
		</viewer:layout>
		<mx:VBox height="100%" verticalAlign="middle"  width="100%" horizontalAlign="center">
			<mx:Text text="选择一种方式在地图上进行量测："  width="100%" textAlign="center"/>
			<mx:HBox horizontalAlign="center" verticalAlign="middle" horizontalGap="12" width="100%">
				<mx:VBox horizontalAlign="center" verticalGap="2">
					<mx:Label text="长度测量" />
					<mx:Image id="drawline" click="{activateDrawTool(DrawTool.POLYLINE, null)}" source="{ICON_URL + 'tool_line.png'}" useHandCursor="true" buttonMode="true" toolTip="{lineLabel}" width="32" height="32"/>
	  			</mx:VBox>
	  			<mx:VBox horizontalAlign="center" verticalGap="2">
					<mx:Label text="面积测量" />
					<mx:Image id="drawpoly" click="{activateDrawTool(DrawTool.POLYGON, null)}" source="{ICON_URL + 'tool_poly.png'}" useHandCursor="true" buttonMode="true" toolTip="{polygonLabel}" width="32" height="32"/>
	  			</mx:VBox>
	  			<mx:VBox horizontalAlign="center" verticalGap="2">
					<mx:Label text="清除" />
					<mx:Image id="imgClear" click="btnClear_Click(event)" source="{ICON_URL + 'tool_clear.png'}" useHandCursor="true" buttonMode="true" toolTip="{clearLabel}" width="32" height="32"/>
				
	  			</mx:VBox>
			</mx:HBox>
			<mx:HBox verticalAlign="middle" >		
				<mx:Text id="resultTip" fontSize="12" />
				<mx:Text id="resultTxt" fontSize="12" />
				<mx:ComboBox id="unitComoBox" visible="false" change="unitChanged()" />
			</mx:HBox>
		</mx:VBox>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
