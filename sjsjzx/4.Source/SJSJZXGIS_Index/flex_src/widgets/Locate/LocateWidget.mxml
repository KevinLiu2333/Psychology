<?xml version="1.0" encoding="utf-8"?>
<!--
	 ////////////////////////////////////////////////////////////////////////////////
	 //
	 // Copyright (c) 2003-2009 Wonders Information Co.,Ltd. All Rights Reserved.
	 // 5-6/F, 20 Bldg, 481 Guiping RD. Shanghai 200233,PRC
	 //
	 // This software is the confidential and proprietary information of Wonders Group.
	 // (Research & Development Center). You shall not disclose such
	 // Confidential Information and shall use it only in accordance with
	 // the terms of the license agreement you entered into with Wonders Group.
	 //
	 // Distributable under GUN LGPL license by gun.org
	 ////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget xmlns="com.esri.viewer.*"
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:esri="http://www.esri.com/2008/ags"
			widgetConfigLoaded="init()"
			initialize="basewidget1_initializeHandler(event)"
			xmlns:aotoSuggest="com.wonders.aotoSuggest.*"
		    creationComplete="changeTitle()"
			>
	<mx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.*;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.*;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.ags.utils.GraphicUtil;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.UrlUtil;
			import com.esri.viewer.utils.UtilsClass;
			import com.esri.viewer.utils.WidgetEffects;
			
			import flash.sampler.Sample;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.StringUtil;
			
			import widgets.Query.FWSymbol;
			
			private var configRoad:Array;
			private var configDistrict:Array;
			private var graphicsLayer:GraphicsLayer = new GraphicsLayer();
			private var districtLayer:String;
			private var districtExpr:String;
			private var streetsLayer:String;
			private var streetsExpr:String;
			private var streetsNameFields:String;
			private var streetsNameLayer:String;
			private var streetsNameExpr:String;

			private var houseNumFields:String;
			private var houseNumLayer:String;
			private var houseNumeExpr:String;

			private var outlineSym:SimpleLineSymbol;
			private var graphicPolySym:SimpleFillSymbol;
			private const ICON_URL:String=UrlUtil.URL_DOMAIN + "assets/images/icons/";
			private var districtScale:Number;
			private var pictureSym:PictureMarkerSymbol;
			
			[Bindable]
			private var configRoads:ArrayCollection;
			
			[Bindable]
			private var configRoads1:ArrayCollection;
			
			[Bindable]
			private var configRoads2:ArrayCollection;
			
			[Bindable]
			private var configRoads3:ArrayCollection;
			
			[Bindable]
			private var configDistricts:ArrayCollection;
			
			[Bindable]
			private var gridVisible:Boolean=false;
			
			[Bindable]
			private var msgVisible:Boolean=false;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_redclear.png")]
			
			public var Clear:Class;
			
			private var queryfieldArr:Array=new Array;
			private var resultFWFieldsCN:Array;
			private var resultFWFields:Array;
			private var layerService:String="";
			private var expr:String="";
			private var queryfieldsStr:String="";
			private var extentUrl:String;
			private var extentFields:String;
			private var fwFieldsCNStr:String;
			private var queryResultCount:int=-1;
			

			private function changeTitle():void
			{
				wTemplate.widgetTitle = "定位";
			}
			private function init():void
			{

				setMapNavigation(NavigationTool.PAN, "漫游");
				map.addLayer(graphicsLayer);
				outlineSym=new SimpleLineSymbol("solid", 0xFF0000, 0.4, 2);
				graphicPolySym=new SimpleFillSymbol(SimpleFillSymbol.STYLE_CROSS, 0xFF0000, 0.2, outlineSym);
			
				pictureSym=new PictureMarkerSymbol(ICON_URL + "i_markstar_1.png", 40, 40);
				wTemplate.addTitlebarButton(ICON_URL + "i_dis.png", "定位", showStreetLocator);
				if (configXML)
				{
					extentFields=configXML.layers.extentLayer.fields;
					resultFWFields = extentFields.split(",");
					fwFieldsCNStr = configXML.layers.extentLayer.fieldsCN;
					resultFWFieldsCN = fwFieldsCNStr.split(",");
					extentUrl = configData.gisdata_UrlROOT + configXML.layers.extentLayer.url;
					expr=configXML.where||"NAME like '%[value]%'";
					queryfieldsStr=configXML.queryfields||"NAME,CADNAME";
					queryfieldArr=queryfieldsStr.split(",");
					layerService=gisdata_UrlROOT+configXML.layerService||"arcgis/rest/services/SJMap/MapServer";
					//初始区县定位的scale
					districtScale=configXML.districtScale;
					
					//初始区县定位
					districtLayer=gisdata_UrlROOT + configXML.districtQuery.url;
					districtExpr=configXML.districtQuery.expression;
					//初始街道定位
					streetsLayer= gisdata_UrlROOT + configXML.streetsQuery.url;
					streetsExpr=configXML.streetsQuery.expression;
					
					//初始街道与区县级联
					streetsNameLayer=gisdata_UrlROOT + configXML.streetsNameQuery.url;
					streetsNameExpr=configXML.streetsNameQuery.expression;
					streetsNameFields=configXML.streetsNameQuery.outfields;
					
					
					
					//初始道路自动完成下拉框数据源
					configRoad=new Array();
					var roadList:XMLList=configXML.roads.road;
					for (var j:Number=0; j < roadList.length(); j++)
					{
						var roadName:String=roadList[j].@name;
						configRoad.push(roadName);
					}
					
					configRoads = new ArrayCollection(configRoad);
					//configRoads.addItemAt("---请选择---",0);
					
					configRoads1 = new ArrayCollection(configRoad);
					configRoads2 = new ArrayCollection(configRoad);
					configRoads3 = new ArrayCollection(configRoad);
					//初始街镇下拉框数据源
					configDistrict = new Array();
					configDistrict.push("----请选择----");
					var districtList:XMLList=configXML.districts.district;
					for (var i:Number=0; i < districtList.length(); i++)
					{
						var districtName:String=districtList[i].name;
						var districtValue:String=districtList[i].value;
						var district:Object={label: districtName, data: districtValue};
						configDistrict.push(district);
					}
					configDistricts=new ArrayCollection(configDistrict);
					
				}
				//居委和交叉路口2不可编辑
				crossLocateCbo.enabled = false;
				streetLocateCbo1.enabled = false;
				//streetsBind();
				fetchSharedData("getStreet");
				
			}
			
			private function dataSentHandler(event:AppEvent):void
			{
				var key:String=event.data.key.toString();
				if(key=="getStreet")
				{
					if(event.data.data)
					{
						findStreetByCode(event.data.data);
					}
				}
			}
			
			
			
			private function sharedDataUpdated(event:AppEvent):void
			{	
				var key:String = event.data.key;
				if(key=="getStreet")
				{
					if(event.data.data)
					{
						findStreetByCode(event.data.data);
					}
				}
			}
			
			private function findStreetByCode(object:Object):void
			{
				var code:String=object.code;
				if(configDistricts&&configDistricts.length>0)
				{
					for(var m:int=0;m<configDistricts.length;m++)
					{
						if(configDistricts[m].data==code)
						{
							districtLocateCbo.selectedItem=configDistricts[m];
							streetsBind();
							districtLocate();
							break;
						}
					}
				}
				
			}
				
			private function showStreetLocator():void
			{
				//WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 0, 400);
				wTemplate.widgetTitle = "定位";
				viewStack.selectedIndex=0;
				wTemplate.selectedTitlebarButtonIndex=0;
				this.showInfoWindow(null);
				
			}

			private function districtLocate():void
			{
				graphicsLayer.clear();
				var queryTask:QueryTask=new QueryTask(districtLayer);
				var query:Query=new Query();
				var expr:String=districtExpr.replace("[value]", districtLocateCbo.selectedItem.data);
				query.where=expr;
				query.returnGeometry=true;
				queryTask.showBusyCursor=true;
				queryTask.execute(query, new AsyncResponder(onstreetResult, onstreetFault));
				function onstreetResult(featureSet:FeatureSet, token:Object=null):void
				{
					try
					{
						for each (var gra:Graphic in featureSet.features)
						{
							switch (gra.geometry.type)
							{

								case Geometry.POLYGON:
								{
									gra.symbol=graphicPolySym;
									break;
								}



							}
							var pt:MapPoint=getGeomCenter(gra);
							//setMapNavigation(ViewerContainer.NAVIGATION_ZOOM_FULL, "全图");
							map.centerAt(pt);
							map.scale=districtScale;
							graphicsLayer.add(gra);
							setMapNavigation(NavigationTool.PAN, "漫游");

						}
					}
					catch (e:Error)
					{
						Alert.show(e.toString());
					}

				}
				function onstreetFault(info:Object, token:Object=null):void
				{
					Alert.show(info.toString());
				}

			}



			private function getGeomCenter(gra:Graphic):MapPoint
			{
				var pt:MapPoint;
				switch (gra.geometry.type)
				{
					case Geometry.MULTIPOINT:
					{
						var multiPoint:Multipoint=Multipoint(gra.geometry);
						pt=MapPoint(multiPoint.points[0]);
						break;

					}
					case Geometry.MAPPOINT:
					{
						pt=gra.geometry as MapPoint;
						break;
					}

					case Geometry.POLYLINE:
					{
						var pl:Polyline=gra.geometry as Polyline;
						var pathCount:Number=pl.paths.length;
						var pathIndex:int=int((pathCount / 2) - 1);
						var midPath:Array=pl.paths[pathIndex];
						var ptCount:Number=midPath.length;
						var ptIndex:int=int((ptCount / 2) - 1);
						pt=pl.getPoint(pathIndex, ptIndex);
						break;
					}

					case Geometry.POLYGON:
					{
						var poly:Polygon=gra.geometry as Polygon;
						pt=poly.extent.center;
						break;
					}

				}
				return pt;
			}

			private function streetsBind():void
			{
				var streetsPro:String=districtLocateCbo.selectedItem.data.toString();
				streetsNameQuery(streetsPro);
				districtLocate();
				streetLocateCbo1.enabled = true;
			}

			private function streetsNameQuery(streetName:String):void
			{
				graphicsLayer.clear();
				var queryTask:QueryTask=new QueryTask(streetsNameLayer);
				var query:Query=new Query();
				var expr:String=streetsNameExpr.replace("[value]", streetName);
				query.where=expr;
				query.outFields=streetsNameFields.split(",");
				query.returnGeometry=false;
				queryTask.showBusyCursor=true;
				queryTask.execute(query, new AsyncResponder(onResult, onFault));
				function onResult(featureSet:FeatureSet, token:Object=null):void
				{
					try
					{
						var streetsNameArr:Array=new Array();
						for each (var gra:Graphic in featureSet.features)
						{
							var obj:Object=gra.attributes;
							var jwmc:String=obj.NAME.toString();
							var dataobj:Object={label: jwmc, data: jwmc}
							streetsNameArr.push(dataobj);
						}
						streetLocateCbo1.dataProvider=streetsNameArr;
						setMapNavigation(NavigationTool.PAN, "漫游");
					}

					catch (e:Error)
					{
						Alert.show(e.toString());
					}

				}
				function onFault(info:Object, token:Object=null):void
				{
					Alert.show(info.toString());
				}
			}

			private function streetLocate():void
			{
				CursorManager.setBusyCursor();
				graphicsLayer.clear();
				var queryTask:QueryTask=new QueryTask(streetsLayer);
				var query:Query=new Query();
				var expr:String=streetsExpr.replace("[value]", streetLocateCbo1.selectedItem.data.toString());
				query.where=expr;
				query.returnGeometry=true;
				queryTask.showBusyCursor=true;
				queryTask.execute(query, new AsyncResponder(onResult, onFault));
				function onResult(featureSet:FeatureSet, token:Object=null):void
				{
				   CursorManager.removeBusyCursor();
					try
					{
						for each (var gra:Graphic in featureSet.features)
						{
							switch (gra.geometry.type)
							{
								case Geometry.POLYGON:
								{
									gra.symbol=graphicPolySym;
									break;
								}
							}
							var pt:MapPoint=getGeomCenter(gra);
							map.centerAt(pt);
							map.extent=Polygon(gra.geometry).extent.expand(2);
							graphicsLayer.add(gra);
							setMapNavigation(NavigationTool.PAN, "漫游");
						}
					}
					catch (e:Error)
					{
						Alert.show(e.toString());
					}

				}
				function onFault(info:Object, token:Object=null):void
				{
					CursorManager.removeBusyCursor();
					Alert.show(info.toString());
				}

			}



			private function clear():void
			{
				graphicsLayer.clear();
			}

			private function locateWidgetClosed():void
			{
				graphicsLayer.visible=false;
				setMapNavigation(NavigationTool.PAN, "漫游");
			}

			private function locateWidgetOpened():void
			{
				graphicsLayer.visible=true;
				setMapNavigation(NavigationTool.PAN, "漫游");
				
			}
			private function crossRoadQuery():void
			{
				var roadName:String=roadNameIpt.value.toString();
				var httpservice:HTTPService=new HTTPService();
				httpservice.url= servlet_UrlROOT+configXML.crossLocateInfo.url;
				httpservice.addEventListener(FaultEvent.FAULT, onFault);
				httpservice.addEventListener(ResultEvent.RESULT, onResult);
				httpservice.showBusyCursor=true;
				httpservice.resultFormat="e4x";
				var obj:Object=new Object();
				obj.flag="crossRoadFlag";
				obj.roadName=roadName;
				obj.returnType="xml";
				httpservice.send(obj);
				function onResult(event:ResultEvent):void
				{
					var roadResults:XML=event.result as XML;
					if (roadResults != null)
					{
						var roadArr:Array=new Array;
						var roadlist:XMLList=roadResults.crossRoad;
						for (var i:Number=0; i < roadlist.length(); i++)
						{
							var roadName:String=roadlist[i].roadName;
							var roadX:Number=Number(roadlist[i].X);
							var roadY:Number=Number(roadlist[i].Y);
							
							var obj:Object={label: roadName, X: roadX, Y: roadY}
							roadArr.push(obj);
						}
						crossLocateCbo.dataProvider=roadArr;
						crossLocateCbo.enabled=true;
						crossLocateCbo.open();
					}
					else
					{
						Alert.show("没有找到符合该名称的道路");
						crossLocateCbo.enabled=false;
					}
					
				}
				function onFault(event:FaultEvent):void
				{
					Alert.show(event.toString());
				}
			}
			private function crossPointLocate():void
			{
				graphicsLayer.clear();
				var x:Number=crossLocateCbo.selectedItem.X;
				var y:Number=crossLocateCbo.selectedItem.Y;
				var crossPoint:MapPoint=new MapPoint(x, y);
				var gra:Graphic=new Graphic();
				gra.geometry=Geometry(crossPoint);
				gra.symbol=pictureSym;
				graphicsLayer.add(gra);
				map.centerAt(crossPoint);
				map.scale=4700;
			}
			private function  sheetLocate():void
			{
				graphicsLayer.clear();
				var rowNum:String= StringUtil.trim(sheetRowNum.text);
				var colNum:String=StringUtil.trim(sheetColNum.text);
				var Name:String="";
				if(rowNum==""||colNum=="")
				{
					Alert.show("行号和列号不能为空，请重新填写");
				}
				else
				{
					Name=Name+rowNum+"_"+colNum;
					var queryTask:QueryTask=new QueryTask(layerService);
					var query:Query=new Query();
					query.outFields=queryfieldArr;
					query.returnGeometry=true;
					query.where=expr.replace("[value]",Name);
					queryTask.showBusyCursor=true;
					queryTask.execute(query,new AsyncResponder(onResultHandler,onFaultHandler));
				}
				
			}
			private function onResultHandler(featureSet:FeatureSet, token:Object=null):void
			{
				
				try
				{
					if(featureSet.features&&featureSet.features.length>0)
					{
						for each (var gra:Graphic in featureSet.features)
						{
							switch (gra.geometry.type)
							{
								case Geometry.POLYGON:
								{
									gra.symbol=graphicPolySym;
									graphicsLayer.add(gra);
									break;
								}
							}
						}
						UtilsClass.zoomToGraphics(map,graphicsLayer);
					}
					else
					{
						Alert.show("没有查询到图幅位置，请重新填写");
					}
				}
				catch (e:Error)
				{
					Alert.show(e.toString());
				}
			}
			private function onFaultHandler(info:Object, token:Object=null):void
			{
				Alert.show(info.toString());
			}
			//查询事件
			private function textQuery():void{
				//CursorManager.removeAllCursors();
				CursorManager.setBusyCursor();
				this.showInfoWindow(null);
				graphicsLayer.clear();
				
				if (extentUrl){
					var roadName:String=roadNameIpt2.value.toString();
					var queryTask:QueryTask=new QueryTask(extentUrl);
					var query:Query=new Query();
					var expr:String = "1=1";
					
					if(roadName != ""){
						expr += " and NAME  like '%" + roadName + "%'";
					}
					query.where=expr;
					query.outFields=extentFields.split(",");
					query.returnGeometry=true;
					queryTask.showBusyCursor=true;
					queryTask.execute(query, new AsyncResponder(ontextResult, ontextFault));
				}else{
					CursorManager.removeAllCursors();
					showStateResults();
					showMessage("查询图层不存在", false,true);
				}
				
			}
			private function showMessage(msg:String, swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				msgVisible=boxMessageVisible;
			}
			private function showStateResults():void
			{
				graphicsLayer.visible=true;
				this.showInfoWindow(null);
				
			}
			private function createRecordData(featureSet:FeatureSet):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				for each (var gra:Graphic in featureSet.features)
				{
					gra.symbol=FWSymbol.htjgGraphicSymbol;
					//数据构造部分
					var obj:Object=gra.attributes;
					var fld:String="";
					var value:String="";
					var content:String="";
					var point:MapPoint=getGeomCenter(gra);
					var fldAliases:Object=featureSet.fieldAliases;
					var name:String="";
					var link:String="";
					var temp:String="";
					var fieldStr:String="";
					var misId:String="";
					//判断是Title还是Content
					for (fld in obj)
					{
						if(obj[fld]&&obj[fld].toString()!="")
						{
							if(obj[fld].toString()=="NULL")
							{
								obj[fld]="";
							}else
							{
								value=obj[fld].toString();
								if (fld.toUpperCase() == "NAME")
								{
									name = value;
								}
							}
						}
					}
					if(resultFWFieldsCN)
					{
						for(var i:int = 0;i < resultFWFieldsCN.length;i++ )
						{
							if(resultFWFields[i]&& resultFWFields[i].toString()!=""&&resultFWFields[i].toString()!="NULL")
							{
								if(resultFWFields[i]&& resultFWFields[i].toString()!=""&&resultFWFields[i].toString()!="NULL")
								{
									temp = resultFWFields[i].toString();
									fieldStr=obj[temp]||"";
									content+=resultFWFieldsCN[i].toString() + ": " + fieldStr+";";									
									
								}
							}
							
						}
					}
					var infoData:Object={NAME:name, content: content,link:link,  point: point, graphic: gra};
					gra.attributes=infoData;
					graphicsLayer.add(gra);
					if(recAC&&recAC.length==0){
						recAC.addItem(infoData);
					}else {
						for(var j:int=0;j<recAC.length;j++){
							var code:String=recAC[j].NAME;
							if(name==code){
								if(recAC[j].graphicsArrCol&&recAC[j].graphicsArrCol.length>0){
									
									recAC[j].graphicsArrCol.addItem(gra);
								}else{
									var graphicsArrCol:ArrayCollection=new ArrayCollection;
									graphicsArrCol.addItem(recAC[j].graphic);
									graphicsArrCol.addItem(gra);
									recAC[j].graphicsArrCol=graphicsArrCol;
								}
								break;
							}else if(j==recAC.length-1){
								recAC.addItem(infoData);
							}
						}
					}
				}
				return recAC;
			}
			private function ontextResult(featureSet:FeatureSet, token:Object=null):void
			{
				
				CursorManager.removeAllCursors();
				this.showInfoWindow(null);
				if (featureSet.features.length > 0)
				{
					try
					{  
						var recAC:ArrayCollection=createRecordData(featureSet);
						queryResultCount=recAC.length;
						gridVisible=true;
						showMessage("", false,false);
						//UtilsClass.zoomToGraphics(map,extentGraphicsLayer);
						var graphicProvider:ArrayCollection = graphicsLayer.graphicProvider as ArrayCollection;
						var graphicsExtent:Extent = GraphicUtil.getGraphicsExtent(graphicProvider.toArray());
						if(graphicsExtent){
							map.extent = graphicsExtent.expand(0.5);
							if (!map.extent.contains(graphicsExtent)){
								map.level--;
							}
						}
					}
					catch (error:Error)
					{
						showMessage(error.message, false,true);
					}
				}
				else
				{
					showMessage("暂无符合条件的记录!", false,true);
					showStateResults();
					//					resultWidget.widgetTitle="基地图层查询结果（合计"+0+"条)";
				}
			}
			//on fault
			private function ontextFault(info:Object, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				showMessage(info.toString(), false,true);
				showStateResults();
			}
			protected function basewidget1_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				ViewerContainer.addEventListener(AppEvent.DATA_SENT,dataSentHandler);
				ViewerContainer.addEventListener(AppEvent.DATA_PUBLISH, sharedDataUpdated);
			}

		]]>
	</mx:Script>
	<WidgetTemplate id="wTemplate" closed="locateWidgetClosed()" open="locateWidgetOpened()"
					width="320" height="300">
		<mx:ViewStack id="viewStack"
					  width="100%"
					  height="100%"
					  creationPolicy="all">
			<mx:VBox width="100%" height="100%" verticalGap="1" horizontalAlign="center">
				<mx:Form id="frmLocateCoords"  verticalScrollPolicy="auto" width="100%" paddingBottom="4"
						 paddingTop="20" paddingLeft="4" paddingRight="2" verticalGap="10" horizontalGap="4">
					<mx:FormItem  label="街镇定位" styleName="WidgetText" direction="horizontal">
						<!--<aotoSuggest:AutoSuggest id="districtLocateCbo" width="130"
												dataProvider="{configDistricts}"
											    alpha="1"
												/>-->
						<mx:ComboBox id="districtLocateCbo"  width="130" height="22" dataProvider="{configDistricts}"/>
						<mx:Button label="定位" click="streetsBind()" width="50"/>
					</mx:FormItem>
					<mx:FormItem label="居委定位" styleName="WidgetText" direction="horizontal">
						<mx:ComboBox id="streetLocateCbo1" width="130" height="22" enabled="{streetLocateCbo1.enabled}" alpha="1"/>
						<mx:Button label="定位" click="streetLocate()" width="50" enabled="{streetLocateCbo1.enabled}"/>
					</mx:FormItem>
					<mx:FormItem label="交叉路口1" styleName="WidgetText" direction="horizontal">
						<aotoSuggest:AutoSuggest id="roadNameIpt" width="130"
												 dataProvider="{configRoads2}" 
												 alpha="1"
												 height="22"
												 />
						<!--
						<mx:ComboBox id="roadNameIpt" width="130" enabled="true"  dataProvider="{configRoads1}"
									 change="crossRoadQuery()"/>
						-->
						<mx:Button id="crossLocateBtn" label="定位"  click="crossRoadQuery()" width="50" />
					</mx:FormItem>
					<mx:FormItem label="交叉路口2" styleName="WidgetText" direction="horizontal">
						<mx:ComboBox id="crossLocateCbo" width="130" height="22"  enabled="{crossLocateCbo.enabled}" alpha="1"/>
						<!--<aotoSuggest:AutoSuggest id="crossLocateCbo" width="130"
												 dataProvider="{configRoads2}" 
												 enabled="{crossLocateCbo.enabled}"
												 change="crossPointLocate()"/>
						
						-->
						<mx:Button id = "crossLocateCboButton" label="定位" click="crossPointLocate()"
								   enabled="{crossLocateCbo.enabled}" width="50" />
						
					</mx:FormItem>
					<mx:FormItem label="道路定位"  styleName="WidgetText" direction="horizontal">
						<aotoSuggest:AutoSuggest id="roadNameIpt2" width="130"
												 dataProvider="{configRoads3}"
												 alpha="1"
												 height="22"
												 />
						<mx:Button  label="定位"  click="textQuery()" width="50"/>
					</mx:FormItem>
					<mx:HBox  horizontalAlign="center"  horizontalGap="5">
						<mx:Label text="行号" styleName="WidgetText" verticalCenter="center" />
						<mx:TextInput id="sheetRowNum" restrict="0-9\\a-zA-z" width="66" height="22"/>
						<mx:Label text="列号" styleName="WidgetText" verticalCenter="center" />
						<mx:TextInput id="sheetColNum"  restrict="0-9\\a-zA-z" width="66" height="22"/>
						<mx:Button label="定位" click="sheetLocate()" width="50" />
					</mx:HBox>	
					<mx:Label  color="red" text="示例：行号”I069“ 列号”019“" visible="true"  styleName="WidgetText"/>
				</mx:Form>
			</mx:VBox>
		</mx:ViewStack>
	</WidgetTemplate>
</BaseWidget>
