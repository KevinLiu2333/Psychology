<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:circle="com.wonders.circle.*"
				   xmlns:comp="com.esri.viewer.components.*"
				   xmlns:aotoSuggest="com.wonders.aotoSuggest.*"
				   widgetConfigLoaded="widgetConfigLoadedHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Multipoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.ags.utils.GraphicUtil;
			import com.esri.viewer.utils.UrlUtil;
			import com.esri.viewer.utils.UtilsClass;
			import com.wonders.polygontopoint.PolygonToPointLayer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.StringUtil;
			
			import widgets.InfoTemplates.InfoPopupWidget;
			import widgets.Query.FWSymbol;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_query.png")]
			public var Search:Class;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_redclear.png")]
			public var Clear:Class;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_dk_information1.png")]
			public var Information:Class;
			
			[Bindable]
			private var msgVisible:Boolean=false;
			[Bindable]
			private var configRoads:ArrayCollection;
			private var configRoad:Array;
			
			[Bindable]
			private var gridVisible:Boolean=false;
			
			private const ICON_URL:String= UrlUtil.URL_DOMAIN + "assets/images/icons/";
			private var extentGraphicsLayer:GraphicsLayer;
			private var extentUrl:String;
			private var extentFields:String;
			private var extentLinkfield:String;
			private var linkUrl:String;
			private var extentExpression:String;
			
			private var extentIcon:String;
			private var fwFieldsCNStr:String;
			private var resultFWFields:Array;
			private var resultFWFieldsCN:Array;
			
			private var yearURL:String;
			private var configYear:Array;
			
			private var flag:String = "1";
			
			private var wTitle:String="";
			private var queryResultCount:int=-1;
			
			//窗口初始化事件
			protected function widgetConfigLoadedHandler(event:Event):void
			{
				setMapNavigation(NavigationTool.PAN, "漫游");
				// TODO Auto-generated method stub
				extentGraphicsLayer=new GraphicsLayer;
				extentGraphicsLayer.addEventListener(MouseEvent.CLICK,mouseClickGraphic);
				map.addLayer(extentGraphicsLayer);
				configRoad=new Array();
				if (configXML)
				{
					
					extentUrl = configData.gisdata_UrlROOT + configXML.layers.extentLayer.url;
					//初始道路自动完成下拉框数据源
					var roadList:XMLList=configXML.roads.road;
					for (var j:Number=0; j < roadList.length(); j++)
					{
						var roadName:String=roadList[j].@name;
						configRoad.push(roadName);
					}
					configRoads=new ArrayCollection(configRoad);
					extentFields=configXML.layers.extentLayer.fields;
					extentLinkfield=configXML.layers.extentLayer.linkfield;
					linkUrl=configData.project_UrlROOT+configXML.layers.extentLayer.linkURL;
					resultFWFields = extentFields.split(",");
					fwFieldsCNStr = configXML.layers.extentLayer.fieldsCN;
					resultFWFieldsCN = fwFieldsCNStr.split(",");
				}			
			}
			private function showStateResults():void
			{
				extentGraphicsLayer.visible=true;
				flag = "3";
				//viewStack.selectedIndex=2;
				this.showInfoWindow(null);
				
			}
			
			//查询事件
			private function textQuery():void{
				//CursorManager.removeAllCursors();
				CursorManager.setBusyCursor();
				this.showInfoWindow(null);
				extentGraphicsLayer.clear();
				gridVisible=false;
				showMessage("正在查询...", true,true);
				showStateResults();
				
				if (extentUrl){
					var roadName:String=roadNameIpt.value.toString();
					var queryTask:QueryTask=new QueryTask(extentUrl);
					var query:Query=new Query();
					var expr:String = "1=1";
					
					if(roadName != ""){
						expr += " and NAME  like '%" + roadName + "%'";
					}
					query.where=expr;
					query.outFields=extentFields.split(",");
					query.returnGeometry=true;
					queryTask.showBusyCursor=true;
					queryTask.execute(query, new AsyncResponder(ontextResult, ontextFault));
				}else{
					CursorManager.removeAllCursors();
					showStateResults();
					showMessage("查询图层不存在", false,true);
				}
				
			}
			private function ontextResult(featureSet:FeatureSet, token:Object=null):void
			{
				
				CursorManager.removeAllCursors();
				this.showInfoWindow(null);
				if (featureSet.features.length > 0)
				{
					try
					{  
						var recAC:ArrayCollection=createRecordData(featureSet);
						queryResultCount=recAC.length;
						gridVisible=true;
						showMessage("", false,false);
						//UtilsClass.zoomToGraphics(map,extentGraphicsLayer);
						var graphicProvider:ArrayCollection = extentGraphicsLayer.graphicProvider as ArrayCollection;
						var graphicsExtent:Extent = GraphicUtil.getGraphicsExtent(graphicProvider.toArray());
						if(graphicsExtent){
							map.extent = graphicsExtent.expand(0.5);
							if (!map.extent.contains(graphicsExtent)){
								map.level--;
							}
						}
						//map.extent = map.extent.expand(3);
					}
					catch (error:Error)
					{
						showMessage(error.message, false,true);
					}
				}
				else
				{
					showMessage("暂无符合条件的记录!", false,true);
					showStateResults();
					//					resultWidget.widgetTitle="基地图层查询结果（合计"+0+"条)";
				}
			}
			/**
			 * 重写infowindow方法
			 * */
			override public function showInfoWindow(infoData:Object):void
			{
				if (infoData)
				{
					var infoTemplate:InfoPopupWidget = new InfoPopupWidget();
					map.infoWindow.setStyle("contentBackgroundAlpha", 0.95);
					map.infoWindow.setStyle("backgroundAlpha", 0.95);
					map.infoWindow.setStyle("backgroundColor", 0xCBE5FE);
					map.infoWindow.content = infoTemplate as UIComponent;
					map.infoWindow.label=infoData.label;
					infoTemplate.data = infoData;
					map.infoWindow.show(infoData.point);
				}
				else
				{
					map.infoWindow.hide();
				}
			}
			//on fault
			private function ontextFault(info:Object, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				showMessage(info.toString(), false,true);
				showStateResults();
			}
			//清除查询结果图层
			private function clear():void{
				extentGraphicsLayer.clear();
				this.showInfoWindow(null);
				queryResultCount=-1;
				gridVisible=false;
				msgVisible=false;
				setMapNavigation(NavigationTool.PAN, "漫游");
				
			}
			private function mouseClickGraphic(event:MouseEvent):void
			{
				var graphic:Graphic=event.target as Graphic;
				if(graphic==null){
					graphic=event.target.parent  as Graphic;
				}
				if(graphic!=null){
					if(graphic.geometry is Polygon){
						var gra:Graphic=new Graphic(graphic.geometry,FWSymbol.qszdSelectedGraphicSymbol,graphic.attributes);
					}
					var infoData:Object=graphic.attributes;
					this.showInfoWindow(null);
					//this.showInfoWindow(infoData);
				}
			}
			private function exeQuery(geometry:Geometry):void
			{
				if ((extentUrl) && (geometry))
				{
					var roadName:String=roadNameIpt.value.toString();
					var queryTask:QueryTask=new QueryTask(extentUrl);
					var query:Query=new Query();
					query.outFields=extentFields.split(",");
					var expr:String = "1=1";
					if(roadName != ""){
						expr += " and NAME  like '%" + roadName + "%'";
					}
					query.where=expr;
					query.returnGeometry=true;
					query.geometry=geometry;
					try
					{
						queryTask.execute(query, new AsyncResponder(ongraphicalResult, ongraphicalFault));
					}
					catch (error:Error)
					{
						Alert.show(error.toString());
					}
				}
			}
			//on fault
			private function ongraphicalFault(info:Object, token:Object=null):void
			{
				//Alert.show(info.toString());
				CursorManager.removeBusyCursor();
				setMapNavigation(NavigationTool.PAN, "漫游");
				gridVisible=false;
				showMessage(info.toString(), false,true);
			}
			
			private function ongraphicalResult(featureSet:FeatureSet, token:Object=null):void
			{
				CursorManager.removeBusyCursor();
				if (featureSet.features.length > 0)
				{
					try
					{
						var recAC:ArrayCollection=createRecordData(featureSet);
						queryResultCount=recAC.length;
						showMessage("", false,false);
						gridVisible=true;
					}
					catch (error:Error)
					{
						showMessage(error.message, false,true);
					}
				}
				else
				{
					showMessage("暂无符合条件的记录！", false,true);
				}
			}
			private function createRecordData(featureSet:FeatureSet):ArrayCollection
			{
				var recAC:ArrayCollection=new ArrayCollection();
				for each (var gra:Graphic in featureSet.features)
				{
					gra.symbol=FWSymbol.htjgGraphicSymbol;
					//数据构造部分
					var obj:Object=gra.attributes;
					var fld:String="";
					var value:String="";
					var content:String="";
					var point:MapPoint=getGeomCenter(gra);
					var fldAliases:Object=featureSet.fieldAliases;
					var name:String="";
					var link:String="";
					var temp:String="";
					var fieldStr:String="";
					var misId:String="";
					//判断是Title还是Content
					for (fld in obj)
					{
						if(obj[fld]&&obj[fld].toString()!="")
						{
							if(obj[fld].toString()=="NULL")
							{
								obj[fld]="";
							}else
							{
								value=obj[fld].toString();
								if (fld.toUpperCase() == "NAME")
								{
									name = value;
								}
							}
						}
					}
					if(resultFWFieldsCN)
					{
						for(var i:int = 0;i < resultFWFieldsCN.length;i++ )
						{
							if(resultFWFields[i]&& resultFWFields[i].toString()!=""&&resultFWFields[i].toString()!="NULL")
							{
								if(resultFWFields[i]&& resultFWFields[i].toString()!=""&&resultFWFields[i].toString()!="NULL")
								{
									temp = resultFWFields[i].toString();
									fieldStr=obj[temp]||"";
									content+=resultFWFieldsCN[i].toString() + ": " + fieldStr+";";									
									
								}
							}
							
						}
					}
					var infoData:Object={NAME:name, content: content,link:link,  point: point, graphic: gra};
					gra.attributes=infoData;
					extentGraphicsLayer.add(gra);
					if(recAC&&recAC.length==0){
						recAC.addItem(infoData);
					}else {
						for(var j:int=0;j<recAC.length;j++){
							var code:String=recAC[j].NAME;
							if(name==code){
								if(recAC[j].graphicsArrCol&&recAC[j].graphicsArrCol.length>0){
									
									recAC[j].graphicsArrCol.addItem(gra);
								}else{
									var graphicsArrCol:ArrayCollection=new ArrayCollection;
									graphicsArrCol.addItem(recAC[j].graphic);
									graphicsArrCol.addItem(gra);
									recAC[j].graphicsArrCol=graphicsArrCol;
								}
								break;
							}else if(j==recAC.length-1){
								recAC.addItem(infoData);
							}
						}
					}
				}
				return recAC;
			}
			private function getGeomCenter(gra:Graphic):MapPoint
			{
				var pt:MapPoint;
				switch (gra.geometry.type)
				{
					case Geometry.MULTIPOINT:
					{
						var multiPoint:Multipoint=Multipoint(gra.geometry);
						pt=MapPoint(multiPoint.points[0]);
						break;
						
					}
					case Geometry.MAPPOINT:
					{
						pt=gra.geometry as MapPoint;
						break;
					}
						
					case Geometry.POLYLINE:
					{
						var pl:Polyline=gra.geometry as Polyline;
						var pathCount:Number=pl.paths.length;
						var pathIndex:int=int((pathCount / 2) - 1);
						var midPath:Array=pl.paths[pathIndex];
						var ptCount:Number=midPath.length;
						var ptIndex:int=int((ptCount / 2) - 1);
						pt=pl.getPoint(pathIndex, ptIndex);
						break;
					}
						
					case Geometry.POLYGON:
					{
						var poly:Polygon=gra.geometry as Polygon;
						pt=poly.extent.center;
						break;
					}
						
				}
				return pt;
			}
			private function showMessage(msg:String, swfVisible:Boolean,boxMessageVisible:Boolean):void
			{
				msgVisible=boxMessageVisible;
			}
			private function locateWidgetClosed():void
			{
				extentGraphicsLayer.visible=false;
				setMapNavigation(NavigationTool.PAN, "漫游");
				this.showInfoWindow(null);
			}
			
			private function locateWidgetOpened():void
			{
				if(extentGraphicsLayer){
					extentGraphicsLayer.visible=true;
				}
				setMapNavigation(NavigationTool.PAN, "漫游");
				this.showInfoWindow(null);
			}
		]]>
	</fx:Script>
	<viewer:WidgetTemplate id="wTemplate" closed="locateWidgetClosed()" open="locateWidgetOpened()"
						   width="320" height="160">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">
			
			<mx:VBox width="100%" height="100%" verticalGap="1" horizontalAlign="center"
					 verticalAlign="middle">
				<mx:Label text="交叉道路定位" styleName="WidgetText"/>
				<mx:Form verticalScrollPolicy="off" paddingTop="2" paddingLeft="4" 
						 paddingBottom="4" paddingRight="2" verticalGap="4" horizontalGap="2">
					<mx:FormItem label="道路名称"  styleName="WidgetText" direction="horizontal">
						<aotoSuggest:AutoSuggest id="roadNameIpt" width="120"
												 dataProvider="{configRoads}"/>
						<!--<mx:Button id="roadNameIpt1" label="查询"  click="crossRoadQuery()"/>-->
						<mx:Button id="roadNameIpt1" label="查询"  click="textQuery()"/>
					</mx:FormItem>
				</mx:Form>
				<mx:Label id="crossRoadMsg" text="" styleName="WidgetText"/>
			</mx:VBox>
		</mx:ViewStack>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
