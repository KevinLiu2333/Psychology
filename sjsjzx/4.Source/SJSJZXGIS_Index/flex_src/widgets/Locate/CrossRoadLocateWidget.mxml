<?xml version="1.0" encoding="utf-8"?>
<!--
	 ////////////////////////////////////////////////////////////////////////////////
	 //
	 // Copyright (c) 2003-2009 Wonders Information Co.,Ltd. All Rights Reserved.
	 // 5-6/F, 20 Bldg, 481 Guiping RD. Shanghai 200233,PRC
	 //
	 // This software is the confidential and proprietary information of Wonders Group.
	 // (Research & Development Center). You shall not disclose such
	 // Confidential Information and shall use it only in accordance with
	 // the terms of the license agreement you entered into with Wonders Group.
	 //
	 // Distributable under GUN LGPL license by gun.org
	 ////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget xmlns="com.esri.viewer.*"
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:esri="http://www.esri.com/2008/ags"
			widgetConfigLoaded="init()"
			xmlns:aotoSuggest="com.wonders.aotoSuggest.*">
	<mx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.*;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.*;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.WidgetEffects;
			
			import flash.sampler.Sample;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import com.esri.viewer.utils.UrlUtil;


			[Bindable]
			private var configRoads:ArrayCollection;
			private var configRoad:Array;
			private var graphicsLayer:GraphicsLayer = new GraphicsLayer();

			private var houseNumFields:String;
			private var houseNumLayer:String;
			private var houseNumeExpr:String;

			private var crossPointFields:String;
			private var crossPointLayer:String;
			private var crossPointExpr:String;

			private var mainRoadGra:Graphic;

			private var pictureSym:PictureMarkerSymbol;
			private const ICON_URL:String=UrlUtil.URL_DOMAIN + "assets/images/icons/";
			private var districtScale:Number;
			
			[Bindable]
			[Embed(source="assets/images/icons/i_redclear.png")]
			public var Clear:Class;
			
			private function init():void
			{

				setMapNavigation(NavigationTool.PAN, "漫游");
				map.addLayer(graphicsLayer);
				pictureSym=new PictureMarkerSymbol(ICON_URL + "i_markstar.png", 40, 40);
				configRoad=new Array();
				wTemplate.addTitlebarButton(ICON_URL + "i_crossroad.png", "交叉路口定位", showJunctionLocator);
				if (configXML)
				{
					//初始道路自动完成下拉框数据源
					var roadList:XMLList=configXML.roads.road;
					for (var j:Number=0; j < roadList.length(); j++)
					{
						var roadName:String=roadList[j].@name;
						configRoad.push(roadName);
					}
					configRoads=new ArrayCollection(configRoad); 
				}
					//初始交叉路口
					crossPointLayer=gisdata_UrlROOT + configXML.crossPointQuery.url;
					crossPointFields=configXML.crossPointQuery.outfields;
					crossPointExpr=configXML.crossPointQuery.expression;
			}
			
			private function showJunctionLocator():void
			{
				//WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 1, 400);
				viewStack.selectedIndex = 1;
				wTemplate.widgetTitle = "交叉路口定位";
			}

			private function getGeomCenter(gra:Graphic):MapPoint
			{
				var pt:MapPoint;
				switch (gra.geometry.type)
				{
					case Geometry.MULTIPOINT:
					{
						var multiPoint:Multipoint=Multipoint(gra.geometry);
						pt=MapPoint(multiPoint.points[0]);
						break;

					}
					case Geometry.MAPPOINT:
					{
						pt=gra.geometry as MapPoint;
						break;
					}
					case Geometry.POLYLINE:
					{
						var pl:Polyline=gra.geometry as Polyline;
						var pathCount:Number=pl.paths.length;
						var pathIndex:int=int((pathCount / 2) - 1);
						var midPath:Array=pl.paths[pathIndex];
						var ptCount:Number=midPath.length;
						var ptIndex:int=int((ptCount / 2) - 1);
						pt=pl.getPoint(pathIndex, ptIndex);
						break;
					}

					case Geometry.POLYGON:
					{
						var poly:Polygon=gra.geometry as Polygon;
						pt=poly.extent.center;
						break;
					}

				}
				return pt;
			}


			private function crossPointLocate():void
			{
				graphicsLayer.clear();
				var x:Number=crossLocateCbo.selectedItem.X;
				var y:Number=crossLocateCbo.selectedItem.Y;
				var crossPoint:MapPoint=new MapPoint(x, y);
				var gra:Graphic=new Graphic();
				gra.geometry=Geometry(crossPoint);
				gra.symbol=pictureSym;
				graphicsLayer.add(gra);
				map.centerAt(crossPoint);
				map.scale=4700;
			}

			private function crossRoadQuery():void
			{
				var roadName:String=roadNameIpt.value.toString();
				var httpservice:HTTPService=new HTTPService();
				httpservice.url= servlet_UrlROOT+configXML.crossLocateInfo.url;
				httpservice.addEventListener(FaultEvent.FAULT, onFault);
				httpservice.addEventListener(ResultEvent.RESULT, onResult);
				httpservice.showBusyCursor=true;
				httpservice.resultFormat="e4x";
				var obj:Object=new Object();
				obj.flag="crossRoadFlag";
				obj.roadName=roadName;
				obj.returnType="xml";
				httpservice.send(obj);
				function onResult(event:ResultEvent):void
				{
					var roadResults:XML=event.result as XML;
					if (roadResults != null)
					{
						var roadArr:Array=new Array;
						var roadlist:XMLList=roadResults.crossRoad;
						for (var i:Number=0; i < roadlist.length(); i++)
						{
							var roadName:String=roadlist[i].roadName;
							var roadX:Number=Number(roadlist[i].X);
							var roadY:Number=Number(roadlist[i].Y);

							var obj:Object={label: roadName, X: roadX, Y: roadY}
							roadArr.push(obj);
						}
						crossLocateCbo.dataProvider=roadArr;
						crossLocateCbo.enabled=true;
						crossRoadMsg.text="";
					}
					else
					{
						crossRoadMsg.text="没有找到符合该名称的道路。";
						crossLocateCbo.enabled=false;
					}

				}
				function onFault(event:FaultEvent):void
				{
					Alert.show(event.toString());
				}
			}

			private function clear():void
			{
				graphicsLayer.clear();
			}

			private function locateWidgetClosed():void
			{
				graphicsLayer.visible=false;
				setMapNavigation(NavigationTool.PAN, "漫游");
			}

			private function locateWidgetOpened():void
			{
				graphicsLayer.visible=true;
				setMapNavigation(NavigationTool.PAN, "漫游");
			}
		]]>
	</mx:Script>
	<WidgetTemplate id="wTemplate" closed="locateWidgetClosed()" open="locateWidgetOpened()"
					width="320" height="160">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">

			<mx:VBox width="100%" height="100%" verticalGap="1" horizontalAlign="center"
					 verticalAlign="middle">
				<mx:Label text="交叉道路定位" styleName="WidgetText"/>
				<mx:Form verticalScrollPolicy="off" paddingTop="2" paddingLeft="4" 
						 paddingBottom="4" paddingRight="2" verticalGap="4" horizontalGap="2">
					<mx:FormItem label=""  styleName="WidgetText" direction="horizontal">
						<aotoSuggest:AutoSuggest id="roadNameIpt" width="120"
												 dataProvider="{configRoads}"/>
						<mx:Button id="crossLocateBtn" label="查询"  click="crossRoadQuery()"/>
					</mx:FormItem>
					<mx:FormItem label="" styleName="WidgetText" direction="horizontal">
						<mx:ComboBox id="crossLocateCbo" width="120" enabled="false"  text="交叉路口"/>
						<mx:Button id="pointLocateBtn" label="定位" click="crossPointLocate()"
								   enabled="{crossLocateCbo.enabled}"/>
					</mx:FormItem>
				</mx:Form>
				<mx:Label id="crossRoadMsg" text="" styleName="WidgetText"/>
			</mx:VBox>
		</mx:ViewStack>
	</WidgetTemplate>
</BaseWidget>
